(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Kinvey"] = factory();
	else
		root["Kinvey"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _kinveyJavascriptSdkCore = __webpack_require__(1);

	var _rack = __webpack_require__(140);

	var _serialize = __webpack_require__(204);

	var _http = __webpack_require__(269);

	// Add Http middleware
	var networkRack = _rack.NetworkRack.sharedInstance();
	networkRack.useAfter(_serialize.SerializeMiddleware, new _http.HttpMiddleware());

	// Export
	module.exports = _kinveyJavascriptSdkCore.Kinvey;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Kinvey = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _errors = __webpack_require__(7);

	var _aggregation = __webpack_require__(13);

	var _client = __webpack_require__(126);

	var _command = __webpack_require__(241);

	var _log = __webpack_require__(199);

	var _metadata = __webpack_require__(129);

	var _query = __webpack_require__(14);

	var _datastore = __webpack_require__(242);

	var _sync = __webpack_require__(127);

	var _user = __webpack_require__(262);

	var _enums = __webpack_require__(128);

	var _network = __webpack_require__(226);

	var _url = __webpack_require__(214);

	var _url2 = _interopRequireDefault(_url);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var appdataNamespace = process.env.KINVEY_DATASTORE_NAMESPACE || 'appdata';

	var Kinvey = function () {
	  function Kinvey() {
	    _classCallCheck(this, Kinvey);
	  }

	  _createClass(Kinvey, null, [{
	    key: 'init',


	    /**
	     * Initializes the library with your app's information.
	     *
	     * @param   {Object}        options                         Options
	     * @param   {string}        options.appKey                  My app key
	     * @param   {string}        [options.appSecret]             My app secret
	     * @param   {string}        [options.masterSecret]          My app's master secret
	     * @param   {string}        [options.encryptionKey]         My app's encryption key
	     * @param   {string}        [options.protocol]              The protocol of the client.
	     * @param   {string}        [options.host]                  The host of the client.
	     * @return  {Client}                                        An instance of Client.
	     *
	     * @throws  {KinveyError}  If an `options.appKey` is not provided.
	     * @throws  {KinveyError}  If neither an `options.appSecret` or `options.masterSecret` is provided.
	     *
	     * @example
	     * var client = Kinvey.init({
	     *   appKey: 'appKey',
	     *   appSecret: 'appSecret'
	     * });
	     */
	    value: function init(options) {
	      if (!options.appKey && !options.appId) {
	        throw new _errors.KinveyError('No App Key was provided. ' + 'Unable to create a new Client without an App Key.');
	      }

	      if (!options.appSecret && !options.masterSecret) {
	        throw new _errors.KinveyError('No App Secret or Master Secret was provided. ' + 'Unable to create a new Client without an App Key.');
	      }

	      this._client = _client.Client.init(options);
	    }

	    /**
	     * Pings the Kinvey service.
	     *
	     * @returns {Promise} The response.
	     */

	  }, {
	    key: 'ping',
	    value: function ping() {
	      var client = arguments.length <= 0 || arguments[0] === undefined ? _client.Client.sharedInstance() : arguments[0];

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.GET,
	        authType: _enums.AuthType.All,
	        url: _url2.default.format({
	          protocol: client.protocol,
	          host: client.host,
	          pathname: appdataNamespace + '/' + client.appKey
	        })
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });
	      return promise;
	    }
	  }, {
	    key: 'client',
	    get: function get() {
	      if (!this._client) {
	        throw new _errors.KinveyError('You have not initialized the library. ' + 'Please call Kinvey.init() to initialize the library.');
	      }

	      return this._client;
	    }
	  }]);

	  return Kinvey;
	}();

	Kinvey.Aggregation = _aggregation.Aggregation;
	Kinvey.AuthorizationGrant = _enums.AuthorizationGrant;
	Kinvey.Command = _command.Command;
	Kinvey.DataStore = _datastore.DataStore;
	Kinvey.DataStoreType = _enums.DataStoreType;
	Kinvey.Log = _log.Log;
	Kinvey.Metadata = _metadata.Metadata;
	Kinvey.Promise = _babybird2.default;
	Kinvey.Query = _query.Query;
	Kinvey.SocialIdentity = _enums.SocialIdentity;
	Kinvey.Sync = _sync.Sync;
	Kinvey.User = _user.User;
	exports.Kinvey = Kinvey;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 2 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var asap = __webpack_require__(4);

	// When this is `false` we disable species support, for a little bit of
	// extra performance.
	var supportSpecies = false;
	// When this is false we assume promise subclass constructors have no
	// side effects.
	var strictConstructors = false;
	// When this is true, a new resolver is created for every Promise.
	var dontReuseResolvers = false;
	// When this is true (and the engine supports it), the Promise will be a
	// true ES2015 class.  However, this currently slows the implementation down
	// by 30% since construction of ES2015 classes is unoptimized.
	var useES2015Class = false;

	var _forEach = Function.call.bind(Array.prototype.forEach);
	var _toString = Function.call.bind(Object.prototype.toString);

	var Symbol = global.Symbol || {};
	var symbolSpecies = Symbol.species || (supportSpecies ? '@@species' : null);

	function defineProperties(object, map) {
	  _forEach(Object.keys(map), function definePropertiesForEach(name) {
	    var method = map[name];
	    Object.defineProperty(object, name, {
	      configurable: true,
	      enumerable: false,
	      writable: true,
	      value: method,
	    });
	  });
	}

	var errorObj = {e: {}};
	// Try/catch is not supported in optimizing compiler, so it is isolated.
	function tryCatch1(fn, arg) {
	  try {
	    return fn(arg);
	  } catch (e) {
	    errorObj.e = e;
	    return errorObj;
	  }
	}
	function tryCatch2(fn, arg1, arg2) {
	  try {
	    return fn(arg1, arg2);
	  } catch (e) {
	    errorObj.e = e;
	    return errorObj;
	  }
	}
	// The -r variant allows specifying the receiver.
	function tryCatch2r(fn, receiver, arg1, arg2) {
	  try {
	    return fn.call(receiver, arg1, arg2);
	  } catch (e) {
	    errorObj.e = e;
	    return errorObj;
	  }
	}
	// The -n variant creates a new object.
	function tryCatch1n(Fn, arg1) {
	  try {
	    return new Fn(arg1);
	  } catch (e) {
	    errorObj.e = e;
	    return errorObj;
	  }
	}

	// Promises

	// Follow implementation in the ES6 spec as closely as possible, but
	// steal tricks from Bluebird for moar speed.
	// In particular, we go to great lengths to avoid allocating objects
	// and closures wherever possible in hot code.

	function TypeIsObject(x) {
	  // This is expensive when it returns false; use this function
	  // when you expect it to return true in the common case.
	  if (false) {
	    return x !== void 0 && x !== null && Object(x) === x;
	  }
	  // It turns out that !TypeIsNotObject is faster...
	  return !TypeIsNotObject(x);
	}
	function TypeIsNotObject(val) {
	  // This is more appropriate when TypeIsObject may return false.
	  return val === void 0 || val === null || val === true || val === false ||
	    typeof val === 'string' || typeof val === 'number' ||
	    typeof val === 'symbol'; // jshint ignore:line
	}

	var IsCallable = ( false) ? function IsCallableSlow(x) {
	  // Some versions of IE say that typeof /abc/ === 'function'
	  return typeof x === 'function' && _toString(x) === '[object Function]';
	} : function IsCallableFast(x) { return typeof x === 'function'; };

	// We can't tell callables from constructors in ES5
	var IsConstructor = IsCallable;

	function SpeciesConstructor(O, defaultConstructor) {
	  var C = O.constructor;
	  if (C === void 0) {
	    return defaultConstructor;
	  }
	  var S;
	  if (symbolSpecies === null) {
	    S = C;
	  } else {
	    if (!TypeIsObject(C)) {
	      throw new TypeError('Bad constructor');
	    }
	    S = C[symbolSpecies];
	    if (S === void 0 || S === null) {
	      return defaultConstructor;
	    }
	  }
	  if (!IsConstructor(S)) {
	    throw new TypeError('Bad @@species');
	  }
	  return S;
	}

	function IsPromise(promise) {
	  if (!TypeIsObject(promise)) {
	    return false;
	  }
	  if (promise._promise_state === undefined) {
	    return false; // Uninitialized, or missing our hidden field.
	  }
	  return true;
	}

	// "PromiseCapability" in the spec is what most promise implementations
	// call a "deferred".
	// We're going to wrap it so that it never throws an exception.
	function PromiseCapability() {
	  // Declare fields of this object.
	  // (Helps with object shape optimization.)
	  var self = this;
	  this.promise = void 0;
	  this.resolve = void 0;
	  this.reject = void 0;
	  this.resolver = function(resolve, reject) {
	    if (self.resolve !== void 0 || self.reject !== void 0) {
	      throw new TypeError('Bad Promise implementation!');
	    }
	    self.resolve = resolve;
	    self.reject = reject;
	  };
	}
	PromiseCapability.prototype.free = function() {
	  if (dontReuseResolvers) { return; }
	  if (this.dontReuse) { return; }
	  this.promise = void 0;
	  this.resolve = void 0;
	  this.reject = void 0;
	  freeCapabilityList.push(this);
	};
	PromiseCapability.prototype.getPromiseAndFree = function() {
	  var promise = this.promise;
	  this.free();
	  return promise;
	};
	var freeCapabilityList = [];

	function makeCapabilityFast(C) {
	  thenFastPath = FAST_PATH_MAKE_CAP;
	  // `thenFastPath` is always reset to FAST_PATH_NONE by `makeCapability`
	  return makeCapability(C);
	}

	function makeCapability(C) {
	  if (!IsConstructor(C)) {
	    thenFastPath = FAST_PATH_NONE;
	    throw new TypeError('Bad promise constructor');
	  }

	  var capability;
	  if (freeCapabilityList.length) {
	    capability = freeCapabilityList.pop();
	  } else {
	    capability = new PromiseCapability();
	  }
	  if (strictConstructors &&
	      C !== Promise && !C.hasOwnProperty('noSideEffects')) {
	    capability.dontReuse = true;
	  }
	  if (thenFastPath === FAST_PATH_MAKE_CAP) {
	    thenFastPathResolver = capability.resolver;
	    capability.promise = tryCatch1n(C, thenFastPathResolver);
	    var wasFastPath = (thenFastPath === FAST_PATH_CTOR_BAILED);
	    thenFastPathResolver = null;
	    thenFastPath = FAST_PATH_NONE;
	    if (capability.promise === errorObj) {
	      capability.free();
	      throw errorObj.e;
	    }
	    if (wasFastPath) { return capability.getPromiseAndFree(); }
	  } else {
	    capability.promise = new C(capability.resolver);
	  }
	  if (!(IsCallable(capability.resolve) && IsCallable(capability.reject))) {
	    throw new TypeError('Bad promise constructor');
	  }
	  return capability;
	}

	// Forward declaration
	var promisePrototypeThen;
	var fakeRetvalFromThen = false;

	// Constants for Promise implementation
	var PROMISE_IDENTITY = (function PROMISE_IDENTITY(v) { return v; });
	var PROMISE_THROWER = (function PROMISE_THROWER(t) { throw t; });
	var PROMISE_FAKE_CAPABILITY = new PromiseCapability();
	var PROMISE_PENDING = 0;
	var PROMISE_RESOLVING = 1; // PROMISE_PENDING combined with alreadyResolved
	var PROMISE_FULFILLED = 2;
	var PROMISE_REJECTED = 3;

	// States for then-fast-path
	var FAST_PATH_NONE = 0;
	var FAST_PATH_MAKE_CAP = 1;
	var FAST_PATH_CTOR_BAILED = 2;

	var thenFastPath = FAST_PATH_NONE;
	var thenFastPathResolver = null;

	function promiseCheckAndResolve(promise, value) {
	  /* jshint bitwise: false */
	  if ((promise._promise_state & 3) !== PROMISE_PENDING) { return; }
	  promise._promise_state++; // Sets state to PROMISE_RESOLVING
	  resolvePromise(promise, value);
	  return promise;
	}
	function promiseCheckAndReject(promise, value) {
	  /* jshint bitwise: false */
	  if ((promise._promise_state & 3) !== PROMISE_PENDING) { return; }
	  promise._promise_state++; // Sets state to PROMISE_RESOLVING
	  rejectPromise(promise, value);
	  return promise;
	}
	function promiseReactionResolve(promiseCapability, handlerResult) {
	  if (promiseCapability.constructor === PromiseCapability) {
	    var resolve = promiseCapability.resolve;
	    resolve(handlerResult);
	    return promiseCapability.getPromiseAndFree();
	  }
	  // Optimized case; this is a "standard" promise.
	  return promiseCheckAndResolve(promiseCapability, handlerResult);
	}
	function promiseReactionReject(promiseCapability, handlerResult, noFree) {
	  if (promiseCapability.constructor === PromiseCapability) {
	    var reject = promiseCapability.reject;
	    reject(handlerResult);
	    if (noFree) { return promiseCapability.promise; }
	    return promiseCapability.getPromiseAndFree();
	  }
	  // Optimized case; this is a "standard" promise.
	  return promiseCheckAndReject(promiseCapability, handlerResult);
	}
	function promiseReactionJob(handler, promiseCapability, argument) {
	  var handlerResult;
	  // Encapsulate try/catch here to avoid deoptimization.
	  handlerResult = tryCatch1(handler, argument);
	  if (promiseCapability === PROMISE_FAKE_CAPABILITY) { return; }
	  if (handlerResult === errorObj) {
	    handlerResult = errorObj.e;
	    return promiseReactionReject(promiseCapability, handlerResult);
	  }
	  return promiseReactionResolve(promiseCapability, handlerResult);
	}

	function PromiseReactionJobTask() {
	  this.handler = null;
	  this.capability = null;
	  this.argument = null;
	}
	PromiseReactionJobTask.prototype.call = function() {
	  promiseReactionJob(this.handler, this.capability, this.argument);
	  this.handler = null;
	  this.capability = null;
	  this.argument = null;
	  freePromiseReactionJobTasks.push(this);
	};
	var freePromiseReactionJobTasks = [];

	function triggerPromiseReaction(handler, capability, argument) {
	  var task;
	  if (freePromiseReactionJobTasks.length) {
	    task = freePromiseReactionJobTasks.pop();
	  } else {
	    task = new PromiseReactionJobTask();
	  }
	  task.handler = handler;
	  task.capability = capability;
	  task.argument = argument;
	  asap(task);
	}

	function fulfillPromise(promise, value) {
	  /* jshint bitwise: false */
	  var length = promise._promise_state >>> 2;
	  if (length > 0) {
	    triggerPromiseReaction(
	      promise._promise_fulfillReactions0,
	      promise._promise_reactionCapability0,
	      value);
	    promise._promise_fulfillReactions0 = void 0;
	    promise._promise_rejectReactions0 = void 0;
	    promise._promise_reactionCapability0 = void 0;
	    if (length > 1) {
	      for (var i = 1, idx = 0; i < length; i++) {
	        triggerPromiseReaction(promise[idx], promise[idx + 2], value);
	        promise[idx++] = void 0;
	        promise[idx++] = void 0;
	        promise[idx++] = void 0;
	      }
	    }
	  }
	  promise._promise_result = value;
	  promise._promise_state = PROMISE_FULFILLED;
	}

	function rejectPromise(promise, reason) {
	  /* jshint bitwise: false */
	  var length = promise._promise_state >>> 2;
	  if (length > 0) {
	    triggerPromiseReaction(
	      promise._promise_rejectReactions0,
	      promise._promise_reactionCapability0,
	      reason);
	    promise._promise_fulfillReactions0 = void 0;
	    promise._promise_rejectReactions0 = void 0;
	    promise._promise_reactionCapability0 = void 0;
	    if (length > 1) {
	      for (var i = 1, idx = 0; i < length; i++) {
	        triggerPromiseReaction(promise[idx + 1], promise[idx + 2], reason);
	        promise[idx++] = void 0;
	        promise[idx++] = void 0;
	        promise[idx++] = void 0;
	      }
	    }
	  }
	  promise._promise_result = reason;
	  promise._promise_state = PROMISE_REJECTED;
	}

	function getThen(r) { return r.then; }

	function PromiseResolveThenableJobTask() {
	  this.promise = null;
	  this.resolution = null;
	  this.then = null;
	}
	PromiseResolveThenableJobTask.prototype.call = function() {
	  promiseResolveThenableJob(this.promise, this.resolution, this.then);
	  this.promise = null;
	  this.resolution = null;
	  this.then = null;
	  freePromiseResolveThenableJobTasks.push(this);
	};
	var freePromiseResolveThenableJobTasks = [];

	function triggerPromiseResolveThenableJob(promise, resolution, then) {
	  var task;
	  if (freePromiseResolveThenableJobTasks.length) {
	    task = freePromiseResolveThenableJobTasks.pop();
	  } else {
	    task = new PromiseResolveThenableJobTask();
	  }
	  task.promise = promise;
	  task.resolution = resolution;
	  task.then = then;
	  asap(task);
	}

	function resolvePromise(promise, resolution) {
	  if (resolution === promise) {
	    return rejectPromise(promise, new TypeError('Self resolution'));
	  }
	  if (TypeIsNotObject(resolution)) {
	    return fulfillPromise(promise, resolution);
	  }
	  var then = tryCatch1(getThen, resolution);
	  if (then === errorObj) {
	    return rejectPromise(promise, errorObj.e);
	  }
	  if (!IsCallable(then)) {
	    return fulfillPromise(promise, resolution);
	  }
	  triggerPromiseResolveThenableJob(promise, resolution, then);
	}

	function promiseResolveThenableJob(promise, thenable, then) {
	  // Inlined copy of createResolvingFunctions(promise)
	  var alreadyResolved = false;
	  var resolve = function promiseResolveThenableJobResolve(resolution) {
	    if (alreadyResolved) { return; }
	    alreadyResolved = true;
	    resolvePromise(promise, resolution);
	  };
	  var reject = function promiseResolveThenableJobReject(reason) {
	    if (alreadyResolved) { return; }
	    alreadyResolved = true;
	    return rejectPromise(promise, reason);
	  };
	  if (then === promisePrototypeThen) {
	    fakeRetvalFromThen = true; // Reset to false at the top of Promise#then
	  }
	  var value = tryCatch2r(then, thenable, resolve, reject);
	  if (value === errorObj) {
	    reject(errorObj.e);
	  }
	}

	var PromiseConstruct = function Promise(resolver) {
	  if (!(this instanceof Promise)) {
	    throw new TypeError('Constructor Promise requires "new"');
	  }
	  if (this._promise_state !== void 0) {
	    throw new TypeError('Bad construction');
	  }
	  // The spec requires no enumerable fields, but for speed we're going
	  // to expose our implementation here.
	  // Since most promises have exactly one handler, the first one is
	  // stored directly on the object.  The rest (if needed) are stored
	  // on the object's element array to avoid unnecessary indirection.
	  this._promise_result = void 0;
	  this._promise_state = PROMISE_PENDING;
	  this._promise_fulfillReactions0 = void 0;
	  this._promise_rejectReactions0 = void 0;
	  this._promise_reactionCapability0 = void 0;
	  if (thenFastPath === FAST_PATH_MAKE_CAP &&
	      resolver === thenFastPathResolver) {
	    // We will create the resolving functions lazily.
	    thenFastPath = FAST_PATH_CTOR_BAILED;
	    return;
	  }
	  // see https://bugs.ecmascript.org/show_bug.cgi?id=2482
	  // (This check has been reordered after the fast path.)
	  if (!IsCallable(resolver)) {
	    throw new TypeError('not a valid resolver');
	  }
	  // Inlined copy of createResolvingFunctions(this), using _promise_state
	  // to track the `alreadyResolved` boolean.
	  var promise = this;
	  var resolve = function PromiseResolve(resolution) {
	    promiseCheckAndResolve(promise, resolution);
	  };
	  var reject = function PromiseReject(reason) {
	    promiseCheckAndReject(promise, reason);
	  };
	  var value = tryCatch2(resolver, resolve, reject);
	  if (value === errorObj) {
	    reject(errorObj.e);
	  }
	};
	var Promise = (function makeClass() {
	  if (useES2015Class) {
	    try {
	      /* jshint evil:true */
	      return eval('(function(PromiseConstruct) {' +
	                  '"use strict";' +
	                  'return class Promise {' +
	                  '  constructor(executor) {' +
	                  '    PromiseConstruct.call(this, executor);' +
	                  '  }' +
	                  '};})')(PromiseConstruct);
	    } catch (e) { /* I guess ES2015 syntax isn't supported. */ }
	  }
	  return PromiseConstruct;
	})();
	var Promise$prototype = Promise.prototype;

	defineProperties(Promise, {
	  reject: function reject(reason) {
	    var C = this;
	    if (!TypeIsObject(C)) {
	      throw new TypeError('Bad promise constructor');
	    }
	    var capability = makeCapabilityFast(C);
	    return promiseReactionReject(capability, reason);
	  },

	  resolve: function resolve(v) {
	    // See https://esdiscuss.org/topic/fixing-promise-resolve for spec
	    var C = this;
	    if (!TypeIsObject(C)) {
	      throw new TypeError('Bad promise constructor');
	    }
	    if (IsPromise(v)) {
	      var constructor = v.constructor;
	      if (constructor === C) { return v; }
	    }
	    var capability = makeCapabilityFast(C);
	    return promiseReactionResolve(capability, v);
	  },
	});

	defineProperties(Promise$prototype, {
	  catch: function catch_(onRejected) {
	    return this.then(void 0, onRejected);
	  },

	  then: function then(onFulfilled, onRejected) {
	    /* jshint bitwise: false */
	    var fakeRetval = fakeRetvalFromThen;
	    fakeRetvalFromThen = false;

	    var promise = this;
	    if (!IsPromise(promise)) { throw new TypeError('not a promise'); }
	    var resultCapability, C;
	    if ((!strictConstructors) && fakeRetval) {
	      resultCapability = PROMISE_FAKE_CAPABILITY;
	    } else {
	      C = SpeciesConstructor(promise, Promise);
	      if (fakeRetval &&
	          (C === Promise || C.hasOwnProperty('noSideEffects'))) {
	        resultCapability = PROMISE_FAKE_CAPABILITY;
	      } else {
	        // We might create a fake capability here.
	        resultCapability = makeCapabilityFast(C);
	      }
	    }
	    // PerformPromiseThen(promise, onFulfilled, onRejected, resultCapability)
	    if (!IsCallable(onFulfilled)) {
	      onFulfilled = PROMISE_IDENTITY;
	    }
	    if (!IsCallable(onRejected)) {
	      onRejected = PROMISE_THROWER;
	    }

	    var length;
	    switch (promise._promise_state & 3) {
	    case PROMISE_PENDING:
	    case PROMISE_RESOLVING:
	      length = promise._promise_state >>> 2;
	      if (length === 0) {
	        promise._promise_fulfillReactions0 = onFulfilled;
	        promise._promise_rejectReactions0 = onRejected;
	        promise._promise_reactionCapability0 = resultCapability;
	      } else {
	        var i = 3 * (length - 1);
	        promise[i] = onFulfilled;
	        promise[i + 1] = onRejected;
	        promise[i + 2] = resultCapability;
	      }
	      promise._promise_state += (1 << 2);
	      break;
	    case PROMISE_FULFILLED:
	      triggerPromiseReaction(onFulfilled, resultCapability,
	                             promise._promise_result);
	      break;
	    case PROMISE_REJECTED:
	      triggerPromiseReaction(onRejected, resultCapability,
	                             promise._promise_result);
	      break;
	    default:
	      throw new TypeError('unexpected');
	    }
	    if (resultCapability.constructor === PromiseCapability) {
	      return resultCapability.promise;
	    }
	    return resultCapability;
	  },
	});
	// Store the identify of the Promise#then function for optimization.
	promisePrototypeThen = Promise$prototype.then;
	// This encapsulates the `then` optimization, for use by promise-extra.js
	function optimizePromiseThen(promise, onFulfilled, onReject) {
	  var then = promise.then;
	  if (then === promisePrototypeThen) {
	    fakeRetvalFromThen = true; // Reset to false at the top of Promise#then
	    promisePrototypeThen.call(promise, onFulfilled, onReject);
	  } else {
	    then.call(promise, onFulfilled, onReject);
	  }
	}

	// Special "extra" method which is like `Promise#then` but it does
	// *not* return a `Promise`.  This can be much faster when you don't
	// need the result.
	Promise$prototype.then0 = function then0(f, r) {
	  optimizePromiseThen(this, f, r);
	};

	if (symbolSpecies !== null) {
	  // Default species getter.
	  Object.defineProperty(Promise, symbolSpecies, {
	    configurable: true,
	    enumerable: false,
	    get: function speciesGetter() { return this; },
	  });
	}

	// Add Promise.all / Promise.race methods
	// (These are split into a separate file since their implementation is
	// reasonably independent of the core and their performance is not critical.)
	__webpack_require__(5)(
	  Promise, PromiseCapability, makeCapability, makeCapabilityFast,
	  promiseReactionResolve, promiseReactionReject,
	  optimizePromiseThen, symbolSpecies
	);

	module.exports = Promise;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 4 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	// Use the fastest means possible to execute a task in its own turn, with
	// priority over other events including IO, animation, reflow, and redraw
	// events in browsers.
	//
	// An exception thrown by a task will permanently interrupt the processing of
	// subsequent tasks. The higher level `asap` function ensures that if an
	// exception is thrown by a task, that the task queue will continue flushing as
	// soon as possible, but if you use `rawAsap` directly, you are responsible to
	// either ensure that no exceptions are thrown from your task, or to manually
	// call `rawAsap.requestFlush` if an exception is thrown.
	module.exports = rawAsap;
	function rawAsap(task) {
	    if (!queue.length) {
	        requestFlush();
	        flushing = true;
	    }
	    // Equivalent to push, but avoids a function call.
	    queue[queue.length] = task;
	}

	var queue = [];
	// Once a flush has been requested, no further calls to `requestFlush` are
	// necessary until the next `flush` completes.
	var flushing = false;
	// `requestFlush` is an implementation-specific method that attempts to kick
	// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
	// the event queue before yielding to the browser's own event loop.
	var requestFlush;
	// The position of the next task to execute in the task queue. This is
	// preserved between calls to `flush` so that it can be resumed if
	// a task throws an exception.
	var index = 0;
	// If a task schedules additional tasks recursively, the task queue can grow
	// unbounded. To prevent memory exhaustion, the task queue will periodically
	// truncate already-completed tasks.
	var capacity = 1024;

	// The flush function processes all tasks that have been scheduled with
	// `rawAsap` unless and until one of those tasks throws an exception.
	// If a task throws an exception, `flush` ensures that its state will remain
	// consistent and will resume where it left off when called again.
	// However, `flush` does not make any arrangements to be called again if an
	// exception is thrown.
	function flush() {
	    while (index < queue.length) {
	        var currentIndex = index;
	        // Advance the index before calling the task. This ensures that we will
	        // begin flushing on the next task the task throws an error.
	        index = index + 1;
	        queue[currentIndex].call();
	        // Prevent leaking memory for long chains of recursive calls to `asap`.
	        // If we call `asap` within tasks scheduled by `asap`, the queue will
	        // grow, but to avoid an O(n) walk for every task we execute, we don't
	        // shift tasks off the queue after they have been executed.
	        // Instead, we periodically shift 1024 tasks off the queue.
	        if (index > capacity) {
	            // Manually shift all values starting at the index back to the
	            // beginning of the queue.
	            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
	                queue[scan] = queue[scan + index];
	            }
	            queue.length -= index;
	            index = 0;
	        }
	    }
	    queue.length = 0;
	    index = 0;
	    flushing = false;
	}

	// `requestFlush` is implemented using a strategy based on data collected from
	// every available SauceLabs Selenium web driver worker at time of writing.
	// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

	// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
	// have WebKitMutationObserver but not un-prefixed MutationObserver.
	// Must use `global` instead of `window` to work in both frames and web
	// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
	var BrowserMutationObserver = global.MutationObserver || global.WebKitMutationObserver;

	// MutationObservers are desirable because they have high priority and work
	// reliably everywhere they are implemented.
	// They are implemented in all modern browsers.
	//
	// - Android 4-4.3
	// - Chrome 26-34
	// - Firefox 14-29
	// - Internet Explorer 11
	// - iPad Safari 6-7.1
	// - iPhone Safari 7-7.1
	// - Safari 6-7
	if (typeof BrowserMutationObserver === "function") {
	    requestFlush = makeRequestCallFromMutationObserver(flush);

	// MessageChannels are desirable because they give direct access to the HTML
	// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
	// 11-12, and in web workers in many engines.
	// Although message channels yield to any queued rendering and IO tasks, they
	// would be better than imposing the 4ms delay of timers.
	// However, they do not work reliably in Internet Explorer or Safari.

	// Internet Explorer 10 is the only browser that has setImmediate but does
	// not have MutationObservers.
	// Although setImmediate yields to the browser's renderer, it would be
	// preferrable to falling back to setTimeout since it does not have
	// the minimum 4ms penalty.
	// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
	// Desktop to a lesser extent) that renders both setImmediate and
	// MessageChannel useless for the purposes of ASAP.
	// https://github.com/kriskowal/q/issues/396

	// Timers are implemented universally.
	// We fall back to timers in workers in most engines, and in foreground
	// contexts in the following browsers.
	// However, note that even this simple case requires nuances to operate in a
	// broad spectrum of browsers.
	//
	// - Firefox 3-13
	// - Internet Explorer 6-9
	// - iPad Safari 4.3
	// - Lynx 2.8.7
	} else {
	    requestFlush = makeRequestCallFromTimer(flush);
	}

	// `requestFlush` requests that the high priority event queue be flushed as
	// soon as possible.
	// This is useful to prevent an error thrown in a task from stalling the event
	// queue if the exception handled by Node.js’s
	// `process.on("uncaughtException")` or by a domain.
	rawAsap.requestFlush = requestFlush;

	// To request a high priority event, we induce a mutation observer by toggling
	// the text of a text node between "1" and "-1".
	function makeRequestCallFromMutationObserver(callback) {
	    var toggle = 1;
	    var observer = new BrowserMutationObserver(callback);
	    var node = document.createTextNode("");
	    observer.observe(node, {characterData: true});
	    return function requestCall() {
	        toggle = -toggle;
	        node.data = toggle;
	    };
	}

	// The message channel technique was discovered by Malte Ubl and was the
	// original foundation for this library.
	// http://www.nonblocking.io/2011/06/windownexttick.html

	// Safari 6.0.5 (at least) intermittently fails to create message ports on a
	// page's first load. Thankfully, this version of Safari supports
	// MutationObservers, so we don't need to fall back in that case.

	// function makeRequestCallFromMessageChannel(callback) {
	//     var channel = new MessageChannel();
	//     channel.port1.onmessage = callback;
	//     return function requestCall() {
	//         channel.port2.postMessage(0);
	//     };
	// }

	// For reasons explained above, we are also unable to use `setImmediate`
	// under any circumstances.
	// Even if we were, there is another bug in Internet Explorer 10.
	// It is not sufficient to assign `setImmediate` to `requestFlush` because
	// `setImmediate` must be called *by name* and therefore must be wrapped in a
	// closure.
	// Never forget.

	// function makeRequestCallFromSetImmediate(callback) {
	//     return function requestCall() {
	//         setImmediate(callback);
	//     };
	// }

	// Safari 6.0 has a problem where timers will get lost while the user is
	// scrolling. This problem does not impact ASAP because Safari 6.0 supports
	// mutation observers, so that implementation is used instead.
	// However, if we ever elect to use timers in Safari, the prevalent work-around
	// is to add a scroll event listener that calls for a flush.

	// `setTimeout` does not call the passed callback if the delay is less than
	// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
	// even then.

	function makeRequestCallFromTimer(callback) {
	    return function requestCall() {
	        // We dispatch a timeout with a specified delay of 0 for engines that
	        // can reliably accommodate that request. This will usually be snapped
	        // to a 4 milisecond delay, but once we're flushing, there's no delay
	        // between events.
	        var timeoutHandle = setTimeout(handleTimer, 0);
	        // However, since this timer gets frequently dropped in Firefox
	        // workers, we enlist an interval handle that will try to fire
	        // an event 20 times per second until it succeeds.
	        var intervalHandle = setInterval(handleTimer, 50);

	        function handleTimer() {
	            // Whichever timer succeeds will cancel both timers and
	            // execute the callback.
	            clearTimeout(timeoutHandle);
	            clearInterval(intervalHandle);
	            callback();
	        }
	    };
	}

	// This is for `asap.js` only.
	// Its name will be periodically randomized to break any code that depends on
	// its existence.
	rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

	// ASAP was originally a nextTick shim included in Q. This was factored out
	// into this ASAP package. It was later adapted to RSVP which made further
	// amendments. These decisions, particularly to marginalize MessageChannel and
	// to capture the MutationObserver implementation in a closure, were integrated
	// back into ASAP proper.
	// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/* Add Promise.all and Promise.race implementations. */
	'use strict';
	var isArguments = __webpack_require__(6);

	var _call = Function.call.bind(Function.call);
	var _forEach = Function.call.bind(Array.prototype.forEach);
	var _toString = Function.call.bind(Object.prototype.toString);
	var _floor = Math.floor;
	var _abs = Math.abs;

	var Symbol = global.Symbol || {};
	var symbolIterator = Symbol.iterator || '@@iterator';

	var defineProperties = function(object, map) {
	  _forEach(Object.keys(map), function(name) {
	    var method = map[name];
	    Object.defineProperty(object, name, {
	      configurable: true,
	      enumerable: false,
	      writable: true,
	      value: method,
	    });
	  });
	};

	var errorObj = {e: {}};
	// Try/catch is not supported in optimizing compiler, so it is isolated.
	// The -r variant allows specifying the receiver.
	function tryCatch0r(fn, receiver) {
	  try {
	    return fn.call(receiver);
	  } catch (e) {
	    errorObj.e = e;
	    return errorObj;
	  }
	}
	function tryCatch1(fn, arg1) {
	  try {
	    return fn(arg1);
	  } catch (e) {
	    errorObj.e = e;
	    return errorObj;
	  }
	}
	function tryCatch2(fn, arg1, arg2) {
	  try {
	    return fn(arg1, arg2);
	  } catch (e) {
	    errorObj.e = e;
	    return errorObj;
	  }
	}
	function tryCatch3(fn, arg1, arg2, arg3) {
	  try {
	    return fn(arg1, arg2, arg3);
	  } catch (e) {
	    errorObj.e = e;
	    return errorObj;
	  }
	}


	var TypeIsObject = function(x) {
	  /* jshint eqnull:true */
	  // This is expensive when it returns false; use this function
	  // when you expect it to return true in the common case.
	  return x != null && Object(x) === x;
	};

	var ToObject = function(o, optMessage) {
	  /* jshint eqnull:true */
	  if (o == null) {
	    throw new TypeError(optMessage || 'Cannot call method on ' + o);
	  }
	  return Object(o);
	};

	var IsCallable = ( false) ? function(x) {
	  // Some versions of IE say that typeof /abc/ === 'function'
	  return typeof x === 'function' && _toString(x) === '[object Function]';
	} : function(x) { return typeof x === 'function'; /* Much faster */};

	var ToNumber = function(value) {
	  /*
	  // Implementations which implement Symbol also throw the proper TypeError
	  // if it is converted to a number.
	  if (_toString(value) === '[object Symbol]') {
	    throw new TypeError('Cannot convert a Symbol value to a number');
	  }
	  */
	  return +value;
	};

	var numberIsNaN = Number.isNaN || function isNaN(value) {
	  return value !== value;
	};

	var numberIsFinite = Number.isFinite || function isFinite(value) {
	  return typeof value === 'number' && global.isFinite(value);
	};

	var ToInteger = function(value) {
	  var number = ToNumber(value);
	  if (numberIsNaN(number)) { return 0; }
	  if (number === 0 || !numberIsFinite(number)) { return number; }
	  return (number > 0 ? 1 : -1) * _floor(_abs(number));
	};

	var ToLength = function(value) {
	  var len = ToInteger(value);
	  if (len <= 0) { return 0; } // Includes converting -0 to +0
	  if (typeof Number.MAX_SAFE_INTEGER !== 'undefined') {
	    if (len > Number.MAX_SAFE_INTEGER) { return Number.MAX_SAFE_INTEGER; }
	  }
	  return len;
	};

	// Stripped down value-only ArrayIterator.
	var ArrayIterator = function(array) {
	  this.i = 0;
	  this.array = array;
	};
	defineProperties(ArrayIterator.prototype, {
	  next: function() {
	    var i = this.i;
	    var array = this.array;
	    if (!(this instanceof ArrayIterator)) {
	      throw new TypeError('Not an ArrayIterator');
	    }
	    if (typeof array !== 'undefined') {
	      var len = Array.isArray(array) ? array.length : ToLength(array.length);
	      for (; i < len; i++) {
	        var retval = array[i];
	        this.i = i + 1;
	        return { value: retval, done: false };
	      }
	    }
	    this.array = void 0;
	    return { value: void 0, done: true };
	  },
	});
	Object.defineProperty(ArrayIterator.prototype, symbolIterator, {
	  configurable: true,
	  enumerable: false,
	  writable: true,
	  value: function() { return this; },
	});

	var DEFAULT_ARRAY_ITERATOR = {};

	var GetIterator = function(o, detectDefault) {
	  var itFn = GetMethod(o, symbolIterator);
	  if (!IsCallable(itFn)) {
	    // Node 0.10 compatibility.
	    if (Array.isArray(o) || isArguments(o)) {
	      return detectDefault ? DEFAULT_ARRAY_ITERATOR : new ArrayIterator(o);
	    }
	    // Better diagnostics if itFn is null or undefined
	    throw new TypeError('value is not an iterable');
	  }
	  if (detectDefault && itFn === Array.prototype[symbolIterator]) {
	    return DEFAULT_ARRAY_ITERATOR;
	  }
	  var it = _call(itFn, o);
	  if (!TypeIsObject(it)) {
	    throw new TypeError('bad iterator');
	  }
	  return it;
	};

	var GetMethod = function(o, p) {
	  var func = ToObject(o)[p];
	  if (func === void 0 || func === null) {
	    return void 0;
	  }
	  if (!IsCallable(func)) {
	    throw new TypeError('Method not callable: ' + p);
	  }
	  return func;
	};

	var IteratorComplete = function(iterResult) {
	  return !!(iterResult.done);
	};

	var IteratorClose = function(iterator, completionIsThrow) {
	  var returnMethod = GetMethod(iterator, 'return');
	  if (returnMethod === void 0) {
	    return;
	  }
	  var innerResult, innerException;
	  innerResult = tryCatch0r(returnMethod, iterator);
	  if (innerResult === errorObj) {
	    innerException = errorObj.e;
	  }
	  if (completionIsThrow) {
	    return;
	  }
	  if (innerException) {
	    throw innerException;
	  }
	  if (!TypeIsObject(innerResult)) {
	    throw new TypeError("Iterator's return method returned a non-object.");
	  }
	};

	var IteratorNext0 = function(it) {
	  var result = it.next();
	  if (!TypeIsObject(result)) {
	    throw new TypeError('bad iterator');
	  }
	  return result;
	};

	var IteratorStep = function(it) {
	  var result = IteratorNext0(it);
	  var done = IteratorComplete(result);
	  return done ? false : result;
	};

	module.exports = function(
	  Promise, PromiseCapability, makeCapability, makeCapabilityFast,
	  promiseReactionResolve, promiseReactionReject,
	  optimizePromiseThen, symbolSpecies
	) {

	  // This is a common step in many Promise methods
	  var getPromiseSpecies = function(C) {
	    if (!TypeIsObject(C)) {
	      throw new TypeError('Promise is not object');
	    }
	    if (symbolSpecies !== null) {
	      var S = C[symbolSpecies];
	      if (S !== void 0 && S !== null) {
	        return S;
	      }
	    }
	    return C;
	  };

	  var _promiseAllResolver = function(index, values, capability, remaining) {
	    var alreadyCalled = false;
	    return function(x) {
	      if (alreadyCalled) { return; }
	      alreadyCalled = true;
	      values[index] = x;
	      if ((--remaining.count) === 0) {
	        promiseReactionResolve(capability, values);
	      }
	    };
	  };

	  var performPromiseAll = function(iteratorRecord, C, resultCapability) {
	    var it = iteratorRecord.iterator;
	    var values = [];
	    var remaining = { count: 1 };
	    var next, nextValue, rejectElement;
	    if (resultCapability.constructor === PromiseCapability) {
	      // This capability won't be returned to pool.
	      rejectElement = resultCapability.reject;
	    } else {
	      rejectElement = function(e) {
	        // Not safe to return capability to pool, since resolves are still
	        // pending.
	        promiseReactionReject(resultCapability, e, 'no free');
	      };
	    }
	    for (var index = 0; ; index++) {
	      next = tryCatch1(IteratorStep, it);
	      if (next === errorObj) {
	        iteratorRecord.done = true;
	        throw errorObj.e;
	      } else if (next === false) {
	        iteratorRecord.done = true;
	        break;
	      }
	      nextValue = next.value;
	      values[index] = void 0;
	      var nextPromise = C.resolve(nextValue);
	      var resolveElement = _promiseAllResolver(
	        index, values, resultCapability, remaining
	      );
	      remaining.count++;
	      optimizePromiseThen(
	        nextPromise, resolveElement, rejectElement
	      );
	    }
	    if ((--remaining.count) === 0) {
	      promiseReactionResolve(resultCapability, values);
	    }
	    if (resultCapability.constructor === PromiseCapability) {
	      return resultCapability.promise;
	    }
	    return resultCapability;
	  };

	  var performPromiseAllArray = function(array, C, resultCapability) {
	    var values = new Array(array.length);
	    var remaining = { count: 1 };
	    var nextValue, rejectElement;
	    if (resultCapability.constructor === PromiseCapability) {
	      // This capability won't be returned to pool.
	      rejectElement = resultCapability.reject;
	    } else {
	      rejectElement = function(e) {
	        // Not safe to return capability to pool, since resolves are still
	        // pending.
	        promiseReactionReject(resultCapability, e, 'no free');
	      };
	    }
	    for (var index = 0; index < array.length; index++) {
	      nextValue = array[index];
	      values[index] = void 0;
	      var nextPromise = C.resolve(nextValue);
	      var resolveElement = _promiseAllResolver(
	        index, values, resultCapability, remaining
	      );
	      remaining.count++;
	      optimizePromiseThen(
	        nextPromise, resolveElement, rejectElement
	      );
	    }
	    if ((--remaining.count) === 0) {
	      promiseReactionResolve(resultCapability, values);
	    }
	    if (resultCapability.constructor === PromiseCapability) {
	      return resultCapability.promise;
	    }
	    return resultCapability;
	  };

	  var performPromiseRace = function(iteratorRecord, C, resultCapability) {
	    var it = iteratorRecord.iterator;
	    var next, nextValue, nextPromise;
	    while (true) {
	      next = tryCatch1(IteratorStep, it);
	      if (next === errorObj) {
	        iteratorRecord.done = true;
	        throw errorObj.e;
	      } else if (next === false) {
	        // NOTE: If iterable has no items, resulting promise will never
	        // resolve; see:
	        // https://github.com/domenic/promises-unwrapping/issues/75
	        // https://bugs.ecmascript.org/show_bug.cgi?id=2515
	        iteratorRecord.done = true;
	        break;
	      }
	      nextValue = next.value;
	      nextPromise = C.resolve(nextValue);
	      optimizePromiseThen(
	        nextPromise, resultCapability.resolve, resultCapability.reject
	      );
	    }
	    return resultCapability.promise;
	  };

	  defineProperties(Promise, {
	    all: function all(iterable) {
	      var C = getPromiseSpecies(this);
	      var capability = makeCapabilityFast(C);
	      var iterator, iteratorRecord, result, ex;
	      iterator = tryCatch2(GetIterator, iterable, true);
	      if (iterator === DEFAULT_ARRAY_ITERATOR) {
	        // Fast path
	        result = tryCatch3(performPromiseAllArray, iterable, C, capability);
	        if (result !== errorObj) {
	          return result;
	        }
	        // Not safe to return capability to pool, since there may be
	        // calls to `resolve` still pending.
	        return promiseReactionReject(capability, errorObj.e, 'no free');
	      }
	      if (iterator === errorObj) {
	        return promiseReactionReject(capability, errorObj.e);
	      }
	      iteratorRecord = { iterator: iterator, done: false };
	      result = tryCatch3(performPromiseAll, iteratorRecord, C, capability);
	      if (result !== errorObj) {
	        return result;
	      }
	      ex = errorObj.e;
	      if (!iteratorRecord.done) {
	        result = tryCatch2(IteratorClose, iterator, true);
	        if (result === errorObj) {
	          ex = errorObj.e;
	        }
	      }
	      // Not safe to return capability to pool, since there may be
	      // calls to `resolve` still pending.
	      return promiseReactionReject(capability, ex, 'no free');
	    },

	    race: function race(iterable) {
	      var C = getPromiseSpecies(this);
	      var capability = makeCapability(C);
	      var iterator, iteratorRecord, reject, result, ex;
	      iterator = tryCatch1(GetIterator, iterable);
	      if (iterator === errorObj) {
	        reject = capability.reject;
	        reject(errorObj.e);
	        return capability.promise;
	      }
	      iteratorRecord = { iterator: iterator, done: false };
	      result = tryCatch3(performPromiseRace, iteratorRecord, C, capability);
	      if (result !== errorObj) {
	        return result;
	      }
	      ex = errorObj.e;
	      if (!iteratorRecord.done) {
	        result = tryCatch2(IteratorClose, iterator, true);
	        if (result === errorObj) {
	          ex = errorObj.e;
	        }
	      }
	      reject = capability.reject;
	      reject(ex);
	      return capability.promise;
	    },
	  });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 6 */
/***/ function(module, exports) {

	'use strict';

	var toStr = Object.prototype.toString;

	var isStandardArguments = function isArguments(value) {
		return toStr.call(value) === '[object Arguments]';
	};

	var isLegacyArguments = function isArguments(value) {
		if (isStandardArguments(value)) {
			return true;
		}
		return value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value) !== '[object Array]' &&
			toStr.call(value.callee) === '[object Function]';
	};

	var supportsStandardArguments = (function () {
		return isStandardArguments(arguments);
	}());

	isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

	module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.NoResponseError = exports.NotFoundError = exports.NetworkConnectionError = exports.KinveyError = exports.InvalidCredentialsError = exports.InsufficientCredentialsError = exports.ActiveUserError = undefined;

	var _util = __webpack_require__(8);

	var _util2 = _interopRequireDefault(_util);

	var _isFunction = __webpack_require__(11);

	var _isFunction2 = _interopRequireDefault(_isFunction);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @private
	 */
	Error.extend = function extend(name) {
	  var SubType = function SubType(message, debug) {
	    if (!(this instanceof SubType)) {
	      return new SubType(message, debug);
	    }

	    this.name = name;
	    this.message = message;
	    this.description = message;
	    this.debug = debug;

	    if ((0, _isFunction2.default)(Error.captureStackTrace)) {
	      Error.captureStackTrace(this, this.constructor);
	    }
	  };

	  _util2.default.inherits(SubType, this);

	  SubType.prototype.toString = function toString() {
	    return this.name + ': ' + _util2.default.inspect(this.message);
	  };

	  SubType.extend = this.extend;
	  return SubType;
	};

	var ActiveUserError = exports.ActiveUserError = Error.extend('ActiveUserError');
	var InsufficientCredentialsError = exports.InsufficientCredentialsError = Error.extend('InsufficientCredentialsError');
	var InvalidCredentialsError = exports.InvalidCredentialsError = Error.extend('InvalidCredentialsError');
	var KinveyError = exports.KinveyError = Error.extend('KinveyError');
	var NetworkConnectionError = exports.NetworkConnectionError = Error.extend('NetworkConnectionError');
	var NotFoundError = exports.NotFoundError = Error.extend('NotFoundError');
	var NoResponseError = exports.NoResponseError = Error.extend('NoResponseError');

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(9);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(10);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(2)))

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 10 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(12);

	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8 which returns 'object' for typed array and weak map constructors,
	  // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	module.exports = isFunction;


/***/ },
/* 12 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Aggregation = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _errors = __webpack_require__(7);

	var _query2 = __webpack_require__(14);

	var _result = __webpack_require__(125);

	var _result2 = _interopRequireDefault(_result);

	var _assign = __webpack_require__(114);

	var _assign2 = _interopRequireDefault(_assign);

	var _forEach = __webpack_require__(16);

	var _forEach2 = _interopRequireDefault(_forEach);

	var _isObject = __webpack_require__(12);

	var _isObject2 = _interopRequireDefault(_isObject);

	var _isString = __webpack_require__(36);

	var _isString2 = _interopRequireDefault(_isString);

	var _isFunction = __webpack_require__(11);

	var _isFunction2 = _interopRequireDefault(_isFunction);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Aggregation = function () {
	  function Aggregation(options) {
	    _classCallCheck(this, Aggregation);

	    options = (0, _assign2.default)({
	      query: null,
	      initial: {},
	      key: {},
	      reduce: function () {}.toString()
	    }, options);

	    this.query(options.query);
	    this._initial = options.initial;
	    this._key = options.key;
	    this._reduce = options.reduce;
	  }

	  _createClass(Aggregation, [{
	    key: 'by',
	    value: function by(field) {
	      this._key[field] = true;
	      return this;
	    }
	  }, {
	    key: 'initial',
	    value: function initial(objectOrKey, value) {
	      if (typeof value === 'undefined' && !(0, _isObject2.default)(objectOrKey)) {
	        throw new _errors.KinveyError('objectOrKey argument must be an Object.');
	      }

	      if ((0, _isObject2.default)(objectOrKey)) {
	        this._initial = objectOrKey;
	      } else {
	        this._initial[objectOrKey] = value;
	      }

	      return this;
	    }
	  }, {
	    key: 'query',
	    value: function query(_query) {
	      if (_query && !(_query instanceof _query2.Query)) {
	        _query = new _query2.Query((0, _result2.default)(_query, 'toJSON', _query));
	      }

	      this._query = _query;
	      return this;
	    }
	  }, {
	    key: 'process',
	    value: function process() {
	      var entities = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	      var groups = {};
	      var response = [];
	      var aggregation = this.toJSON();
	      var reduce = aggregation.reduce.replace(/function[\s\S]*?\([\s\S]*?\)/, '');
	      aggregation.reduce = new Function(['doc', 'out'], reduce); // eslint-disable-line no-new-func

	      if (this._query) {
	        entities = this._query.process(entities);
	      }

	      (0, _forEach2.default)(entities, function (entity) {
	        var group = {};
	        var entityNames = Object.keys(entity);

	        (0, _forEach2.default)(entityNames, function (name) {
	          group[name] = entity[name];
	        });

	        var key = JSON.stringify(group);
	        if (!groups[key]) {
	          groups[key] = group;
	          var attributes = Object.keys(aggregation.initial);

	          (0, _forEach2.default)(attributes, function (attr) {
	            groups[key][attr] = aggregation.initial[attr];
	          });
	        }

	        aggregation.reduce(entity, groups[key]);
	      });

	      var segments = Object.keys(groups);
	      (0, _forEach2.default)(segments, function (segment) {
	        response.push(groups[segment]);
	      });

	      return response;
	    }
	  }, {
	    key: 'reduce',
	    value: function reduce(fn) {
	      if ((0, _isFunction2.default)(fn)) {
	        fn = fn.toString();
	      }

	      if (!(0, _isString2.default)(fn)) {
	        throw new _errors.KinveyError('fn argument must be of type function or string.');
	      }

	      this._reduce = fn;
	      return this;
	    }
	  }, {
	    key: 'toJSON',
	    value: function toJSON() {
	      var json = {
	        key: this._key,
	        initial: this._initial,
	        reduce: this._reduce,
	        condition: this._query ? this._query.toJSON().filter : {},
	        query: this._query ? this._query.toJSON() : null
	      };

	      return json;
	    }
	  }], [{
	    key: 'count',
	    value: function count() {
	      var field = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

	      var aggregation = new Aggregation();

	      if (field) {
	        aggregation.by(field);
	      }

	      aggregation.initial({ result: 0 });
	      aggregation.reduce(function (doc, out) {
	        out.result += 1;
	        return out;
	      });
	      return aggregation;
	    }
	  }, {
	    key: 'sum',
	    value: function sum() {
	      var field = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

	      field = field.replace('\'', '\\\'');

	      var aggregation = new Aggregation();
	      aggregation.initial({ result: 0 });
	      aggregation.reduce('function(doc, out) { ' + (' out.result += doc["' + field + '"]; ') + '}');
	      return aggregation;
	    }
	  }, {
	    key: 'min',
	    value: function min() {
	      var field = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

	      field = field.replace('\'', '\\\'');

	      var aggregation = new Aggregation();
	      aggregation.initial({ result: Infinity });
	      aggregation.reduce('function(doc, out) { ' + (' out.result = Math.min(out.result, doc["' + field + '"]); ') + '}');
	      return aggregation;
	    }
	  }, {
	    key: 'max',
	    value: function max() {
	      var field = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

	      field = field.replace('\'', '\\\'');

	      var aggregation = new Aggregation();
	      aggregation.initial({ result: -Infinity });
	      aggregation.reduce('function(doc, out) { ' + (' out.result = Math.max(out.result, doc["' + field + '"]); ') + '}');
	      return aggregation;
	    }
	  }, {
	    key: 'average',
	    value: function average() {
	      var field = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

	      field = field.replace('\'', '\\\'');

	      var aggregation = new Aggregation();
	      aggregation.initial({ count: 0, result: 0 });
	      aggregation.reduce('function(doc, out) { ' + (' out.result = (out.result * out.count + doc["' + field + '"]) / (out.count + 1);') + ' out.count += 1;' + '}');
	      return aggregation;
	    }
	  }]);

	  return Aggregation;
	}();

	exports.Aggregation = Aggregation;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Query = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _object = __webpack_require__(15);

	var _sift = __webpack_require__(113);

	var _sift2 = _interopRequireDefault(_sift);

	var _assign = __webpack_require__(114);

	var _assign2 = _interopRequireDefault(_assign);

	var _isArray = __webpack_require__(35);

	var _isArray2 = _interopRequireDefault(_isArray);

	var _isNumber = __webpack_require__(123);

	var _isNumber2 = _interopRequireDefault(_isNumber);

	var _isString = __webpack_require__(36);

	var _isString2 = _interopRequireDefault(_isString);

	var _isObject = __webpack_require__(12);

	var _isObject2 = _interopRequireDefault(_isObject);

	var _isRegExp = __webpack_require__(124);

	var _isRegExp2 = _interopRequireDefault(_isRegExp);

	var _forEach = __webpack_require__(16);

	var _forEach2 = _interopRequireDefault(_forEach);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Query = function () {
	  function Query(options) {
	    _classCallCheck(this, Query);

	    options = (0, _assign2.default)({
	      fields: [],
	      filter: {},
	      sort: {},
	      limit: null,
	      skip: 0
	    }, options);

	    /**
	     * Fields to select.
	     *
	     * @type {Array}
	     */
	    this._fields = options.fields;

	    /**
	     * The MongoDB query.
	     *
	     * @type {Object}
	     */
	    this._filter = options.filter;

	    /**
	     * The sorting order.
	     *
	     * @type {Object}
	     */
	    this._sort = options.sort;

	    /**
	     * Number of documents to select.
	     *
	     * @type {?Number}
	     */
	    this._limit = options.limit;

	    /**
	     * Number of documents to skip from the start.
	     *
	     * @type {Number}
	     */
	    this._skip = options.skip;

	    /**
	     * Maintain reference to the parent query in case the query is part of a
	     * join.
	     *
	     * @type {?PrivateQuery}
	     */
	    this.parent = null;
	  }

	  /**
	   * Adds an equal to filter to the query. Requires `field` to equal `value`.
	   * Any existing filters on `field` will be discarded.
	   * http://docs.mongodb.org/manual/reference/operators/#comparison
	   *
	   * @param   {String}        field     Field.
	   * @param   {*}             value     Value.
	   * @returns {Query}                   The query.
	   */


	  _createClass(Query, [{
	    key: 'equalTo',
	    value: function equalTo(field, value) {
	      this._filter[field] = value;
	      return this;
	    }

	    /**
	     * Adds a contains filter to the query. Requires `field` to contain at least
	     * one of the members of `list`.
	     * http://docs.mongodb.org/manual/reference/operator/in/
	     *
	     * @param   {String}        field     Field.
	     * @param   {Array}         values    List of values.
	     * @throws  {Error}                   `values` must be of type: `Array`.
	     * @returns {Query}                   The query.
	     */

	  }, {
	    key: 'contains',
	    value: function contains(field, values) {
	      if (!(0, _isArray2.default)(values)) {
	        values = [values];
	      }

	      return this.addFilter(field, '$in', values);
	    }

	    /**
	     * Adds a contains all filter to the query. Requires `field` to contain all
	     * members of `list`.
	     * http://docs.mongodb.org/manual/reference/operator/all/
	     *
	     * @param   {String}  field     Field.
	     * @param   {Array}   values    List of values.
	     * @throws  {Error}             `values` must be of type: `Array`.
	     * @returns {Query}             The query.
	     */

	  }, {
	    key: 'containsAll',
	    value: function containsAll(field, values) {
	      if (!(0, _isArray2.default)(values)) {
	        values = [values];
	      }

	      return this.addFilter(field, '$all', values);
	    }

	    /**
	     * Adds a greater than filter to the query. Requires `field` to be greater
	     * than `value`.
	     * http://docs.mongodb.org/manual/reference/operator/gt/
	     *
	     * @param   {String}          field     Field.
	     * @param   {Number|String}   value     Value.
	     * @throws  {Error}                     `value` must be of type: `number` or `string`.
	     * @returns {Query}                     The query.
	     */

	  }, {
	    key: 'greaterThan',
	    value: function greaterThan(field, value) {
	      if (!(0, _isNumber2.default)(value) && !(0, _isString2.default)(value)) {
	        throw new Error('You must supply a number or string.');
	      }

	      return this.addFilter(field, '$gt', value);
	    }
	  }, {
	    key: 'greaterThanOrEqualTo',
	    value: function greaterThanOrEqualTo(field, value) {
	      if (!(0, _isNumber2.default)(value) && !(0, _isString2.default)(value)) {
	        throw new Error('You must supply a number or string.');
	      }

	      return this.addFilter(field, '$gte', value);
	    }
	  }, {
	    key: 'lessThan',
	    value: function lessThan(field, value) {
	      if (!(0, _isNumber2.default)(value) && !(0, _isString2.default)(value)) {
	        throw new Error('You must supply a number or string.');
	      }

	      return this.addFilter(field, '$lt', value);
	    }
	  }, {
	    key: 'lessThanOrEqualTo',
	    value: function lessThanOrEqualTo(field, value) {
	      if (!(0, _isNumber2.default)(value) && !(0, _isString2.default)(value)) {
	        throw new Error('You must supply a number or string.');
	      }

	      return this.addFilter(field, '$lte', value);
	    }
	  }, {
	    key: 'notEqualTo',
	    value: function notEqualTo(field, value) {
	      return this.addFilter(field, '$ne', value);
	    }
	  }, {
	    key: 'notContainedIn',
	    value: function notContainedIn(field, values) {
	      if (!(0, _isArray2.default)(values)) {
	        values = [values];
	      }

	      return this.addFilter(field, '$nin', values);
	    }
	  }, {
	    key: 'and',
	    value: function and() {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      return this.join('$and', Array.prototype.slice.call(args));
	    }
	  }, {
	    key: 'nor',
	    value: function nor() {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      if (this.parent && this.parent.filter.$and) {
	        return this.parent.nor.apply(this.parent, args);
	      }

	      return this.join('$nor', Array.prototype.slice.call(args));
	    }
	  }, {
	    key: 'or',
	    value: function or() {
	      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }

	      if (this.parent) {
	        return this.parent.or.apply(this.parent, args);
	      }

	      return this.join('$or', Array.prototype.slice.call(args));
	    }
	  }, {
	    key: 'exists',
	    value: function exists(field, flag) {
	      flag = typeof flag === 'undefined' ? true : flag || false;
	      return this.addFilter(field, '$exists', flag);
	    }
	  }, {
	    key: 'mod',
	    value: function mod(field, divisor, remainder) {
	      remainder = remainder || 0;

	      if ((0, _isString2.default)(divisor)) {
	        divisor = parseFloat(divisor);
	      }

	      if ((0, _isString2.default)(remainder)) {
	        remainder = parseFloat(remainder);
	      }

	      if (!(0, _isNumber2.default)(divisor)) {
	        throw new Error('Divisor must be a number.');
	      }

	      if (!(0, _isNumber2.default)(remainder)) {
	        throw new Error('Remainder must be a number.');
	      }

	      return this.addFilter(field, '$mod', [divisor, remainder]);
	    }
	  }, {
	    key: 'matches',
	    value: function matches(field, regExp, options) {
	      options = options || {};

	      if (!(0, _isRegExp2.default)(regExp)) {
	        regExp = new RegExp(regExp);
	      }

	      if ((regExp.ignoreCase || options.ignoreCase) && options.ignoreCase !== false) {
	        throw new Error('ignoreCase glag is not supported.');
	      }

	      if (regExp.source.indexOf('^') !== 0) {
	        throw new Error('regExp must have `^` at the beginning of the expression ' + 'to make it an anchored expression.');
	      }

	      var flags = [];

	      if ((regExp.multiline || options.multiline) && options.multiline !== false) {
	        flags.push('m');
	      }

	      if (options.extended) {
	        flags.push('x');
	      }

	      if (options.dotMatchesAll) {
	        flags.push('s');
	      }

	      var result = this.addFilter(field, '$regex', regExp.source);

	      if (flags.length) {
	        this.addFilter(field, '$options', flags.join(''));
	      }

	      return result;
	    }
	  }, {
	    key: 'near',
	    value: function near(field, coord, maxDistance) {
	      if (!(0, _isArray2.default)(coord) || !coord[0] || !coord[1]) {
	        throw new Error('coord argument must be of type: [number, number]');
	      }

	      coord[0] = parseFloat(coord[0]);
	      coord[1] = parseFloat(coord[1]);

	      var result = this.addFilter(field, '$nearSphere', [coord[0], coord[1]]);

	      if (maxDistance) {
	        this.addFilter(field, '$maxDistance', maxDistance);
	      }

	      return result;
	    }
	  }, {
	    key: 'withinBox',
	    value: function withinBox(field, bottomLeftCoord, upperRightCoord) {
	      if (!(0, _isArray2.default)(bottomLeftCoord) || !bottomLeftCoord[0] || !bottomLeftCoord[1]) {
	        throw new Error('bottomLeftCoord argument must be of type: [number, number]');
	      }

	      if (!(0, _isArray2.default)(upperRightCoord) || !upperRightCoord[0] || !upperRightCoord[1]) {
	        throw new Error('upperRightCoord argument must be of type: [number, number]');
	      }

	      bottomLeftCoord[0] = parseFloat(bottomLeftCoord[0]);
	      bottomLeftCoord[1] = parseFloat(bottomLeftCoord[1]);
	      upperRightCoord[0] = parseFloat(upperRightCoord[0]);
	      upperRightCoord[1] = parseFloat(upperRightCoord[1]);

	      var coords = [[bottomLeftCoord[0], bottomLeftCoord[1]], [upperRightCoord[0], upperRightCoord[1]]];
	      return this.addFilter(field, '$within', { $box: coords });
	    }
	  }, {
	    key: 'withinPolygon',
	    value: function withinPolygon(field, coords) {
	      if (!(0, _isArray2.default)(coords) || coords.length > 3) {
	        throw new Error('coords argument must be of type: [[number, number]]');
	      }

	      coords = coords.map(function (coord) {
	        if (!coord[0] || !coord[1]) {
	          throw new Error('coords argument must be of type: [number, number]');
	        }

	        return [parseFloat(coord[0]), parseFloat(coord[1])];
	      });

	      return this.addFilter(field, '$within', { $polygon: coords });
	    }
	  }, {
	    key: 'size',
	    value: function size(field, _size) {
	      if ((0, _isString2.default)(_size)) {
	        _size = parseFloat(_size);
	      }

	      if (!(0, _isNumber2.default)(_size)) {
	        throw new Error('size argument must be a number');
	      }

	      return this.addFilter(field, '$size', _size);
	    }
	  }, {
	    key: 'fields',
	    value: function fields(_fields) {
	      _fields = _fields || [];

	      if (!(0, _isArray2.default)(_fields)) {
	        throw new Error('fields argument must an Array.');
	      }

	      if (this.parent) {
	        this.parent.fields(_fields);
	      } else {
	        this._fields = _fields;
	      }

	      return this;
	    }
	  }, {
	    key: 'limit',
	    value: function limit(_limit) {
	      if ((0, _isString2.default)(_limit)) {
	        _limit = parseFloat(_limit);
	      }

	      if (_limit && !(0, _isNumber2.default)(_limit)) {
	        throw new Error('limit argument must be of type: number.');
	      }

	      if (this._parent) {
	        this.parent.limit(_limit);
	      } else {
	        this._limit = _limit;
	      }

	      return this;
	    }
	  }, {
	    key: 'skip',
	    value: function skip(_skip) {
	      if ((0, _isString2.default)(_skip)) {
	        _skip = parseFloat(_skip);
	      }

	      if (!(0, _isNumber2.default)(_skip)) {
	        throw new Error('skip argument must be of type: number.');
	      }

	      if (this.parent) {
	        this.parent.skip(_skip);
	      } else {
	        this._skip = _skip;
	      }

	      return this;
	    }
	  }, {
	    key: 'ascending',
	    value: function ascending(field) {
	      if (this.parent) {
	        this.parent.ascending(field);
	      } else {
	        this._sort[field] = 1;
	      }

	      return this;
	    }
	  }, {
	    key: 'descending',
	    value: function descending(field) {
	      if (this.parent) {
	        this.parent.descending(field);
	      } else {
	        this._sort[field] = -1;
	      }

	      return this;
	    }
	  }, {
	    key: 'sort',
	    value: function sort(_sort) {
	      if (_sort && !(0, _isObject2.default)(_sort)) {
	        throw new Error('sort argument must be of type: Object.');
	      }

	      if (this.parent) {
	        this.parent.sort(_sort);
	      } else {
	        this._sort = _sort || {};
	      }

	      return this;
	    }

	    /**
	     * Adds a filter to the query.
	     *
	     * @param   {String}          field       Field.
	     * @param   {String}          condition   Condition.
	     * @param   {*}               value       Value.
	     * @returns {PrivateQuery}                The query.
	     */

	  }, {
	    key: 'addFilter',
	    value: function addFilter(field, condition, values) {
	      if (!(0, _isObject2.default)(this._filter[field])) {
	        this._filter[field] = {};
	      }

	      this._filter[field][condition] = values;
	      return this;
	    }

	    /**
	     * Joins the current query with another query using an operator.
	     *
	     * @param   {String}                    operator    Operator.
	     * @param   {PrivateQuery[]|Object[]}   queries     Queries.
	     * @throws  {Error}                                `query` must be of type: `Kinvey.Query[]` or `Object[]`.
	     * @returns {PrivateQuery}                          The query.
	     */

	  }, {
	    key: 'join',
	    value: function join(operator, queries) {
	      var _this2 = this;

	      var _this = this;
	      var currentQuery = {};

	      // Cast, validate, and parse arguments. If `queries` are supplied, obtain
	      // the `filter` for joining. The eventual return function will be the
	      // current query.
	      queries = queries.map(function (query) {
	        if (!(query instanceof Query)) {
	          if ((0, _isObject2.default)(query)) {
	            query = new Query(query);
	          } else {
	            throw new Error('query argument must be of type: Kinvey.Query[] or Object[].');
	          }
	        }

	        return query.toJSON().filter;
	      });

	      // If there are no `queries` supplied, create a new (empty) `Query`.
	      // This query is the right-hand side of the join expression, and will be
	      // returned to allow for a fluent interface.
	      if (queries.length === 0) {
	        _this = new Query();
	        queries = [_this.toJSON().filter];
	        _this.parent = this; // Required for operator precedence and `toJSON`.
	      }

	      // Join operators operate on the top-level of `filter`. Since the `toJSON`
	      // magic requires `filter` to be passed by reference, we cannot simply re-
	      // assign `filter`. Instead, empty it without losing the reference.
	      var members = Object.keys(this._filter);
	      (0, _forEach2.default)(members, function (member) {
	        currentQuery[member] = _this2._filter[member];
	        delete _this2._filter[member];
	      });

	      // `currentQuery` is the left-hand side query. Join with `queries`.
	      this._filter[operator] = [currentQuery].concat(queries);

	      // Return the current query if there are `queries`, and the new (empty)
	      // `PrivateQuery` otherwise.
	      return _this;
	    }

	    /**
	     * Processes the data by applying fields, sort, limit, and skip.
	     *
	     * @param   {Array}   data    The raw data.
	     * @throws  {Error}               `data` must be of type: `Array`.
	     * @returns {Array}               The processed data.
	     */

	  }, {
	    key: '_process',
	    value: function _process(data) {
	      var _this3 = this;

	      if (data) {
	        var _ret = function () {
	          // Validate arguments.
	          if (!(0, _isArray2.default)(data)) {
	            throw new Error('data argument must be of type: Array.');
	          }

	          // Apply the query
	          var json = _this3.toJSON();
	          data = (0, _sift2.default)(json.filter, data);

	          // Remove fields
	          if (json.fields && json.fields.length > 0) {
	            data = data.map(function (item) {
	              var keys = Object.keys(item);
	              (0, _forEach2.default)(keys, function (key) {
	                if (json.fields.indexOf(key) === -1) {
	                  delete item[key];
	                }
	              });

	              return item;
	            });
	          }

	          // Sorting.
	          data = data.sort(function (a, b) {
	            var fields = Object.keys(json.sort);
	            (0, _forEach2.default)(fields, function (field) {
	              // Find field in objects.
	              var aField = (0, _object.nested)(a, field);
	              var bField = (0, _object.nested)(b, field);

	              // Elements which do not contain the field should always be sorted
	              // lower.
	              if (aField && !bField) {
	                return -1;
	              }

	              if (bField && !aField) {
	                return 1;
	              }

	              // Sort on the current field. The modifier adjusts the sorting order
	              // (ascending (-1), or descending(1)). If the fields are equal,
	              // continue sorting based on the next field (if any).
	              if (aField !== bField) {
	                var modifier = json.sort[field]; // 1 or -1.
	                return (aField < bField ? -1 : 1) * modifier;
	              }

	              return 0;
	            });

	            return 0;
	          });

	          // Limit and skip.
	          if (json.limit) {
	            return {
	              v: data.slice(json.skip, json.skip + json.limit)
	            };
	          }

	          return {
	            v: data.slice(json.skip)
	          };
	        }();

	        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	      }

	      return data;
	    }

	    /**
	     * Returns JSON representation of the query.
	     *
	     * @returns {Object} JSON object-literal.
	     */

	  }, {
	    key: 'toJSON',
	    value: function toJSON() {
	      if (this.parent) {
	        return this.parent.toJSON();
	      }

	      // Return set of parameters.
	      var json = {
	        fields: this._fields,
	        filter: this._filter,
	        sort: this._sort,
	        skip: this._skip,
	        limit: this._limit
	      };

	      return json;
	    }
	  }]);

	  return Query;
	}();

	exports.Query = Query;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.nested = nested;
	exports.isDefined = isDefined;
	exports.use = use;

	var _forEach = __webpack_require__(16);

	var _forEach2 = _interopRequireDefault(_forEach);

	var _isFunction = __webpack_require__(11);

	var _isFunction2 = _interopRequireDefault(_isFunction);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @private
	 */
	function nested(obj, dotProperty, value) {
	  if (!dotProperty) {
	    obj = !!value ? value : obj;
	    return obj;
	  }

	  var parts = dotProperty.split('.');
	  var current = parts.shift();
	  while (current && obj) {
	    obj = obj[current];
	    current = parts.shift();
	  }

	  return !!value ? value : obj;
	}

	/**
	 * @private
	 */
	function isDefined(obj) {
	  return obj !== undefined && obj !== null;
	}

	/**
	 * @private
	 */
	function use(nsInterface) {
	  return function () {
	    var _this = this;

	    var adapter = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    (0, _forEach2.default)(nsInterface, function (methodName) {
	      if ((0, _isFunction2.default)(adapter[methodName])) {
	        _this.prototype[methodName] = function () {
	          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	          }

	          return adapter[methodName].apply(this, args);
	        };
	      }
	    });
	  };
	}

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(17),
	    baseEach = __webpack_require__(18),
	    baseIteratee = __webpack_require__(40),
	    isArray = __webpack_require__(35);

	/**
	 * Iterates over elements of `collection` and invokes `iteratee` for each element.
	 * The iteratee is invoked with three arguments: (value, index|key, collection).
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * **Note:** As with other "Collections" methods, objects with a "length"
	 * property are iterated like arrays. To avoid this behavior use `_.forIn`
	 * or `_.forOwn` for object iteration.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @alias each
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 * @example
	 *
	 * _([1, 2]).forEach(function(value) {
	 *   console.log(value);
	 * });
	 * // => Logs `1` then `2`.
	 *
	 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	 */
	function forEach(collection, iteratee) {
	  return (typeof iteratee == 'function' && isArray(collection))
	    ? arrayEach(collection, iteratee)
	    : baseEach(collection, baseIteratee(iteratee));
	}

	module.exports = forEach;


/***/ },
/* 17 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	module.exports = arrayEach;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(19),
	    createBaseEach = __webpack_require__(39);

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(20),
	    keys = __webpack_require__(22);

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(21);

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;


/***/ },
/* 21 */
/***/ function(module, exports) {

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var baseHas = __webpack_require__(23),
	    baseKeys = __webpack_require__(25),
	    indexKeys = __webpack_require__(26),
	    isArrayLike = __webpack_require__(30),
	    isIndex = __webpack_require__(37),
	    isPrototype = __webpack_require__(38);

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  var isProto = isPrototype(object);
	  if (!(isProto || isArrayLike(object))) {
	    return baseKeys(object);
	  }
	  var indexes = indexKeys(object),
	      skipIndexes = !!indexes,
	      result = indexes || [],
	      length = result.length;

	  for (var key in object) {
	    if (baseHas(object, key) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	        !(isProto && key == 'constructor')) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = keys;


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var getPrototype = __webpack_require__(24);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.has` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHas(object, key) {
	  // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
	  // that are composed entirely of index properties, return `false` for
	  // `hasOwnProperty` checks of them.
	  return hasOwnProperty.call(object, key) ||
	    (typeof object == 'object' && key in object && getPrototype(object) === null);
	}

	module.exports = baseHas;


/***/ },
/* 24 */
/***/ function(module, exports) {

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetPrototype = Object.getPrototypeOf;

	/**
	 * Gets the `[[Prototype]]` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {null|Object} Returns the `[[Prototype]]`.
	 */
	function getPrototype(value) {
	  return nativeGetPrototype(Object(value));
	}

	module.exports = getPrototype;


/***/ },
/* 25 */
/***/ function(module, exports) {

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = Object.keys;

	/**
	 * The base implementation of `_.keys` which doesn't skip the constructor
	 * property of prototypes or treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  return nativeKeys(Object(object));
	}

	module.exports = baseKeys;


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(27),
	    isArguments = __webpack_require__(28),
	    isArray = __webpack_require__(35),
	    isLength = __webpack_require__(33),
	    isString = __webpack_require__(36);

	/**
	 * Creates an array of index keys for `object` values of arrays,
	 * `arguments` objects, and strings, otherwise `null` is returned.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array|null} Returns index keys, else `null`.
	 */
	function indexKeys(object) {
	  var length = object ? object.length : undefined;
	  if (isLength(length) &&
	      (isArray(object) || isString(object) || isArguments(object))) {
	    return baseTimes(length, String);
	  }
	  return null;
	}

	module.exports = indexKeys;


/***/ },
/* 27 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	module.exports = baseTimes;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLikeObject = __webpack_require__(29);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	module.exports = isArguments;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(30),
	    isObjectLike = __webpack_require__(34);

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	module.exports = isArrayLikeObject;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var getLength = __webpack_require__(31),
	    isFunction = __webpack_require__(11),
	    isLength = __webpack_require__(33);

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value)) && !isFunction(value);
	}

	module.exports = isArrayLike;


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(32);

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a
	 * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
	 * Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	module.exports = getLength;


/***/ },
/* 32 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = baseProperty;


/***/ },
/* 33 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length,
	 *  else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ },
/* 34 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @type {Function}
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	module.exports = isArray;


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(35),
	    isObjectLike = __webpack_require__(34);

	/** `Object#toString` result references. */
	var stringTag = '[object String]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' ||
	    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
	}

	module.exports = isString;


/***/ },
/* 37 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	module.exports = isIndex;


/***/ },
/* 38 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	module.exports = isPrototype;


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(30);

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(41),
	    baseMatchesProperty = __webpack_require__(98),
	    identity = __webpack_require__(110),
	    isArray = __webpack_require__(35),
	    property = __webpack_require__(111);

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if (typeof value == 'object') {
	    return isArray(value)
	      ? baseMatchesProperty(value[0], value[1])
	      : baseMatches(value);
	  }
	  return property(value);
	}

	module.exports = baseIteratee;


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(42),
	    getMatchData = __webpack_require__(92),
	    matchesStrictComparable = __webpack_require__(97);

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function(object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}

	module.exports = baseMatches;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(43),
	    baseIsEqual = __webpack_require__(76);

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack;
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined
	            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	var stackClear = __webpack_require__(44),
	    stackDelete = __webpack_require__(45),
	    stackGet = __webpack_require__(49),
	    stackHas = __webpack_require__(51),
	    stackSet = __webpack_require__(53);

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function Stack(values) {
	  var index = -1,
	      length = values ? values.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = values[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	module.exports = Stack;


/***/ },
/* 44 */
/***/ function(module, exports) {

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = { 'array': [], 'map': null };
	}

	module.exports = stackClear;


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var assocDelete = __webpack_require__(46);

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      array = data.array;

	  return array ? assocDelete(array, key) : data.map['delete'](key);
	}

	module.exports = stackDelete;


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(47);

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the associative array.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function assocDelete(array, key) {
	  var index = assocIndexOf(array, key);
	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = array.length - 1;
	  if (index == lastIndex) {
	    array.pop();
	  } else {
	    splice.call(array, index, 1);
	  }
	  return true;
	}

	module.exports = assocDelete;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(48);

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	module.exports = assocIndexOf;


/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 * var other = { 'user': 'fred' };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	module.exports = eq;


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var assocGet = __webpack_require__(50);

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  var data = this.__data__,
	      array = data.array;

	  return array ? assocGet(array, key) : data.map.get(key);
	}

	module.exports = stackGet;


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(47);

	/**
	 * Gets the associative array value for `key`.
	 *
	 * @private
	 * @param {Array} array The array to query.
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function assocGet(array, key) {
	  var index = assocIndexOf(array, key);
	  return index < 0 ? undefined : array[index][1];
	}

	module.exports = assocGet;


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var assocHas = __webpack_require__(52);

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  var data = this.__data__,
	      array = data.array;

	  return array ? assocHas(array, key) : data.map.has(key);
	}

	module.exports = stackHas;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(47);

	/**
	 * Checks if an associative array value for `key` exists.
	 *
	 * @private
	 * @param {Array} array The array to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function assocHas(array, key) {
	  return assocIndexOf(array, key) > -1;
	}

	module.exports = assocHas;


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(54),
	    assocSet = __webpack_require__(74);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__,
	      array = data.array;

	  if (array) {
	    if (array.length < (LARGE_ARRAY_SIZE - 1)) {
	      assocSet(array, key, value);
	    } else {
	      data.array = null;
	      data.map = new MapCache(array);
	    }
	  }
	  var map = data.map;
	  if (map) {
	    map.set(key, value);
	  }
	  return this;
	}

	module.exports = stackSet;


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var mapClear = __webpack_require__(55),
	    mapDelete = __webpack_require__(66),
	    mapGet = __webpack_require__(70),
	    mapHas = __webpack_require__(72),
	    mapSet = __webpack_require__(73);

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function MapCache(values) {
	  var index = -1,
	      length = values ? values.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = values[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapClear;
	MapCache.prototype['delete'] = mapDelete;
	MapCache.prototype.get = mapGet;
	MapCache.prototype.has = mapHas;
	MapCache.prototype.set = mapSet;

	module.exports = MapCache;


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var Hash = __webpack_require__(56),
	    Map = __webpack_require__(62);

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': Map ? new Map : [],
	    'string': new Hash
	  };
	}

	module.exports = mapClear;


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(57);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @returns {Object} Returns the new hash object.
	 */
	function Hash() {}

	// Avoid inheriting from `Object.prototype` when possible.
	Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

	module.exports = Hash;


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(58);

	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');

	module.exports = nativeCreate;


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	var isNative = __webpack_require__(59);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object[key];
	  return isNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(11),
	    isHostObject = __webpack_require__(60),
	    isObject = __webpack_require__(12),
	    toSource = __webpack_require__(61);

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	module.exports = isNative;


/***/ },
/* 60 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	module.exports = isHostObject;


/***/ },
/* 61 */
/***/ function(module, exports) {

	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	module.exports = toSource;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(58),
	    root = __webpack_require__(63);

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');

	module.exports = Map;


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module, global) {var checkGlobal = __webpack_require__(65);

	/** Used to determine if values are of the language type `Object`. */
	var objectTypes = {
	  'function': true,
	  'object': true
	};

	/** Detect free variable `exports`. */
	var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
	  ? exports
	  : undefined;

	/** Detect free variable `module`. */
	var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
	  ? module
	  : undefined;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

	/** Detect free variable `self`. */
	var freeSelf = checkGlobal(objectTypes[typeof self] && self);

	/** Detect free variable `window`. */
	var freeWindow = checkGlobal(objectTypes[typeof window] && window);

	/** Detect `this` as the global object. */
	var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

	/**
	 * Used as a reference to the global object.
	 *
	 * The `this` value is used if it's the global object to avoid Greasemonkey's
	 * restricted `window` object, otherwise the `window` object is used.
	 */
	var root = freeGlobal ||
	  ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
	    freeSelf || thisGlobal || Function('return this')();

	module.exports = root;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(64)(module), (function() { return this; }())))

/***/ },
/* 64 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 65 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is a global object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	 */
	function checkGlobal(value) {
	  return (value && value.Object === Object) ? value : null;
	}

	module.exports = checkGlobal;


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	var Map = __webpack_require__(62),
	    assocDelete = __webpack_require__(46),
	    hashDelete = __webpack_require__(67),
	    isKeyable = __webpack_require__(69);

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapDelete(key) {
	  var data = this.__data__;
	  if (isKeyable(key)) {
	    return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
	  }
	  return Map ? data.map['delete'](key) : assocDelete(data.map, key);
	}

	module.exports = mapDelete;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	var hashHas = __webpack_require__(68);

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(hash, key) {
	  return hashHas(hash, key) && delete hash[key];
	}

	module.exports = hashDelete;


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(57);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @param {Object} hash The hash to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(hash, key) {
	  return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
	}

	module.exports = hashHas;


/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return type == 'number' || type == 'boolean' ||
	    (type == 'string' && value != '__proto__') || value == null;
	}

	module.exports = isKeyable;


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	var Map = __webpack_require__(62),
	    assocGet = __webpack_require__(50),
	    hashGet = __webpack_require__(71),
	    isKeyable = __webpack_require__(69);

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapGet(key) {
	  var data = this.__data__;
	  if (isKeyable(key)) {
	    return hashGet(typeof key == 'string' ? data.string : data.hash, key);
	  }
	  return Map ? data.map.get(key) : assocGet(data.map, key);
	}

	module.exports = mapGet;


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(57);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @param {Object} hash The hash to query.
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(hash, key) {
	  if (nativeCreate) {
	    var result = hash[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
	}

	module.exports = hashGet;


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var Map = __webpack_require__(62),
	    assocHas = __webpack_require__(52),
	    hashHas = __webpack_require__(68),
	    isKeyable = __webpack_require__(69);

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapHas(key) {
	  var data = this.__data__;
	  if (isKeyable(key)) {
	    return hashHas(typeof key == 'string' ? data.string : data.hash, key);
	  }
	  return Map ? data.map.has(key) : assocHas(data.map, key);
	}

	module.exports = mapHas;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var Map = __webpack_require__(62),
	    assocSet = __webpack_require__(74),
	    hashSet = __webpack_require__(75),
	    isKeyable = __webpack_require__(69);

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapSet(key, value) {
	  var data = this.__data__;
	  if (isKeyable(key)) {
	    hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
	  } else if (Map) {
	    data.map.set(key, value);
	  } else {
	    assocSet(data.map, key, value);
	  }
	  return this;
	}

	module.exports = mapSet;


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(47);

	/**
	 * Sets the associative array `key` to `value`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 */
	function assocSet(array, key, value) {
	  var index = assocIndexOf(array, key);
	  if (index < 0) {
	    array.push([key, value]);
	  } else {
	    array[index][1] = value;
	  }
	}

	module.exports = assocSet;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(57);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 */
	function hashSet(hash, key, value) {
	  hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	}

	module.exports = hashSet;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(77),
	    isObject = __webpack_require__(12),
	    isObjectLike = __webpack_require__(34);

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {boolean} [bitmask] The bitmask of comparison flags.
	 *  The bitmask may be composed of the following flags:
	 *     1 - Unordered comparison
	 *     2 - Partial comparison
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, bitmask, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	}

	module.exports = baseIsEqual;


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(43),
	    equalArrays = __webpack_require__(78),
	    equalByTag = __webpack_require__(80),
	    equalObjects = __webpack_require__(85),
	    getTag = __webpack_require__(86),
	    isArray = __webpack_require__(35),
	    isHostObject = __webpack_require__(60),
	    isTypedArray = __webpack_require__(91);

	/** Used to compose bitmasks for comparison styles. */
	var PARTIAL_COMPARE_FLAG = 2;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;

	  if (!objIsArr) {
	    objTag = getTag(object);
	    objTag = objTag == argsTag ? objectTag : objTag;
	  }
	  if (!othIsArr) {
	    othTag = getTag(other);
	    othTag = othTag == argsTag ? objectTag : othTag;
	  }
	  var objIsObj = objTag == objectTag && !isHostObject(object),
	      othIsObj = othTag == objectTag && !isHostObject(other),
	      isSameTag = objTag == othTag;

	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack);
	    return (objIsArr || isTypedArray(object))
	      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
	      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
	  }
	  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
	}

	module.exports = baseIsEqualDeep;


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	var arraySome = __webpack_require__(79);

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	  var index = -1,
	      isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	      isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(array, other);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (isUnordered) {
	      if (!arraySome(other, function(othValue) {
	            return arrValue === othValue ||
	              equalFunc(arrValue, othValue, customizer, bitmask, stack);
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, customizer, bitmask, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  return result;
	}

	module.exports = equalArrays;


/***/ },
/* 79 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(81),
	    Uint8Array = __webpack_require__(82),
	    equalArrays = __webpack_require__(78),
	    mapToArray = __webpack_require__(83),
	    setToArray = __webpack_require__(84);

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	      // Coerce dates and booleans to numbers, dates to milliseconds and
	      // booleans to `1` or `0` treating invalid dates coerced to `NaN` as
	      // not equal.
	      return +object == +other;

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case numberTag:
	      // Treat `NaN` vs. `NaN` as equal.
	      return (object != +object) ? other != +other : object == +other;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag:
	      var convert = mapToArray;

	    case setTag:
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	      convert || (convert = setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= UNORDERED_COMPARE_FLAG;
	      stack.set(object, other);

	      // Recursively compare objects (susceptible to call stack limits).
	      return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	module.exports = equalByTag;


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(63);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(63);

	/** Built-in value references. */
	var Uint8Array = root.Uint8Array;

	module.exports = Uint8Array;


/***/ },
/* 83 */
/***/ function(module, exports) {

	/**
	 * Converts `map` to an array.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	module.exports = mapToArray;


/***/ },
/* 84 */
/***/ function(module, exports) {

	/**
	 * Converts `set` to an array.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	module.exports = setToArray;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var baseHas = __webpack_require__(23),
	    keys = __webpack_require__(22);

	/** Used to compose bitmasks for comparison styles. */
	var PARTIAL_COMPARE_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	      objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : baseHas(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  return result;
	}

	module.exports = equalObjects;


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var DataView = __webpack_require__(87),
	    Map = __webpack_require__(62),
	    Promise = __webpack_require__(88),
	    Set = __webpack_require__(89),
	    WeakMap = __webpack_require__(90),
	    toSource = __webpack_require__(61);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag = '[object Set]',
	    weakMapTag = '[object WeakMap]';

	var dataViewTag = '[object DataView]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function getTag(value) {
	  return objectToString.call(value);
	}

	// Fallback for data views, maps, sets, and weak maps in IE 11,
	// for data views in Edge, and promises in Node.js.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : undefined;

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	module.exports = getTag;


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(58),
	    root = __webpack_require__(63);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView');

	module.exports = DataView;


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(58),
	    root = __webpack_require__(63);

	/* Built-in method references that are verified to be native. */
	var Promise = getNative(root, 'Promise');

	module.exports = Promise;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(58),
	    root = __webpack_require__(63);

	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');

	module.exports = Set;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(58),
	    root = __webpack_require__(63);

	/* Built-in method references that are verified to be native. */
	var WeakMap = getNative(root, 'WeakMap');

	module.exports = WeakMap;


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var isLength = __webpack_require__(33),
	    isObjectLike = __webpack_require__(34);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	function isTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	}

	module.exports = isTypedArray;


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(93),
	    toPairs = __webpack_require__(94);

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = toPairs(object),
	      length = result.length;

	  while (length--) {
	    result[length][2] = isStrictComparable(result[length][1]);
	  }
	  return result;
	}

	module.exports = getMatchData;


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(12);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	var baseToPairs = __webpack_require__(95),
	    keys = __webpack_require__(22);

	/**
	 * Creates an array of own enumerable string keyed-value pairs for `object`
	 * which can be consumed by `_.fromPairs`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @alias entries
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the new array of key-value pairs.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.toPairs(new Foo);
	 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	 */
	function toPairs(object) {
	  return baseToPairs(object, keys(object));
	}

	module.exports = toPairs;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(96);

	/**
	 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	 * of key-value pairs for `object` corresponding to the property names of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the new array of key-value pairs.
	 */
	function baseToPairs(object, props) {
	  return arrayMap(props, function(key) {
	    return [key, object[key]];
	  });
	}

	module.exports = baseToPairs;


/***/ },
/* 96 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	module.exports = arrayMap;


/***/ },
/* 97 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue &&
	      (srcValue !== undefined || (key in Object(object)));
	  };
	}

	module.exports = matchesStrictComparable;


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(76),
	    get = __webpack_require__(99),
	    hasIn = __webpack_require__(107),
	    isKey = __webpack_require__(106),
	    isStrictComparable = __webpack_require__(93),
	    matchesStrictComparable = __webpack_require__(97);

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (isKey(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(path, srcValue);
	  }
	  return function(object) {
	    var objValue = get(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn(object, path)
	      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	  };
	}

	module.exports = baseMatchesProperty;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(100);

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is used in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	module.exports = get;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(101),
	    isKey = __webpack_require__(106);

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = isKey(path, object) ? [path] : castPath(path);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[path[index++]];
	  }
	  return (index && index == length) ? object : undefined;
	}

	module.exports = baseGet;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(35),
	    stringToPath = __webpack_require__(102);

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value) {
	  return isArray(value) ? value : stringToPath(value);
	}

	module.exports = castPath;


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	var memoize = __webpack_require__(103),
	    toString = __webpack_require__(104);

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoize(function(string) {
	  var result = [];
	  toString(string).replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	module.exports = stringToPath;


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(54);

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoizing function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result);
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}

	// Assign cache to `_.memoize`.
	memoize.Cache = MapCache;

	module.exports = memoize;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(81),
	    isSymbol = __webpack_require__(105);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (value == null) {
	    return '';
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	module.exports = toString;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(34);

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	module.exports = isSymbol;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(35),
	    isSymbol = __webpack_require__(105);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol') {
	    return true;
	  }
	  return !isArray(value) &&
	    (isSymbol(value) || reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	      (object != null && value in Object(object)));
	}

	module.exports = isKey;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	var baseHasIn = __webpack_require__(108),
	    hasPath = __webpack_require__(109);

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}

	module.exports = hasIn;


/***/ },
/* 108 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return key in Object(object);
	}

	module.exports = baseHasIn;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(101),
	    isArguments = __webpack_require__(28),
	    isArray = __webpack_require__(35),
	    isIndex = __webpack_require__(37),
	    isKey = __webpack_require__(106),
	    isLength = __webpack_require__(33),
	    isString = __webpack_require__(36);

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = isKey(path, object) ? [path] : castPath(path);

	  var result,
	      index = -1,
	      length = path.length;

	  while (++index < length) {
	    var key = path[index];
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result) {
	    return result;
	  }
	  var length = object ? object.length : 0;
	  return !!length && isLength(length) && isIndex(key, length) &&
	    (isArray(object) || isString(object) || isArguments(object));
	}

	module.exports = hasPath;


/***/ },
/* 110 */
/***/ function(module, exports) {

	/**
	 * This method returns the first argument given to it.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(32),
	    basePropertyDeep = __webpack_require__(112),
	    isKey = __webpack_require__(106);

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	}

	module.exports = property;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(100);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function basePropertyDeep(path) {
	  return function(object) {
	    return baseGet(object, path);
	  };
	}

	module.exports = basePropertyDeep;


/***/ },
/* 113 */
/***/ function(module, exports) {

	/*
	 * Sift 3.x
	 *
	 * Copryright 2015, Craig Condon
	 * Licensed under MIT
	 *
	 * Filter JavaScript objects with mongodb queries
	 */

	(function() {

	  'use strict';

	  /**
	   */

	  function isFunction(value) {
	    return typeof value === 'function';
	  }

	  /**
	   */

	  function isArray(value) {
	    return Object.prototype.toString.call(value) === '[object Array]';
	  }

	  /**
	   */

	  function comparable(value) {
	    if (value instanceof Date) {
	      return value.getTime();
	    } else if (value instanceof Array) {
	      return value.map(comparable);
	    } else {
	      return value;
	    }
	  }

	  function get(obj, key) {
	    if (obj.get) return obj.get(key);
	    return obj[key];
	  }

	  /**
	   */

	  function or(validator) {
	    return function(a, b) {
	      if (!isArray(b) || !b.length) return validator(a, b);
	      for (var i = 0, n = b.length; i < n; i++) if (validator(a, get(b,i))) return true;
	      return false;
	    }
	  }

	  /**
	   */

	  function and(validator) {
	    return function(a, b) {
	      if (!isArray(b) || !b.length) return validator(a, b);
	      for (var i = 0, n = b.length; i < n; i++) if (!validator(a, get(b, i))) return false;
	      return true;
	    };
	  }

	  function validate(validator, b) {
	    return validator.v(validator.a, b);
	  }


	  var operator = {

	    /**
	     */

	    $eq: or(function(a, b) {
	      return a(b);
	    }),

	    /**
	     */

	    $ne: and(function(a, b) {
	      return !a(b);
	    }),

	    /**
	     */

	    $or: function(a, b) {
	      for (var i = 0, n = a.length; i < n; i++) if (validate(get(a, i), b)) return true;
	      return false;
	    },

	    /**
	     */

	    $gt: or(function(a, b) {
	      return sift.compare(comparable(b), a) > 0;
	    }),

	    /**
	     */

	    $gte: or(function(a, b) {
	      return sift.compare(comparable(b), a) >= 0;
	    }),

	    /**
	     */

	    $lt: or(function(a, b) {
	      return sift.compare(comparable(b), a) < 0;
	    }),

	    /**
	     */

	    $lte: or(function(a, b) {
	      return sift.compare(comparable(b), a) <= 0;
	    }),

	    /**
	     */

	    $mod: or(function(a, b) {
	      return b % a[0] == a[1];
	    }),

	    /**
	     */

	    $in: function(a, b) {

	      if (b instanceof Array) {
	        for (var i = b.length; i--;) {
	          if (~a.indexOf(comparable(get(b, i)))) return true;
	        }
	      } else {
	        return !!~a.indexOf(comparable(b));
	      }

	      return false;
	    },

	    /**
	     */

	    $nin: function(a, b) {
	      return !operator.$in(a, b);
	    },

	    /**
	     */

	    $not: function(a, b) {
	      return !validate(a, b);
	    },

	    /**
	     */

	    $type: function(a, b) {
	      return b != void 0 ? b instanceof a || b.constructor == a : false;
	     },

	    /**
	     */

	    $all: function(a, b) {
	      if (!b) b = [];
	      for (var i = a.length; i--;) {
	        if (!~comparable(b).indexOf(get(a, i))) return false;
	      }
	      return true;
	    },

	    /**
	     */

	    $size: function(a, b) {
	      return b ? a === b.length : false;
	    },

	    /**
	     */

	    $nor: function(a, b) {
	      // todo - this suffice? return !operator.$in(a)
	      for (var i = 0, n = a.length; i < n; i++) if (validate(get(a, i), b)) return false;
	      return true;
	    },

	    /**
	     */

	    $and: function(a, b) {
	      for (var i = 0, n = a.length; i < n; i++) if (!validate(get(a, i), b)) return false;
	      return true;
	    },

	    /**
	     */

	    $regex: or(function(a, b) {
	      return typeof b === 'string' && a.test(b);
	    }),

	    /**
	     */

	    $where: function(a, b) {
	      return a.call(b, b);
	    },

	    /**
	     */

	    $elemMatch: function(a, b) {
	      if (isArray(b)) return !!~search(b, a);
	      return validate(a, b);
	    },

	    /**
	     */

	    $exists: function(a, b) {
	      return (b != void 0) === a;
	    }
	  };

	  /**
	   */

	  var prepare = {

	    /**
	     */

	    $eq: function(a) {

	      if (a instanceof RegExp) {
	        return function(b) {
	          return typeof b === 'string' && a.test(b);
	        };
	      } else if (a instanceof Function) {
	        return a;
	      } else if (isArray(a) && !a.length) {
	        // Special case of a == []
	        return function(b) {
	          return (isArray(b) && !b.length);
	        };
	      } else if (a === null){
	        return function(b){
	          //will match both null and undefined
	          return b == null;
	        }
	      }

	      return function(b) {
	        return sift.compare(comparable(b), a) === 0;
	      };
	    },

	    /**
	     */

	    $ne: function(a) {
	      return prepare.$eq(a);
	    },

	    /**
	     */

	    $and: function(a) {
	      return a.map(parse);
	    },

	    /**
	     */

	    $or: function(a) {
	      return a.map(parse);
	    },

	    /**
	     */

	    $nor: function(a) {
	      return a.map(parse);
	    },

	    /**
	     */

	    $not: function(a) {
	      return parse(a);
	    },

	    /**
	     */

	    $regex: function(a, query) {
	      return new RegExp(a, query.$options);
	    },

	    /**
	     */

	    $where: function(a) {
	      return typeof a === 'string' ? new Function('obj', 'return ' + a) : a;
	    },

	    /**
	     */

	    $elemMatch: function(a) {
	      return parse(a);
	    },

	    /**
	     */

	    $exists: function(a) {
	      return !!a;
	    }
	  };

	  /**
	   */

	  function search(array, validator) {

	    for (var i = 0; i < array.length; i++) {
	      if (validate(validator, get(array, i))) {
	        return i;
	      }
	    }

	    return -1;
	  }

	  /**
	   */

	  function createValidator(a, validate) {
	    return { a: a, v: validate };
	  }

	  /**
	   */

	  function nestedValidator(a, b) {
	    var values  = [];
	    findValues(b, a.k, 0, values);

	    if (values.length === 1) {
	      return validate(a.nv, values[0]);
	    }

	    return !!~search(values, a.nv);
	  }

	  /**
	   */

	  function findValues(current, keypath, index, values) {

	    if (index === keypath.length || current == void 0) {
	      values.push(current);
	      return;
	    }

	    var k = get(keypath, index);

	    // ensure that if current is an array, that the current key
	    // is NOT an array index. This sort of thing needs to work:
	    // sift({'foo.0':42}, [{foo: [42]}]);
	    if (isArray(current) && isNaN(Number(k))) {
	      for (var i = 0, n = current.length; i < n; i++) {
	        findValues(get(current, i), keypath, index, values);
	      }
	    } else {
	      findValues(get(current, k), keypath, index + 1, values);
	    }
	  }

	  /**
	   */

	  function createNestedValidator(keypath, a) {
	    return { a: { k: keypath, nv: a }, v: nestedValidator };
	  }

	  /**
	   * flatten the query
	   */

	  function parse(query) {
	    query = comparable(query);

	    if (!query || (query.constructor.toString() !== 'Object' &&
	        query.constructor.toString().replace(/\n/g,'').replace(/ /g, '') !== 'functionObject(){[nativecode]}')) { // cross browser support
	      query = { $eq: query };
	    }

	    var validators = [];

	    for (var key in query) {
	      var a = query[key];

	      if (key === '$options') continue;

	      if (operator[key]) {
	        if (prepare[key]) a = prepare[key](a, query);
	        validators.push(createValidator(comparable(a), operator[key]));
	      } else {

	        if (key.charCodeAt(0) === 36) {
	          throw new Error('Unknown operation ' + key);
	        }

	        validators.push(createNestedValidator(key.split('.'), parse(a)));
	      }
	    }

	    return validators.length === 1 ? validators[0] : createValidator(validators, operator.$and);
	  }

	  /**
	   */

	  function createRootValidator(query, getter) {
	    var validator = parse(query);
	    if (getter) {
	      validator = {
	        a: validator,
	        v: function(a, b) {
	          return validate(a, getter(b));
	        }
	      };
	    }
	    return validator;
	  }

	  /**
	   */

	  function sift(query, array, getter) {

	    if (isFunction(array)) {
	      getter = array;
	      array  = void 0;
	    }

	    var validator = createRootValidator(query, getter);

	    function filter(b) {
	      return validate(validator, b);
	    }

	    if (array) {
	      return array.filter(filter);
	    }

	    return filter;
	  }

	  /**
	   */

	  sift.use = function(plugin) {
	    if (isFunction(plugin)) return plugin(sift);
	    for (var key in plugin) {
	      if (key.charCodeAt(0) === 36) operator[key] = plugin[key];
	    }
	  };

	  /**
	   */

	  sift.indexOf = function(query, array, getter) {
	    return search(array, createRootValidator(query, getter));
	  };

	  /**
	   */

	  sift.compare = function(a, b) {
	    if(a===b) return 0;
	    if(typeof a === typeof b) {
	      if (a > b) return 1;
	      if (a < b) return -1;
	    }
	  };

	  /* istanbul ignore next */
	  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
	    module.exports = sift;
	  }

	  if (typeof window !== 'undefined') {
	    window.sift = sift;
	  }
	})();


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(115),
	    copyObject = __webpack_require__(116),
	    createAssigner = __webpack_require__(117),
	    isArrayLike = __webpack_require__(30),
	    isPrototype = __webpack_require__(38),
	    keys = __webpack_require__(22);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
	var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

	/**
	 * Assigns own enumerable string keyed properties of source objects to the
	 * destination object. Source objects are applied from left to right.
	 * Subsequent sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object` and is loosely based on
	 * [`Object.assign`](https://mdn.io/Object/assign).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.10.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * function Foo() {
	 *   this.c = 3;
	 * }
	 *
	 * function Bar() {
	 *   this.e = 5;
	 * }
	 *
	 * Foo.prototype.d = 4;
	 * Bar.prototype.f = 6;
	 *
	 * _.assign({ 'a': 1 }, new Foo, new Bar);
	 * // => { 'a': 1, 'c': 3, 'e': 5 }
	 */
	var assign = createAssigner(function(object, source) {
	  if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
	    copyObject(source, keys(source), object);
	    return;
	  }
	  for (var key in source) {
	    if (hasOwnProperty.call(source, key)) {
	      assignValue(object, key, source[key]);
	    }
	  }
	});

	module.exports = assign;


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(48);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}

	module.exports = assignValue;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(115);

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : source[key];

	    assignValue(object, key, newValue);
	  }
	  return object;
	}

	module.exports = copyObject;


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	var isIterateeCall = __webpack_require__(118),
	    rest = __webpack_require__(119);

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return rest(function(object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;

	    customizer = typeof customizer == 'function'
	      ? (length--, customizer)
	      : undefined;

	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}

	module.exports = createAssigner;


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(48),
	    isArrayLike = __webpack_require__(30),
	    isIndex = __webpack_require__(37),
	    isObject = __webpack_require__(12);

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}

	module.exports = isIterateeCall;


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(120),
	    toInteger = __webpack_require__(121);

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as
	 * an array.
	 *
	 * **Note:** This method is based on the
	 * [rest parameter](https://mdn.io/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.rest(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function rest(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    switch (start) {
	      case 0: return func.call(this, array);
	      case 1: return func.call(this, args[0], array);
	      case 2: return func.call(this, args[0], args[1], array);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = array;
	    return apply(func, this, otherArgs);
	  };
	}

	module.exports = rest;


/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  var length = args.length;
	  switch (length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	module.exports = apply;


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	var toNumber = __webpack_require__(122);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_INTEGER = 1.7976931348623157e+308;

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This function is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3');
	 * // => 3
	 */
	function toInteger(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = (value < 0 ? -1 : 1);
	    return sign * MAX_INTEGER;
	  }
	  var remainder = value % 1;
	  return value === value ? (remainder ? value - remainder : value) : 0;
	}

	module.exports = toInteger;


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(11),
	    isObject = __webpack_require__(12),
	    isSymbol = __webpack_require__(105);

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3);
	 * // => 3
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3');
	 * // => 3
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = isFunction(value.valueOf) ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	module.exports = toNumber;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(34);

	/** `Object#toString` result references. */
	var numberTag = '[object Number]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Number` primitive or object.
	 *
	 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	 * classified as numbers, use the `_.isFinite` method.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isNumber(3);
	 * // => true
	 *
	 * _.isNumber(Number.MIN_VALUE);
	 * // => true
	 *
	 * _.isNumber(Infinity);
	 * // => true
	 *
	 * _.isNumber('3');
	 * // => false
	 */
	function isNumber(value) {
	  return typeof value == 'number' ||
	    (isObjectLike(value) && objectToString.call(value) == numberTag);
	}

	module.exports = isNumber;


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(12);

	/** `Object#toString` result references. */
	var regexpTag = '[object RegExp]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `RegExp` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isRegExp(/abc/);
	 * // => true
	 *
	 * _.isRegExp('/abc/');
	 * // => false
	 */
	function isRegExp(value) {
	  return isObject(value) && objectToString.call(value) == regexpTag;
	}

	module.exports = isRegExp;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(101),
	    isFunction = __webpack_require__(11),
	    isKey = __webpack_require__(106);

	/**
	 * This method is like `_.get` except that if the resolved value is a
	 * function it's invoked with the `this` binding of its parent object and
	 * its result is returned.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to resolve.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	 *
	 * _.result(object, 'a[0].b.c1');
	 * // => 3
	 *
	 * _.result(object, 'a[0].b.c2');
	 * // => 4
	 *
	 * _.result(object, 'a[0].b.c3', 'default');
	 * // => 'default'
	 *
	 * _.result(object, 'a[0].b.c3', _.constant('default'));
	 * // => 'default'
	 */
	function result(object, path, defaultValue) {
	  path = isKey(path, object) ? [path] : castPath(path);

	  var index = -1,
	      length = path.length;

	  // Ensure the loop is entered when path is empty.
	  if (!length) {
	    object = undefined;
	    length = 1;
	  }
	  while (++index < length) {
	    var value = object == null ? undefined : object[path[index]];
	    if (value === undefined) {
	      index = length;
	      value = defaultValue;
	    }
	    object = isFunction(value) ? value.call(object) : value;
	  }
	  return object;
	}

	module.exports = result;


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Client = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _errors = __webpack_require__(7);

	var _sync = __webpack_require__(127);

	var _localStorage = __webpack_require__(238);

	var _localStorage2 = _interopRequireDefault(_localStorage);

	var _url = __webpack_require__(214);

	var _url2 = _interopRequireDefault(_url);

	var _assign = __webpack_require__(114);

	var _assign2 = _interopRequireDefault(_assign);

	var _isString = __webpack_require__(36);

	var _isString2 = _interopRequireDefault(_isString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var userCollectionName = process.env.KINVEY_USER_COLLECTION_NAME || 'kinvey_user';
	var socialIdentityCollectionName = process.env.KINVEY_SOCIAL_IDENTITY_COLLECTION_NAME || 'kinvey_socialIdentity';
	var pushCollectionName = process.env.KINVEY_PUSH_COLLECTION_NAME || 'kinvey_push';
	var _sharedInstance = null;

	/**
	 * The Client class stores information regarding your application. You can create mutiple clients
	 * to send requests to different environments on the Kinvey platform.
	 *
	 * @example
	 * var client = new Kinvey.Client({
	 *   appKey: '<appKey>',
	 *   appSecret: '<appSecret>'
	 * });
	 */

	var Client = exports.Client = function () {
	  /**
	   * Creates a new instance of the Client class. An `options.appKey` must be provided along with
	   * either and `options.appSecret` or `options.masterSecret`.
	   *
	   * @param {Object}    options                             Options
	   * @param {string}    [options.protocol='https']          Protocl used for requests
	   * @param {string}    [options.host='baas.kinvey.com']    Host used for requests
	   * @param {string}    options.appKey                      App Key
	   * @param {string}    [options.appSecret]                 App Secret
	   * @param {string}    [options.masterSecret]              App Master Secret
	   * @param {string}    [options.encryptionKey]             App Encryption Key
	   *
	   * @throws {KinveyError}  If an `options.appKey` is not provided.
	   * @throws {KinveyError}  If neither an `options.appSecret` or `options.masterSecret` is provided.
	   */

	  function Client() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, Client);

	    options = (0, _assign2.default)({
	      protocol: process.env.KINVEY_API_PROTOCOL || 'https:',
	      host: process.env.KINVEY_API_HOST || 'baas.kinvey.com'
	    }, options);

	    if (options.hostname && (0, _isString2.default)(options.hostname)) {
	      var hostnameParsed = _url2.default.parse(options.hostname);
	      options.protocol = hostnameParsed.protocol;
	      options.host = hostnameParsed.host;
	    }

	    /**
	     * @type {string}
	     */
	    this.protocol = options.protocol;

	    /**
	     * @type {string}
	     */
	    this.host = options.host;

	    /**
	     * @type {string}
	     */
	    this.appKey = options.appKey || options.appId;

	    /**
	     * @type {string|undefined}
	     */
	    this.appSecret = options.appSecret;

	    /**
	     * @type {string|undefined}
	     */
	    this.masterSecret = options.masterSecret;

	    /**
	     * @type {string|undefined}
	     */
	    this.encryptionKey = options.encryptionKey;

	    /**
	     * @type {SyncManager}
	     */
	    this.syncManager = new _sync.SyncManager();
	    this.syncManager.client = this;
	  }

	  _createClass(Client, [{
	    key: 'toJSON',


	    /**
	     * Returns an object containing all the information for this Client.
	     *
	     * @return {Object} JSON
	     */
	    value: function toJSON() {
	      var json = {
	        protocol: this.protocol,
	        host: this.host,
	        appKey: this.appKey,
	        appSecret: this.appSecret,
	        masterSecret: this.masterSecret,
	        encryptionKey: this.encryptionKey
	      };

	      return json;
	    }

	    /**
	     * Initializes the library by creating a new instance of the
	     * Client class and storing it as a shared instance.
	     *
	     * @param {Object}    options                             Options
	     * @param {string}    [options.protocol='https']          Protocl used for requests
	     * @param {string}    [options.host='baas.kinvey.com']    Host used for requests
	     * @param {string}    options.appKey                      App Key
	     * @param {string}    [options.appSecret]                 App Secret
	     * @param {string}    [options.masterSecret]              App Master Secret
	     * @param {string}    [options.encryptionKey]             App Encryption Key
	     *
	     * @throws {KinveyError}  If an `options.appKey` is not provided.
	     * @throws {KinveyError}  If neither an `options.appSecret` or `options.masterSecret` is provided.
	     *
	     * @return {Client}  An instance of Client.
	     *
	     * @example
	     * var client = Kinvey.Client.init({
	     *   appKey: '<appKey>',
	     *   appSecret: '<appSecret>'
	     * });
	     */

	  }, {
	    key: 'baseUrl',
	    get: function get() {
	      return _url2.default.format({
	        protocol: this.protocol,
	        host: this.host
	      });
	    }
	  }, {
	    key: 'user',
	    get: function get() {
	      return _localStorage2.default.get('' + this.appKey + userCollectionName);
	    },
	    set: function set(data) {
	      if (data) {
	        try {
	          return _localStorage2.default.set('' + this.appKey + userCollectionName, data);
	        } catch (error) {
	          return false;
	        }
	      }

	      return _localStorage2.default.remove('' + this.appKey + userCollectionName);
	    }
	  }, {
	    key: 'socialIdentity',
	    get: function get() {
	      return _localStorage2.default.get('' + this.appKey + socialIdentityCollectionName);
	    },
	    set: function set(socialIdentity) {
	      if (socialIdentity) {
	        try {
	          return _localStorage2.default.set('' + this.appKey + socialIdentityCollectionName, socialIdentity);
	        } catch (error) {
	          return false;
	        }
	      }

	      return _localStorage2.default.remove('' + this.appKey + socialIdentityCollectionName);
	    }
	  }, {
	    key: 'push',
	    get: function get() {
	      return _localStorage2.default.get('' + this.appKey + pushCollectionName);
	    },
	    set: function set(data) {
	      if (data) {
	        try {
	          return _localStorage2.default.set('' + this.appKey + pushCollectionName, data);
	        } catch (error) {
	          return false;
	        }
	      }

	      return _localStorage2.default.remove('' + this.appKey + pushCollectionName);
	    }
	  }], [{
	    key: 'init',
	    value: function init(options) {
	      var client = new Client(options);
	      _sharedInstance = client;
	      return client;
	    }

	    /**
	     * Returns the shared client instance used by the library.
	     *
	     * @throws {KinveyError} If `Kinvey.init()` has not been called.
	     *
	     * @return {Client} The shared instance.
	     */

	  }, {
	    key: 'sharedInstance',
	    value: function sharedInstance() {
	      if (!_sharedInstance) {
	        throw new _errors.KinveyError('You have not initialized the library. ' + 'Please call Kinvey.init() to initialize the library.');
	      }

	      return _sharedInstance;
	    }
	  }]);

	  return Client;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SyncManager = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _enums = __webpack_require__(128);

	var _errors = __webpack_require__(7);

	var _metadata = __webpack_require__(129);

	var _local = __webpack_require__(131);

	var _network = __webpack_require__(226);

	var _url = __webpack_require__(214);

	var _url2 = _interopRequireDefault(_url);

	var _map = __webpack_require__(197);

	var _map2 = _interopRequireDefault(_map);

	var _reduce = __webpack_require__(201);

	var _reduce2 = _interopRequireDefault(_reduce);

	var _forEach = __webpack_require__(16);

	var _forEach2 = _interopRequireDefault(_forEach);

	var _isArray = __webpack_require__(35);

	var _isArray2 = _interopRequireDefault(_isArray);

	var _mapSeries = __webpack_require__(227);

	var _mapSeries2 = _interopRequireDefault(_mapSeries);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var appdataNamespace = process.env.KINVEY_DATASTORE_NAMESPACE || 'appdata';
	var syncCollectionName = process.env.KINVEY_SYNC_COLLECTION_NAME || 'kinvey_sync';
	var idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';
	var kmdAttribute = process.env.KINVEY_KMD_ATTRIBUTE || '_kmd';

	var SyncManager = exports.SyncManager = function () {
	  function SyncManager() {
	    _classCallCheck(this, SyncManager);
	  }

	  _createClass(SyncManager, [{
	    key: 'count',
	    value: function count(query) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      var request = new _local.LocalRequest({
	        method: _enums.HttpMethod.GET,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname
	        }),
	        properties: options.properties,
	        query: query,
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      }).then(function (syncEntities) {
	        var size = (0, _reduce2.default)(syncEntities, function (sum, entity) {
	          return sum + entity.size;
	        }, 0);
	        return size;
	      });
	      return promise;
	    }
	  }, {
	    key: 'notify',
	    value: function notify(name, entities) {
	      var _this = this;

	      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	      if (!name) {
	        return _babybird2.default.reject(new _errors.KinveyError('Unable to add entities to the sync table for a store with no name.'));
	      }

	      if (!entities) {
	        return _babybird2.default.resolve(null);
	      }

	      var request = new _local.LocalRequest({
	        method: _enums.HttpMethod.GET,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname + '/' + name
	        }),
	        properties: options.properties,
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().catch(function (error) {
	        if (error instanceof _errors.NotFoundError) {
	          return {
	            _id: name,
	            entities: {},
	            size: 0
	          };
	        }

	        throw error;
	      }).then(function (response) {
	        return response.data;
	      }).then(function (syncEntity) {
	        if (!syncEntity) {
	          syncEntity = {
	            _id: name,
	            entities: {},
	            size: 0
	          };
	        }

	        if (!(0, _isArray2.default)(entities)) {
	          entities = [entities];
	        }

	        (0, _forEach2.default)(entities, function (entity) {
	          var id = entity[idAttribute];

	          if (id) {
	            if (!syncEntity.entities.hasOwnProperty(id)) {
	              syncEntity.size = syncEntity.size + 1;
	            }

	            syncEntity.entities[id] = {};
	          }
	        });

	        var request = new _local.LocalRequest({
	          method: _enums.HttpMethod.PUT,
	          url: _url2.default.format({
	            protocol: _this.client.protocol,
	            host: _this.client.host,
	            pathname: _this._pathname
	          }),
	          properties: options.properties,
	          timeout: options.timeout,
	          data: syncEntity,
	          client: _this.client
	        });
	        return request.execute();
	      }).then(function () {
	        return null;
	      });

	      return promise;
	    }
	  }, {
	    key: 'execute',
	    value: function execute(query) {
	      var _this2 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      var request = new _local.LocalRequest({
	        method: _enums.HttpMethod.GET,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname
	        }),
	        properties: options.properties,
	        query: query,
	        timeout: options.timeout,
	        client: this.client
	      });
	      var promise = request.execute().then(function (response) {
	        return response.data;
	      }).then(function (syncEntities) {
	        var promise = new _babybird2.default(function (resolve, reject) {
	          (0, _mapSeries2.default)(syncEntities, function (syncEntity, callback) {
	            var collectionName = syncEntity._id;
	            var entities = syncEntity.entities;
	            var syncSize = syncEntity.size;
	            var ids = Object.keys(entities);
	            var syncResult = { collection: collectionName, success: [], error: [] };
	            var batchSize = 100;
	            var i = 0;

	            var batchSync = function batchSync() {
	              var batchIds = ids.slice(i, i + batchSize);
	              i += batchSize;

	              var save = [];
	              var remove = [];
	              var promises = (0, _map2.default)(batchIds, function (id) {
	                var request = new _local.LocalRequest({
	                  method: _enums.HttpMethod.GET,
	                  url: _url2.default.format({
	                    protocol: _this2.client.protocol,
	                    host: _this2.client.host,
	                    pathname: '/' + appdataNamespace + '/' + _this2.client.appKey + '/' + collectionName + '/' + id
	                  }),
	                  properties: options.properties,
	                  timeout: options.timeout,
	                  client: _this2.client
	                });
	                var promise = request.execute().then(function (response) {
	                  return response.data;
	                }).then(function (entity) {
	                  save.push(entity);
	                  return entity;
	                }).catch(function (error) {
	                  if (error instanceof _errors.NotFoundError) {
	                    remove.push(id);
	                    return null;
	                  }

	                  throw error;
	                });
	                return promise;
	              });

	              var promise = _babybird2.default.all(promises).then(function () {
	                var saved = (0, _map2.default)(save, function (entity) {
	                  var metadata = new _metadata.Metadata(entity);
	                  var originalId = entity[idAttribute];
	                  delete entity[kmdAttribute];

	                  var request = new _network.NetworkRequest({
	                    method: _enums.HttpMethod.PUT,
	                    authType: _enums.AuthType.Session,
	                    url: _url2.default.format({
	                      protocol: _this2.client.protocol,
	                      host: _this2.client.host,
	                      pathname: '/' + appdataNamespace + '/' + _this2.client.appKey + '/' + collectionName + '/' + originalId
	                    }),
	                    properties: options.properties,
	                    timeout: options.timeout,
	                    data: entity,
	                    client: _this2.client
	                  });

	                  if (metadata.isLocal()) {
	                    delete entity[idAttribute];
	                    request.method = _enums.HttpMethod.POST;
	                    request.url = _url2.default.format({
	                      protocol: _this2.client.protocol,
	                      host: _this2.client.host,
	                      pathname: '/' + appdataNamespace + '/' + _this2.client.appKey + '/' + collectionName
	                    });
	                    request.data = entity;
	                  }

	                  return request.execute().then(function (request) {
	                    return request.data;
	                  }).then(function (entity) {
	                    var request = new _local.LocalRequest({
	                      method: _enums.HttpMethod.PUT,
	                      url: _url2.default.format({
	                        protocol: _this2.client.protocol,
	                        host: _this2.client.host,
	                        pathname: '/' + appdataNamespace + '/' + _this2.client.appKey + '/' + collectionName + '/' + entity[idAttribute]
	                      }),
	                      properties: options.properties,
	                      timeout: options.timeout,
	                      data: entity,
	                      client: _this2.client
	                    });
	                    return request.execute().then(function (response) {
	                      return response.data;
	                    });
	                  }).then(function (entity) {
	                    if (metadata.isLocal()) {
	                      var _request = new _local.LocalRequest({
	                        method: _enums.HttpMethod.DELETE,
	                        url: _url2.default.format({
	                          protocol: _this2.client.protocol,
	                          host: _this2.client.host,
	                          pathname: '/' + appdataNamespace + '/' + _this2.client.appKey + '/' + collectionName + '/' + originalId
	                        }),
	                        properties: options.properties,
	                        timeout: options.timeout,
	                        client: _this2.client
	                      });
	                      return _request.execute().then(function () {
	                        return entity;
	                      });
	                    }

	                    return entity;
	                  }).then(function (entity) {
	                    syncSize = syncSize - 1;
	                    delete entities[originalId];
	                    return {
	                      _id: originalId,
	                      entity: entity
	                    };
	                  }).catch(function (error) {
	                    // If the credentials used to authenticate this request are
	                    // not authorized to run the operation then just remove the entity
	                    // from the sync table
	                    if (error instanceof _errors.InsufficientCredentialsError) {
	                      syncSize = syncSize - 1;
	                      delete entities[originalId];
	                      return {
	                        _id: originalId,
	                        error: error
	                      };
	                    }

	                    return {
	                      _id: originalId,
	                      error: error
	                    };
	                  });
	                });

	                var removed = (0, _map2.default)(remove, function (id) {
	                  var request = new _network.NetworkRequest({
	                    method: _enums.HttpMethod.DELETE,
	                    authType: _enums.AuthType.Session,
	                    url: _url2.default.format({
	                      protocol: _this2.client.protocol,
	                      host: _this2.client.host,
	                      pathname: '/' + appdataNamespace + '/' + _this2.client.appKey + '/' + collectionName + '/' + id
	                    }),
	                    properties: options.properties,
	                    timeout: options.timeout,
	                    client: _this2.client
	                  });

	                  var promise = request.execute().then(function () {
	                    syncSize = syncSize - 1;
	                    delete entities[id];
	                    return {
	                      _id: id
	                    };
	                  }).catch(function (error) {
	                    // If the credentials used to authenticate this request are
	                    // not authorized to run the operation or the entity was
	                    // not found then just remove the entity from the sync table
	                    if (error instanceof _errors.NotFoundError || error instanceof _errors.InsufficientCredentialsError) {
	                      syncSize = syncSize - 1;
	                      delete entities[id];
	                      return {
	                        _id: id,
	                        error: error
	                      };
	                    }

	                    return {
	                      _id: id,
	                      error: error
	                    };
	                  });
	                  return promise;
	                });

	                return _babybird2.default.all([_babybird2.default.all(saved), _babybird2.default.all(removed)]);
	              }).then(function (results) {
	                var savedResults = results[0];
	                var removedResults = results[1];
	                var result = {
	                  collection: collectionName,
	                  success: [],
	                  error: []
	                };

	                (0, _forEach2.default)(savedResults, function (savedResult) {
	                  if (savedResult.error) {
	                    result.error.push(savedResult);
	                  } else {
	                    result.success.push(savedResult);
	                  }
	                });

	                (0, _forEach2.default)(removedResults, function (removedResult) {
	                  if (removedResult.error) {
	                    result.error.push(removedResult);
	                  } else {
	                    result.success.push(removedResult);
	                  }
	                });

	                return result;
	              }).then(function (result) {
	                syncResult.success = syncResult.success.concat(result.success);
	                syncResult.error = syncResult.error.concat(result.error);
	                return syncResult;
	              }).then(function (result) {
	                if (i < ids.length) {
	                  return batchSync();
	                }

	                return result;
	              }).then(function (result) {
	                syncEntity.size = syncSize;
	                syncEntity.entities = entities;

	                var request = new _local.LocalRequest({
	                  method: _enums.HttpMethod.PUT,
	                  url: _url2.default.format({
	                    protocol: _this2.client.protocol,
	                    host: _this2.client.host,
	                    pathname: _this2._pathname + '/' + syncEntity[idAttribute]
	                  }),
	                  properties: options.properties,
	                  timeout: options.timeout,
	                  data: syncEntity,
	                  client: _this2.client
	                });
	                return request.execute().then(function () {
	                  return result;
	                });
	              });

	              return promise;
	            };

	            batchSync().then(function (result) {
	              callback(null, result);
	            }).catch(function (error) {
	              callback(error);
	            });
	          }, function (error, results) {
	            if (error) {
	              return reject(error);
	            }

	            return results.length === 1 ? resolve(results[0]) : resolve(results);
	          });
	        });
	        return promise;
	      });
	      return promise;
	    }
	  }, {
	    key: '_pathname',
	    get: function get() {
	      return '/' + appdataNamespace + '/' + this.client.appKey + '/' + syncCollectionName;
	    }
	  }]);

	  return SyncManager;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 128 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * Enum for Mobile Identity Connect authorization grants.
	 */
	var AuthorizationGrant = {
	  AuthorizationCodeLoginPage: 'AuthorizationCodeLoginPage',
	  AuthorizationCodeAPI: 'AuthorizationCodeAPI'
	};
	Object.freeze(AuthorizationGrant);
	exports.AuthorizationGrant = AuthorizationGrant;


	var AuthType = {
	  All: 'All',
	  App: 'App',
	  Basic: 'Basic',
	  Default: 'Default',
	  Master: 'Master',
	  None: 'None',
	  Session: 'Session'
	};
	Object.freeze(AuthType);
	exports.AuthType = AuthType;

	/**
	 * Enum for DataStore types.
	 */

	var DataStoreType = {
	  Sync: 'Sync',
	  Cache: 'Cache',
	  Network: 'Network',
	  User: 'User',
	  File: 'File'
	};
	Object.freeze(DataStoreType);
	exports.DataStoreType = DataStoreType;

	/**
	 * @private
	 * Enum for Http Methods.
	 */

	var HttpMethod = {
	  GET: 'GET',
	  POST: 'POST',
	  PATCH: 'PATCH',
	  PUT: 'PUT',
	  DELETE: 'DELETE'
	};
	Object.freeze(HttpMethod);
	exports.HttpMethod = HttpMethod;

	/**
	 * Enum for Social Identities.
	 */

	var SocialIdentity = {
	  Facebook: 'facebook',
	  Google: 'google',
	  LinkedIn: 'linkedin'
	};
	Object.freeze(SocialIdentity);
	exports.SocialIdentity = SocialIdentity;

	/**
	 * @provate
	 * Enum for Status Codes.
	 */

	var StatusCode = {
	  Ok: 200,
	  Created: 201,
	  RedirectTemporarily: 301,
	  RedirectPermanetly: 302,
	  NotFound: 404,
	  ServerError: 500
	};
	Object.freeze(StatusCode);
	exports.StatusCode = StatusCode;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Metadata = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _errors = __webpack_require__(7);

	var _isPlainObject = __webpack_require__(130);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var kmdAttribute = process.env.KINVEY_KMD_ATTRIBUTE || '_kmd';

	/**
	 * Wrapper for accessing the `_kmd` properties of an entity.
	 */

	var Metadata = exports.Metadata = function () {
	  function Metadata() {
	    var entity = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, Metadata);

	    if (!(0, _isPlainObject2.default)(entity)) {
	      throw new _errors.KinveyError('entity argument must be an object');
	    }

	    /**
	     * The kmd properties.
	     *
	     * @private
	     * @type {Object}
	     */
	    this.kmd = entity[kmdAttribute] || {};

	    /**
	     * The entity.
	     *
	     * @private
	     * @type {Object}
	     */
	    this.entity = entity;
	  }

	  _createClass(Metadata, [{
	    key: 'isLocal',
	    value: function isLocal() {
	      return !!this.kmd.local;
	    }
	  }, {
	    key: 'toJSON',
	    value: function toJSON() {
	      return this.kmd;
	    }
	  }, {
	    key: 'createdAt',
	    get: function get() {
	      if (this.kmd.ect) {
	        return Date.parse(this.kmd.ect);
	      }

	      return undefined;
	    }
	  }, {
	    key: 'emailVerification',
	    get: function get() {
	      return this.kmd.emailVerification.status;
	    }
	  }, {
	    key: 'lastModified',
	    get: function get() {
	      if (this.kmd.lmt) {
	        return Date.parse(this.kmd.lmt);
	      }

	      return undefined;
	    }
	  }, {
	    key: 'lmt',
	    get: function get() {
	      return this.lastModified;
	    }
	  }, {
	    key: 'authtoken',
	    get: function get() {
	      return this.kmd.authtoken;
	    },
	    set: function set(authtoken) {
	      this.kmd.authtoken = authtoken;
	    }
	  }]);

	  return Metadata;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	var getPrototype = __webpack_require__(24),
	    isHostObject = __webpack_require__(60),
	    isObjectLike = __webpack_require__(34);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object,
	 *  else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) ||
	      objectToString.call(value) != objectTag || isHostObject(value)) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return (typeof Ctor == 'function' &&
	    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	}

	module.exports = isPlainObject;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.LocalRequest = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _request = __webpack_require__(132);

	var _rack = __webpack_require__(140);

	var _errors = __webpack_require__(7);

	var _response = __webpack_require__(225);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @private
	 */

	var LocalRequest = exports.LocalRequest = function (_KinveyRequest) {
	  _inherits(LocalRequest, _KinveyRequest);

	  function LocalRequest(options) {
	    _classCallCheck(this, LocalRequest);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(LocalRequest).call(this, options));

	    _this.rack = _rack.CacheRack.sharedInstance();
	    return _this;
	  }

	  _createClass(LocalRequest, [{
	    key: 'execute',
	    value: function execute() {
	      var _this2 = this;

	      var promise = _get(Object.getPrototypeOf(LocalRequest.prototype), 'execute', this).call(this).then(function () {
	        return _this2.rack.execute(_this2);
	      }).then(function (response) {
	        if (!response) {
	          throw new _errors.NoResponseError();
	        }

	        if (!(response instanceof _response.Response)) {
	          return new _response.Response({
	            statusCode: response.statusCode,
	            headers: response.headers,
	            data: response.data
	          });
	        }

	        return response;
	      }).then(function (response) {
	        if (!response.isSuccess()) {
	          throw response.error;
	        }

	        return response;
	      });

	      return promise;
	    }
	  }, {
	    key: 'cancel',
	    value: function cancel() {
	      var _this3 = this;

	      var promise = _get(Object.getPrototypeOf(LocalRequest.prototype), 'cancel', this).call(this).then(function () {
	        return _this3.rack.cancel();
	      });
	      return promise;
	    }
	  }]);

	  return LocalRequest;
	}(_request.KinveyRequest);

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global, Buffer) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.KinveyRequest = exports.Request = undefined;

	var _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if ("value" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _enums = __webpack_require__(128);

	var _device = __webpack_require__(137);

	var _properties = __webpack_require__(139);

	var _rack = __webpack_require__(140);

	var _client = __webpack_require__(126);

	var _string = __webpack_require__(206);

	var _urlPattern = __webpack_require__(208);

	var _urlPattern2 = _interopRequireDefault(_urlPattern);

	var _qs = __webpack_require__(210);

	var _qs2 = _interopRequireDefault(_qs);

	var _url = __webpack_require__(214);

	var _url2 = _interopRequireDefault(_url);

	var _appendQuery = __webpack_require__(219);

	var _appendQuery2 = _interopRequireDefault(_appendQuery);

	var _assign = __webpack_require__(114);

	var _assign2 = _interopRequireDefault(_assign);

	var _result = __webpack_require__(125);

	var _result2 = _interopRequireDefault(_result);

	var _forEach = __webpack_require__(16);

	var _forEach2 = _interopRequireDefault(_forEach);

	var _isString = __webpack_require__(36);

	var _isString2 = _interopRequireDefault(_isString);

	var _isPlainObject = __webpack_require__(130);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _isEmpty = __webpack_require__(224);

	var _isEmpty2 = _interopRequireDefault(_isEmpty);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var kmdAttribute = process.env.KINVEY_KMD_ATTRIBUTE || '_kmd';

	var Auth = {
	  /**
	   * Authenticate through (1) user credentials, (2) Master Secret, or (3) App
	   * Secret.
	   *
	   * @returns {Object}
	   */

	  all: function all(client) {
	    try {
	      return Auth.session(client);
	    } catch (error) {
	      return Auth.basic(client);
	    }
	  },


	  /**
	   * Authenticate through App Secret.
	   *
	   * @returns {Object}
	   */
	  app: function app(client) {
	    if (!client.appKey || !client.appSecret) {
	      throw new Error('Missing client credentials');
	    }

	    return {
	      scheme: 'Basic',
	      username: client.appKey,
	      password: client.appSecret
	    };
	  },


	  /**
	   * Authenticate through (1) Master Secret, or (2) App Secret.
	   *
	   * @returns {Object}
	   */
	  basic: function basic(client) {
	    try {
	      return Auth.master(client);
	    } catch (error) {
	      return Auth.app(client);
	    }
	  },


	  /**
	   * Authenticate through Master Secret.
	   *
	   * @returns {Object}
	   */
	  master: function master(client) {
	    if (!client.appKey || !client.masterSecret) {
	      throw new Error('Missing client credentials');
	    }

	    return {
	      scheme: 'Basic',
	      username: client.appKey,
	      password: client.masterSecret
	    };
	  },


	  /**
	   * Do not authenticate.
	   *
	   * @returns {Null}
	   */
	  none: function none() {
	    return null;
	  },


	  /**
	   * Authenticate through user credentials.
	   *
	   * @returns {Object}
	   */
	  session: function session(client) {
	    var activeUser = client.user;

	    if (!activeUser) {
	      throw new Error('There is not an active user.');
	    }

	    return {
	      scheme: 'Kinvey',
	      credentials: activeUser[kmdAttribute].authtoken
	    };
	  }
	};

	/**
	 * @private
	 */

	var Request = exports.Request = function () {
	  function Request() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, Request);

	    options = (0, _assign2.default)({
	      method: _enums.HttpMethod.GET,
	      headers: {},
	      url: '',
	      data: null,
	      timeout: process.env.KINVEY_DEFAULT_TIMEOUT || 10000,
	      followRedirect: true
	    }, options);

	    this.method = options.method;
	    this.url = options.url;
	    this.data = options.data || options.body;
	    this.timeout = options.timeout;
	    this.followRedirect = options.followRedirect;
	    this.executing = false;

	    var headers = options.headers && (0, _isPlainObject2.default)(options.headers) ? options.headers : {};

	    if (!headers.Accept || !headers.accept) {
	      headers.Accept = 'application/json; charset=utf-8';
	    }

	    this.addHeaders(headers);
	  }

	  _createClass(Request, [{
	    key: 'getHeader',
	    value: function getHeader(name) {
	      if (name) {
	        if (!(0, _isString2.default)(name)) {
	          name = String(name);
	        }

	        var headers = this.headers || {};
	        var keys = Object.keys(headers);

	        for (var i = 0, len = keys.length; i < len; i++) {
	          var key = keys[i];

	          if (key.toLowerCase() === name.toLowerCase()) {
	            return headers[key];
	          }
	        }
	      }

	      return undefined;
	    }
	  }, {
	    key: 'setHeader',
	    value: function setHeader(name, value) {
	      if (!name || !value) {
	        throw new Error('A name and value must be provided to set a header.');
	      }

	      if (!(0, _isString2.default)(name)) {
	        name = String(name);
	      }

	      var headers = this.headers || {};

	      if (!(0, _isString2.default)(value)) {
	        headers[name] = JSON.stringify(value);
	      } else {
	        headers[name] = value;
	      }

	      this.headers = headers;
	    }
	  }, {
	    key: 'addHeader',
	    value: function addHeader() {
	      var header = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      return this.setHeader(header.name, header.value);
	    }
	  }, {
	    key: 'addHeaders',
	    value: function addHeaders(headers) {
	      var _this = this;

	      if (!(0, _isPlainObject2.default)(headers)) {
	        throw new Error('Headers argument must be an object.');
	      }

	      var names = Object.keys(headers);

	      (0, _forEach2.default)(names, function (name) {
	        var value = headers[name];
	        _this.setHeader(name, value);
	      });
	    }
	  }, {
	    key: 'removeHeader',
	    value: function removeHeader(name) {
	      if (name) {
	        if (!(0, _isString2.default)(name)) {
	          name = String(name);
	        }

	        var headers = this.headers || {};
	        delete headers[name];
	        this.headers = headers;
	      }
	    }
	  }, {
	    key: 'clearHeaders',
	    value: function clearHeaders() {
	      this.headers = {};
	    }
	  }, {
	    key: 'isExecuting',
	    value: function isExecuting() {
	      return this.executing === true;
	    }
	  }, {
	    key: 'execute',
	    value: function execute() {
	      var _this2 = this;

	      if (this.executing) {
	        return _babybird2.default.reject(new Error('Unable to execute the request. The request is already executing.'));
	      }

	      this.executing = _babybird2.default.resolve().then(function (response) {
	        _this2.executing = false;
	        return response;
	      }).catch(function (error) {
	        _this2.executing = false;
	        throw error;
	      });

	      return this.executing;
	    }
	  }, {
	    key: 'toJSON',
	    value: function toJSON() {
	      var json = {
	        method: this.method,
	        headers: this.headers,
	        url: this.url,
	        data: this.data,
	        followRedirect: this.followRedirect
	      };

	      return json;
	    }
	  }, {
	    key: 'method',
	    get: function get() {
	      return this._method;
	    },
	    set: function set(method) {
	      if (!(0, _isString2.default)(method)) {
	        method = String(method);
	      }

	      method = method.toUpperCase();

	      switch (method) {
	        case _enums.HttpMethod.GET:
	        case _enums.HttpMethod.POST:
	        case _enums.HttpMethod.PATCH:
	        case _enums.HttpMethod.PUT:
	        case _enums.HttpMethod.DELETE:
	          this._method = method;
	          break;
	        default:
	          throw new Error('Invalid Http Method. Only GET, POST, PATCH, PUT, and DELETE are allowed.');
	      }
	    }
	  }, {
	    key: 'url',
	    get: function get() {
	      return (0, _appendQuery2.default)(this._url, _qs2.default.stringify({
	        _: Math.random().toString(36).substr(2)
	      }));
	    },
	    set: function set(urlString) {
	      this._url = urlString;
	    }
	  }, {
	    key: 'body',
	    get: function get() {
	      return this.data;
	    },
	    set: function set(body) {
	      this.data = body;
	    }
	  }, {
	    key: 'data',
	    get: function get() {
	      return this._data;
	    },
	    set: function set(data) {
	      if (data) {
	        var contentTypeHeader = this.getHeader('Content-Type');
	        if (!contentTypeHeader) {
	          this.setHeader('Content-Type', 'application/json; charset=utf-8');
	        }
	      } else {
	        this.removeHeader('Content-Type');
	      }

	      this._data = data;
	    }
	  }]);

	  return Request;
	}();

	/**
	 * @private
	 */


	var KinveyRequest = exports.KinveyRequest = function (_Request) {
	  _inherits(KinveyRequest, _Request);

	  function KinveyRequest() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, KinveyRequest);

	    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(KinveyRequest).call(this, options));

	    options = (0, _assign2.default)({
	      authType: _enums.AuthType.None,
	      properties: null,
	      query: null,
	      client: _client.Client.sharedInstance()
	    }, options);

	    _this3.rack = new _rack.KinveyRack();
	    _this3.authType = options.authType;
	    _this3.properties = options.properties;
	    _this3.query = (0, _result2.default)(options.query, 'toJSON', options.query);
	    _this3.client = options.client;

	    var headers = {};
	    headers['X-Kinvey-Api-Version'] = process.env.KINVEY_API_VERSION || 3;

	    var device = new _device.Device();
	    headers['X-Kinvey-Device-Information'] = JSON.stringify(device.toJSON());

	    if (options.contentType) {
	      headers['X-Kinvey-Content-Type'] = options.contentType;
	    }

	    if (options.skipBL === true) {
	      headers['X-Kinvey-Skip-Business-Logic'] = true;
	    }

	    if (options.trace === true) {
	      headers['X-Kinvey-Include-Headers-In-Response'] = 'X-Kinvey-Request-Id';
	      headers['X-Kinvey-ResponseWrapper'] = true;
	    }

	    _this3.addHeaders(headers);
	    return _this3;
	  }

	  _createClass(KinveyRequest, [{
	    key: 'execute',
	    value: function execute() {
	      var authorizationHeader = this.authorizationHeader;

	      if (authorizationHeader) {
	        this.addHeader(authorizationHeader);
	      }

	      var promise = _get(Object.getPrototypeOf(KinveyRequest.prototype), 'execute', this).call(this);
	      return promise;
	    }
	  }, {
	    key: 'cancel',
	    value: function cancel() {
	      var promise = _get(Object.getPrototypeOf(KinveyRequest.prototype), 'cancel', this).call(this);
	      return promise;
	    }
	  }, {
	    key: 'toJSON',
	    value: function toJSON() {
	      var json = _get(Object.getPrototypeOf(KinveyRequest.prototype), 'toJSON', this).call(this);
	      json.query = this.query;
	      return json;
	    }
	  }, {
	    key: 'properties',
	    set: function set(properties) {
	      if (properties) {
	        if (!(properties instanceof _properties.RequestProperties)) {
	          properties = new _properties.RequestProperties((0, _result2.default)(properties, 'toJSON', properties));
	        }

	        var appVersion = properties.appVersion;

	        if (appVersion) {
	          this.setHeader('X-Kinvey-Client-App-Version', appVersion);
	        } else {
	          this.removeHeader('X-Kinvey-Client-App-Version');
	        }

	        var customProperties = (0, _result2.default)(properties, 'toJSON', {});
	        delete customProperties.appVersion;
	        var customPropertiesHeader = JSON.stringify(customProperties);
	        var customPropertiesByteCount = (0, _string.byteCount)(customPropertiesHeader);
	        var customPropertiesMaxBytesAllowed = process.env.KINVEY_MAX_HEADER_BYTES || 2000;

	        if (customPropertiesByteCount >= customPropertiesMaxBytesAllowed) {
	          throw new Error('The custom properties are ' + customPropertiesByteCount + ' bytes.' + ('It must be less then ' + customPropertiesMaxBytesAllowed + ' bytes.'), 'Please remove some custom properties.');
	        }

	        this.setHeader('X-Kinvey-Custom-Request-Properties', customPropertiesHeader);
	      }
	    }
	  }, {
	    key: 'url',
	    get: function get() {
	      var urlString = _get(Object.getPrototypeOf(KinveyRequest.prototype), 'url', this);
	      var queryString = {};

	      if (this.query) {
	        queryString.query = this.query.filter;

	        if (!(0, _isEmpty2.default)(this.query.fields)) {
	          queryString.fields = this.query.fields.join(',');
	        }

	        if (this.query.limit) {
	          queryString.limit = this.query.limit;
	        }

	        if (this.query.skip > 0) {
	          queryString.skip = this.query.skip;
	        }

	        if (!(0, _isEmpty2.default)(this.query.sort)) {
	          queryString.sort = this.query.sort;
	        }
	      }

	      var keys = Object.keys(queryString);
	      (0, _forEach2.default)(keys, function (key) {
	        queryString[key] = (0, _isString2.default)(queryString[key]) ? queryString[key] : JSON.stringify(queryString[key]);
	      });

	      if ((0, _isEmpty2.default)(queryString)) {
	        return urlString;
	      }

	      return (0, _appendQuery2.default)(urlString, _qs2.default.stringify(queryString));
	    },
	    set: function set(urlString) {
	      _set(Object.getPrototypeOf(KinveyRequest.prototype), 'url', urlString, this);

	      var pathname = global.escape(_url2.default.parse(urlString).pathname);
	      var pattern = new _urlPattern2.default('(/:namespace)(/)(:appKey)(/)(:collectionName)(/)(:entityId)(/)');

	      var _ref = pattern.match(pathname) || {};

	      var appKey = _ref.appKey;
	      var collectionName = _ref.collectionName;
	      var entityId = _ref.entityId;

	      this.appKey = !!appKey ? global.unescape(appKey) : appKey;
	      this.collectionName = !!collectionName ? global.unescape(collectionName) : collectionName;
	      this.entityId = !!entityId ? global.unescape(entityId) : entityId;
	    }
	  }, {
	    key: 'authorizationHeader',
	    get: function get() {
	      var authInfo = void 0;

	      switch (this.authType) {
	        case _enums.AuthType.All:
	          authInfo = Auth.all(this.client);
	          break;
	        case _enums.AuthType.App:
	          authInfo = Auth.app(this.client);
	          break;
	        case _enums.AuthType.Basic:
	          authInfo = Auth.basic(this.client);
	          break;
	        case _enums.AuthType.Master:
	          authInfo = Auth.master(this.client);
	          break;
	        case _enums.AuthType.None:
	          authInfo = Auth.none(this.client);
	          break;
	        case _enums.AuthType.Session:
	          authInfo = Auth.session(this.client);
	          break;
	        default:
	          try {
	            authInfo = Auth.session(this.client);
	          } catch (error) {
	            try {
	              authInfo = Auth.master(this.client);
	            } catch (error2) {
	              throw error;
	            }
	          }
	      }

	      if (authInfo) {
	        var credentials = authInfo.credentials;

	        if (authInfo.username) {
	          credentials = new Buffer(authInfo.username + ':' + authInfo.password).toString('base64');
	        }

	        return {
	          name: 'Authorization',
	          value: authInfo.scheme + ' ' + credentials
	        };
	      }

	      return null;
	    }
	  }]);

	  return KinveyRequest;
	}(Request);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), (function() { return this; }()), __webpack_require__(133).Buffer))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(134)
	var ieee754 = __webpack_require__(135)
	var isArray = __webpack_require__(136)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	function typedArraySupport () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    this.length = 0
	    this.parent = undefined
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	} else {
	  // pre-set for values that may exist in the future
	  Buffer.prototype.length = undefined
	  Buffer.prototype.parent = undefined
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(133).Buffer, (function() { return this; }())))

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 135 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 136 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Device = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _package = __webpack_require__(138);

	var _package2 = _interopRequireDefault(_package);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @private
	 */

	var Device = exports.Device = function () {
	  function Device() {
	    _classCallCheck(this, Device);
	  }

	  _createClass(Device, [{
	    key: 'toJSON',
	    value: function toJSON() {
	      var userAgent = global.navigator.userAgent.toLowerCase();
	      var rChrome = /(chrome)\/([\w]+)/;
	      var rFirefox = /(firefox)\/([\w.]+)/;
	      var rIE = /(msie) ([\w.]+)/i;
	      var rOpera = /(opera)(?:.*version)?[ \/]([\w.]+)/;
	      var rSafari = /(safari)\/([\w.]+)/;
	      var browser = rChrome.exec(userAgent) || rFirefox.exec(userAgent) || rIE.exec(userAgent) || rOpera.exec(userAgent) || rSafari.exec(userAgent) || [];

	      return {
	        environment: 'html5',
	        library: {
	          name: 'html5'
	        },
	        os: {
	          name: browser[1],
	          version: browser[2]
	        },
	        sdk: {
	          name: _package2.default.name,
	          version: _package2.default.version
	        }
	      };
	    }
	  }]);

	  return Device;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 138 */
/***/ function(module, exports) {

	module.exports = {
		"name": "kinvey-html5-sdk",
		"version": "3.0.0-beta.17",
		"description": "Kinvey JavaScript SDK for HTML5.",
		"homepage": "http://www.kinvey.com",
		"bugs": {
			"url": "http://support.kinvey.com",
			"email": "support@kinvey.com"
		},
		"licenses": [
			{
				"type": "Apache-2.0",
				"url": "https://raw.github.com/Kinvey/kinvey-html5-sdk/master/LICENSE.txt"
			}
		],
		"author": "Kinvey, Inc.",
		"contributors": [
			"Thomas Conner <thomas@kinvey.com>"
		],
		"main": "./build/index.js",
		"repository": {
			"type": "git",
			"url": "git@github.com:Kinvey/kinvey-html5-sdk"
		},
		"scripts": {},
		"dependencies": {
			"kinvey-javascript-sdk-core": "3.0.0-beta.17",
			"lodash": "^4.0.0",
			"parse-headers": "^2.0.0"
		},
		"devDependencies": {
			"babel-eslint": "^6.0.0",
			"babel-preset-es2015": "^6.0.0",
			"babel-preset-stage-2": "^6.0.15",
			"del": "^2.0.2",
			"eslint-config-airbnb": "^7.0.0",
			"eslint-plugin-react": "^4.3.0",
			"gulp": "^3.9.0",
			"gulp-babel": "^6.1.2",
			"gulp-bump": "^2.1.0",
			"gulp-eslint": "^2.0.0",
			"gulp-git": "^1.7.1",
			"gulp-if": "^2.0.0",
			"gulp-plumber": "^1.0.1",
			"gulp-prompt": "^0.2.0",
			"gulp-rename": "^1.2.2",
			"gulp-sourcemaps": "^1.6.0",
			"gulp-uglify": "^1.5.1",
			"gulp-util": "^3.0.6",
			"json-loader": "^0.5.4",
			"run-sequence": "^1.1.5",
			"semver-regex": "^1.0.0",
			"vinyl-buffer": "^1.0.0",
			"vinyl-source-stream": "^1.1.0",
			"vinyl-transform": "^1.0.0",
			"webpack": "^1.13.0",
			"webpack-stream": "^3.1.0"
		},
		"engines": {
			"node": ">=4.0"
		},
		"keywords": [
			"Kinvey",
			"JavaScript",
			"HTML5"
		]
	};

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.RequestProperties = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _errors = __webpack_require__(7);

	var _isPlainObject = __webpack_require__(130);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var appVersionKey = 'appVersion';

	/**
	 * Request Properties class
	 */

	var RequestProperties = exports.RequestProperties = function () {
	  function RequestProperties() {
	    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, RequestProperties);

	    this.properties = properties;
	  }

	  _createClass(RequestProperties, [{
	    key: 'getProperty',


	    /**
	     * Returns the request property for the key or `undefined` if
	     * it has not been set.
	     *
	     * @param  {String} key Request property key
	     * @return {*} Request property value
	     */
	    value: function getProperty(key) {
	      var properties = this.toJSON();

	      if (key && properties.hasOwnProperty(key)) {
	        return properties[key];
	      }

	      return undefined;
	    }

	    /**
	     * Sets the request property key to the value.
	     *
	     * @param {String} key Request property key
	     * @param {*} value Request property value
	     * @return {RequestProperties} The request properties instance.
	     */

	  }, {
	    key: 'setProperty',
	    value: function setProperty(key, value) {
	      var properties = {};
	      properties[key] = value;
	      this.addProperties(properties);
	      return this;
	    }
	  }, {
	    key: 'addProperties',
	    value: function addProperties(properties) {
	      var _this = this;

	      if (!(0, _isPlainObject2.default)(properties)) {
	        throw new _errors.KinveyError('properties argument must be an object');
	      }

	      Object.keys(properties).forEach(function (key) {
	        var value = properties[key];

	        if (value) {
	          _this.properties[key] = value;
	        } else {
	          delete _this.properties[key];
	        }
	      });
	    }
	  }, {
	    key: 'clear',
	    value: function clear() {
	      this.properties = {};
	    }
	  }, {
	    key: 'clearProperty',
	    value: function clearProperty(key) {
	      var properties = this.properties;

	      if (key && properties.hasOwnProperty(key)) {
	        delete properties[key];
	      }
	    }

	    /**
	     * Clears the app version property.
	     *
	     * @return {RequestProperties} The request properties instance.
	     */

	  }, {
	    key: 'clearAppVersion',
	    value: function clearAppVersion() {
	      return this.clearProperty(appVersionKey);
	    }
	  }, {
	    key: 'toJSON',
	    value: function toJSON() {
	      return this.properties;
	    }
	  }, {
	    key: 'properties',
	    get: function get() {
	      return this._properties;
	    },
	    set: function set(properties) {
	      this._properties = properties;
	    }

	    /**
	     * Return the app version request property.
	     *
	     * @return {String} App version
	     */

	  }, {
	    key: 'appVersion',
	    get: function get() {
	      return this.getProperty(appVersionKey);
	    }

	    /**
	     * Set the app version request property. The app version can be provided
	     * in major.minor.patch format or something specific to your application.
	     *
	     * @param  {Any} version App version.
	     * @return {RequestProperties} The request properties instance.
	     */
	    ,
	    set: function set() {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var version = Array.prototype.slice.call(args, 1);
	      var major = args[0];
	      var minor = version[1];
	      var patch = version[2];
	      var appVersion = '';

	      if (major) {
	        appVersion = ('' + major).trim();
	      }

	      if (minor) {
	        appVersion = ('.' + minor).trim();
	      }

	      if (patch) {
	        appVersion = ('.' + patch).trim();
	      }

	      this.setProperty(appVersionKey, appVersion);
	      return this;
	    }
	  }]);

	  return RequestProperties;
	}();

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.NetworkRack = exports.CacheRack = exports.KinveyRack = exports.Rack = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _middleware = __webpack_require__(141);

	var _cache = __webpack_require__(143);

	var _parse = __webpack_require__(203);

	var _serialize = __webpack_require__(204);

	var _findIndex = __webpack_require__(205);

	var _findIndex2 = _interopRequireDefault(_findIndex);

	var _reduce = __webpack_require__(201);

	var _reduce2 = _interopRequireDefault(_reduce);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var sharedCacheRackInstance = Symbol();
	var sharedNetworkRackInstance = Symbol();

	/**
	 * @private
	 */

	var Rack = exports.Rack = function (_KinveyMiddleware) {
	  _inherits(Rack, _KinveyMiddleware);

	  function Rack() {
	    var name = arguments.length <= 0 || arguments[0] === undefined ? 'Rack' : arguments[0];

	    _classCallCheck(this, Rack);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Rack).call(this, name));

	    _this.middlewares = [];
	    _this.canceled = false;
	    return _this;
	  }

	  _createClass(Rack, [{
	    key: 'getMiddleware',
	    value: function getMiddleware() {
	      var index = arguments.length <= 0 || arguments[0] === undefined ? -1 : arguments[0];

	      var middlewares = this.middlewares;

	      if (index < -1 || index >= middlewares.length) {
	        throw new Error('Index ' + index + ' is out of bounds.');
	      }

	      return middlewares[index];
	    }
	  }, {
	    key: 'use',
	    value: function use(middleware) {
	      if (middleware) {
	        if (middleware instanceof _middleware.KinveyMiddleware) {
	          this.middlewares.push(middleware);
	          return;
	        }

	        throw new Error('Unable to use the middleware. It must be an instance of Middleware.');
	      }
	    }
	  }, {
	    key: 'useBefore',
	    value: function useBefore(middlewareClass, middleware) {
	      if (middleware) {
	        if (middleware instanceof _middleware.Middleware) {
	          var middlewares = this.middlewares;
	          var index = (0, _findIndex2.default)(middlewares, function (existingMiddleware) {
	            return existingMiddleware instanceof middlewareClass;
	          });

	          if (index > -1) {
	            middlewares.splice(index, 0, middleware);
	            this.middlewares = middlewares;
	          }

	          return;
	        }

	        throw new Error('Unable to use the middleware. It must be an instance of Middleware.');
	      }
	    }
	  }, {
	    key: 'useAfter',
	    value: function useAfter(middlewareClass, middleware) {
	      if (middleware) {
	        if (middleware instanceof _middleware.Middleware) {
	          var middlewares = this.middlewares;
	          var index = (0, _findIndex2.default)(middlewares, function (existingMiddleware) {
	            return existingMiddleware instanceof middlewareClass;
	          });

	          if (index > -1) {
	            middlewares.splice(index + 1, 0, middleware);
	            this.middlewares = middlewares;
	          }

	          return;
	        }

	        throw new Error('Unable to use the middleware. It must be an instance of Middleware.');
	      }
	    }
	  }, {
	    key: 'swap',
	    value: function swap(middlewareClass, middleware) {
	      if (middleware) {
	        if (middleware instanceof _middleware.Middleware) {
	          var middlewares = this.middlewares;
	          var index = (0, _findIndex2.default)(middlewares, function (existingMiddleware) {
	            return existingMiddleware instanceof middlewareClass;
	          });

	          if (index > -1) {
	            middlewares.splice(index, 1, middleware);
	            this.middlewares = middlewares;
	          }

	          return;
	        }

	        throw new Error('Unable to use the middleware. It must be an instance of Middleware.');
	      }
	    }
	  }, {
	    key: 'remove',
	    value: function remove(middlewareClass) {
	      var middlewares = this.middlewares;
	      var index = (0, _findIndex2.default)(middlewares, function (existingMiddleware) {
	        return existingMiddleware instanceof middlewareClass;
	      });

	      if (index > -1) {
	        middlewares.splice(index, 1);
	        this.middlewares = middlewares;
	        this.remove(middlewareClass);
	      }
	    }
	  }, {
	    key: 'reset',
	    value: function reset() {
	      this.middlewares = [];
	    }
	  }, {
	    key: 'execute',
	    value: function execute(request) {
	      if (!request) {
	        return _babybird2.default.reject(new Error('Request is null. Please provide a valid request.'));
	      }

	      return (0, _reduce2.default)(this.middlewares, function (promise, middleware) {
	        return promise.then(function (request) {
	          return middleware.handle(request);
	        });
	      }, _babybird2.default.resolve(request));
	    }
	  }, {
	    key: 'cancel',
	    value: function cancel() {
	      this.canceled = true;
	    }
	  }, {
	    key: 'handle',
	    value: function handle(request) {
	      return this.execute(request);
	    }
	  }, {
	    key: 'generateTree',
	    value: function generateTree() {
	      var level = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

	      var root = _get(Object.getPrototypeOf(Rack.prototype), 'generateTree', this).call(this, level);
	      var middlewares = this.middlewares;

	      middlewares.forEach(function (middleware) {
	        root.nodes.push(middleware.generateTree(level + 1));
	      });

	      return root;
	    }
	  }]);

	  return Rack;
	}(_middleware.KinveyMiddleware);

	/**
	 * @private
	 */


	var KinveyRack = exports.KinveyRack = function (_Rack) {
	  _inherits(KinveyRack, _Rack);

	  function KinveyRack() {
	    _classCallCheck(this, KinveyRack);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(KinveyRack).apply(this, arguments));
	  }

	  _createClass(KinveyRack, [{
	    key: 'execute',
	    value: function execute(request) {
	      var promise = _get(Object.getPrototypeOf(KinveyRack.prototype), 'execute', this).call(this, request).then(function (request) {
	        return request.response;
	      });
	      return promise;
	    }
	  }]);

	  return KinveyRack;
	}(Rack);

	/**
	 * @private
	 */


	var CacheRack = exports.CacheRack = function (_KinveyRack) {
	  _inherits(CacheRack, _KinveyRack);

	  function CacheRack() {
	    var name = arguments.length <= 0 || arguments[0] === undefined ? 'Kinvey Cache Rack' : arguments[0];

	    _classCallCheck(this, CacheRack);

	    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(CacheRack).call(this, name));

	    _this3.use(new _cache.CacheMiddleware());
	    return _this3;
	  }

	  _createClass(CacheRack, null, [{
	    key: 'sharedInstance',
	    value: function sharedInstance() {
	      var instance = this[sharedCacheRackInstance];

	      if (!instance) {
	        instance = new CacheRack();
	        this[sharedCacheRackInstance] = instance;
	      }

	      return instance;
	    }
	  }]);

	  return CacheRack;
	}(KinveyRack);

	/**
	 * @private
	 */


	var NetworkRack = exports.NetworkRack = function (_KinveyRack2) {
	  _inherits(NetworkRack, _KinveyRack2);

	  function NetworkRack() {
	    var name = arguments.length <= 0 || arguments[0] === undefined ? 'Kinvey Network Rack' : arguments[0];

	    _classCallCheck(this, NetworkRack);

	    var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(NetworkRack).call(this, name));

	    _this4.use(new _serialize.SerializeMiddleware());
	    _this4.use(new _parse.ParseMiddleware());
	    return _this4;
	  }

	  _createClass(NetworkRack, null, [{
	    key: 'sharedInstance',
	    value: function sharedInstance() {
	      var instance = this[sharedNetworkRackInstance];

	      if (!instance) {
	        instance = new NetworkRack();
	        this[sharedNetworkRackInstance] = instance;
	      }

	      return instance;
	    }
	  }]);

	  return NetworkRack;
	}(KinveyRack);

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.KinveyMiddleware = exports.Middleware = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _asciiTree = __webpack_require__(142);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @private
	 */

	var Middleware = exports.Middleware = function () {
	  function Middleware() {
	    var name = arguments.length <= 0 || arguments[0] === undefined ? 'Middleware' : arguments[0];

	    _classCallCheck(this, Middleware);

	    this.name = name;
	  }

	  _createClass(Middleware, [{
	    key: 'handle',
	    value: function handle() {
	      var request = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      return _babybird2.default.resolve(request);
	    }
	  }, {
	    key: 'generateTree',
	    value: function generateTree() {
	      var level = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

	      var root = {
	        value: this.name,
	        level: level,
	        nodes: []
	      };
	      return root;
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      var root = this.generateTree();
	      return _asciiTree.AsciiTree.generate(root);
	    }
	  }]);

	  return Middleware;
	}();

	/**
	 * @private
	 */


	var KinveyMiddleware = exports.KinveyMiddleware = function (_Middleware) {
	  _inherits(KinveyMiddleware, _Middleware);

	  function KinveyMiddleware() {
	    var name = arguments.length <= 0 || arguments[0] === undefined ? 'Kinvey Middleware' : arguments[0];

	    _classCallCheck(this, KinveyMiddleware);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(KinveyMiddleware).call(this, name));
	  }

	  _createClass(KinveyMiddleware, [{
	    key: 'handle',
	    value: function handle(request) {
	      return new _babybird2.default(function (resolve, reject) {
	        if (!request) {
	          return reject(new Error('Request is null. Please provide a valid request.', request));
	        }

	        return resolve(request);
	      });
	    }
	  }]);

	  return KinveyMiddleware;
	}(Middleware);

/***/ },
/* 142 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var levels = [];
	var c0 = String.fromCharCode(9500);
	var c1 = String.fromCharCode(9472);
	var c2 = String.fromCharCode(9492);
	var c3 = String.fromCharCode(9474);

	function compose(node, end) {
	  if (node.level === 0) {
	    return node.value;
	  }

	  var ret = '\r\n';
	  var c = end ? c2 : c0;

	  for (var i = 1; i < node.level; i++) {
	    ret = '' + ret + (levels[i] ? ' ' : c3);
	    ret = ret + '  ';
	  }

	  return '' + ret + c + c1 + ' ' + node.value;
	}

	/**
	 * @private
	 */
	var AsciiTree = exports.AsciiTree = {
	  generate: function generate() {
	    var _this = this;

	    var tree = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var end = arguments[1];

	    var result = compose(tree, end);

	    if (tree.nodes.length > 0) {
	      (function () {
	        var last = tree.nodes.length - 1;
	        tree.nodes.forEach(function (subTree, index) {
	          levels[subTree.level] = index === last;
	          result = result + _this.generate(subTree, index === last);
	        });
	      })();
	    }

	    return result;
	  }
	};

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CacheMiddleware = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _middleware = __webpack_require__(141);

	var _db = __webpack_require__(144);

	var _enums = __webpack_require__(128);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @private
	 */

	var CacheMiddleware = exports.CacheMiddleware = function (_KinveyMiddleware) {
	  _inherits(CacheMiddleware, _KinveyMiddleware);

	  function CacheMiddleware() {
	    var adapters = arguments.length <= 0 || arguments[0] === undefined ? [_db.DBAdapter.IndexedDB, _db.DBAdapter.WebSQL, _db.DBAdapter.LocalStorage, _db.DBAdapter.Memory] : arguments[0];

	    _classCallCheck(this, CacheMiddleware);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CacheMiddleware).call(this, 'Kinvey Cache Middleware'));

	    _this.adapters = adapters;
	    return _this;
	  }

	  _createClass(CacheMiddleware, [{
	    key: 'handle',
	    value: function handle(request) {
	      var _this2 = this;

	      return _get(Object.getPrototypeOf(CacheMiddleware.prototype), 'handle', this).call(this, request).then(function () {
	        var method = request.method;
	        var query = request.query;
	        var data = request.data;
	        var db = new _db.DB(request.appKey, _this2.adapters);
	        var promise = void 0;

	        if (method === _enums.HttpMethod.GET) {
	          if (request.entityId) {
	            if (request.entityId === '_count') {
	              promise = db.count(request.collectionName, query);
	            } else if (request.entityId === '_group') {
	              promise = db.group(request.collectionName, data);
	            } else {
	              promise = db.findById(request.collectionName, request.entityId);
	            }
	          } else {
	            promise = db.find(request.collectionName, query);
	          }
	        } else if (method === _enums.HttpMethod.POST || method === _enums.HttpMethod.PUT) {
	          promise = db.save(request.collectionName, data);
	        } else if (method === _enums.HttpMethod.DELETE) {
	          if (request.entityId) {
	            promise = db.removeById(request.collectionName, request.entityId);
	          } else {
	            promise = db.remove(request.collectionName, query);
	          }
	        }

	        return promise.then(function (result) {
	          var statusCode = _enums.StatusCode.Ok;

	          if (method === _enums.HttpMethod.POST) {
	            statusCode = _enums.StatusCode.Created;
	          }

	          request.response = {
	            statusCode: statusCode,
	            headers: {},
	            data: result
	          };

	          return request;
	        });
	      });
	    }
	  }]);

	  return CacheMiddleware;
	}(_middleware.KinveyMiddleware);

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DB = exports.DBAdapter = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _query = __webpack_require__(14);

	var _aggregation = __webpack_require__(13);

	var _indexeddb = __webpack_require__(145);

	var _localstorage = __webpack_require__(147);

	var _memory = __webpack_require__(188);

	var _websql = __webpack_require__(196);

	var _errors = __webpack_require__(7);

	var _log = __webpack_require__(199);

	var _map = __webpack_require__(197);

	var _map2 = _interopRequireDefault(_map);

	var _result = __webpack_require__(125);

	var _result2 = _interopRequireDefault(_result);

	var _reduce = __webpack_require__(201);

	var _reduce2 = _interopRequireDefault(_reduce);

	var _forEach = __webpack_require__(16);

	var _forEach2 = _interopRequireDefault(_forEach);

	var _isString = __webpack_require__(36);

	var _isString2 = _interopRequireDefault(_isString);

	var _isArray = __webpack_require__(35);

	var _isArray2 = _interopRequireDefault(_isArray);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';
	var kmdAttribute = process.env.KINVEY_KMD_ATTRIBUTE || '_kmd';

	/**
	 * @private
	 * Enum for DB Adapters.
	 */
	var DBAdapter = {
	  IndexedDB: 'IndexedDB',
	  LocalStorage: 'LocalStorage',
	  Memory: 'Memory',
	  WebSQL: 'WebSQL'
	};
	Object.freeze(DBAdapter);
	exports.DBAdapter = DBAdapter;

	/**
	 * @private
	 */

	var DB = exports.DB = function () {
	  function DB(name) {
	    var _this = this;

	    var adapters = arguments.length <= 1 || arguments[1] === undefined ? [DBAdapter.IndexedDB, DBAdapter.WebSQL, DBAdapter.LocalStorage, DBAdapter.Memory] : arguments[1];

	    _classCallCheck(this, DB);

	    if (!(0, _isArray2.default)(adapters)) {
	      adapters = [adapters];
	    }

	    (0, _forEach2.default)(adapters, function (adapter) {
	      switch (adapter) {
	        case DBAdapter.IndexedDB:
	          if (_indexeddb.IndexedDB.isSupported()) {
	            _this.adapter = new _indexeddb.IndexedDB(name);
	            return false;
	          }

	          break;
	        case DBAdapter.LocalStorage:
	          if (_localstorage.LocalStorage.isSupported()) {
	            _this.adapter = new _localstorage.LocalStorage(name);
	            return false;
	          }

	          break;
	        case DBAdapter.Memory:
	          if (_memory.Memory.isSupported()) {
	            _this.adapter = new _memory.Memory(name);
	            return false;
	          }

	          break;
	        case DBAdapter.WebSQL:
	          if (_websql.WebSQL.isSupported()) {
	            _this.adapter = new _websql.WebSQL(name);
	            return false;
	          }

	          break;
	        default:
	          _log.Log.warn('The ' + adapter + ' adapter is is not recognized.');
	      }

	      return true;
	    });

	    if (!this.adapter) {
	      if (_memory.Memory.isSupported()) {
	        _log.Log.error('Provided adapters are unsupported on this platform. ' + 'Defaulting to StoreAdapter.Memory adapter.', adapters);
	        this.adapter = new _memory.Memory(name);
	      } else {
	        _log.Log.error('Provided adapters are unsupported on this platform.', adapters);
	      }
	    }
	  }

	  _createClass(DB, [{
	    key: 'generateObjectId',
	    value: function generateObjectId() {
	      var length = arguments.length <= 0 || arguments[0] === undefined ? 24 : arguments[0];

	      var chars = 'abcdef0123456789';
	      var objectId = '';

	      for (var i = 0, j = chars.length; i < length; i++) {
	        var pos = Math.floor(Math.random() * j);
	        objectId += chars.substring(pos, pos + 1);
	      }

	      objectId = '' + this.objectIdPrefix + objectId;
	      return objectId;
	    }
	  }, {
	    key: 'find',
	    value: function find(collection, query) {
	      var promise = this.adapter.find(collection).then(function (entities) {
	        if (!entities) {
	          return [];
	        }

	        return entities;
	      }).then(function (entities) {
	        if (query && !(query instanceof _query.Query)) {
	          query = new _query.Query((0, _result2.default)(query, 'toJSON', query));
	        }

	        if (entities.length > 0 && query) {
	          entities = query._process(entities);
	        }

	        return entities;
	      });

	      return promise;
	    }
	  }, {
	    key: 'count',
	    value: function count(collection, query) {
	      var promise = this.find(collection, query).then(function (entities) {
	        return entities.length;
	      });
	      return promise;
	    }
	  }, {
	    key: 'group',
	    value: function group(collection, aggregation) {
	      var promise = this.find(collection).then(function (entities) {
	        if (!(aggregation instanceof _aggregation.Aggregation)) {
	          aggregation = new _aggregation.Aggregation((0, _result2.default)(aggregation, 'toJSON', aggregation));
	        }

	        if (entities.length > 0 && aggregation) {
	          return aggregation.process(entities);
	        }

	        return null;
	      });

	      return promise;
	    }
	  }, {
	    key: 'findById',
	    value: function findById(collection, id) {
	      if (!(0, _isString2.default)(id)) {
	        return _babybird2.default.reject(new _errors.KinveyError('id must be a string', id));
	      }

	      var promise = this.adapter.findById(collection, id);
	      return promise;
	    }
	  }, {
	    key: 'save',
	    value: function save(collection) {
	      var _this2 = this;

	      var entities = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

	      var singular = false;

	      if (!entities) {
	        return _babybird2.default.resolve(null);
	      }

	      if (!(0, _isArray2.default)(entities)) {
	        singular = true;
	        entities = [entities];
	      }

	      entities = (0, _map2.default)(entities, function (entity) {
	        var id = entity[idAttribute];
	        var kmd = entity[kmdAttribute] || {};

	        if (!id) {
	          id = _this2.generateObjectId();
	          kmd.local = true;
	        }

	        entity[idAttribute] = id;
	        entity[kmdAttribute] = kmd;
	        return entity;
	      });

	      return this.adapter.save(collection, entities).then(function (entities) {
	        if (singular && entities.length > 0) {
	          return entities[0];
	        }

	        return entities;
	      });
	    }
	  }, {
	    key: 'remove',
	    value: function remove(collection, query) {
	      var _this3 = this;

	      if (query && !(query instanceof _query.Query)) {
	        query = new _query.Query((0, _result2.default)(query, 'toJSON', query));
	      }

	      // Removing should not take the query sort, limit, and skip into account.
	      if (query) {
	        query.sort(null).limit(null).skip(0);
	      }

	      var promise = this.find(collection, query).then(function (entities) {
	        var promises = entities.map(function (entity) {
	          return _this3.removeById(collection, entity[idAttribute]);
	        });
	        return _babybird2.default.all(promises);
	      }).then(function (responses) {
	        var result = (0, _reduce2.default)(responses, function (result, response) {
	          result.count += response.count;
	          result.entities = result.entities.concat(response.entities);
	          return result;
	        }, {
	          count: 0,
	          entities: []
	        });
	        return result;
	      });

	      return promise;
	    }
	  }, {
	    key: 'removeById',
	    value: function removeById(collection, id) {
	      if (!id) {
	        return _babybird2.default.resolve({
	          count: 0,
	          entities: []
	        });
	      }

	      if (!(0, _isString2.default)(id)) {
	        return _babybird2.default.reject(new _errors.KinveyError('id must be a string', id));
	      }

	      var promise = this.adapter.removeById(collection, id);
	      return promise;
	    }
	  }, {
	    key: 'objectIdPrefix',
	    get: function get() {
	      return '';
	    }
	  }]);

	  return DB;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.IndexedDB = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _errors = __webpack_require__(7);

	var _forEach = __webpack_require__(16);

	var _forEach2 = _interopRequireDefault(_forEach);

	var _isArray = __webpack_require__(35);

	var _isArray2 = _interopRequireDefault(_isArray);

	var _isString = __webpack_require__(36);

	var _isString2 = _interopRequireDefault(_isString);

	var _isFunction = __webpack_require__(11);

	var _isFunction2 = _interopRequireDefault(_isFunction);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var dbCache = {};

	var TransactionMode = {
	  ReadWrite: 'readwrite',
	  ReadOnly: 'readonly'
	};
	Object.freeze(TransactionMode);

	if (typeof window !== 'undefined') {
	  __webpack_require__(146);
	  global.shimIndexedDB.__useShim();
	}

	var indexedDB = global.shimIndexedDB || global.indexedDB || global.mozIndexedDB || global.webkitIndexedDB || global.msIndexedDB;

	/**
	 * @private
	 */

	var IndexedDB = exports.IndexedDB = function () {
	  function IndexedDB(name) {
	    _classCallCheck(this, IndexedDB);

	    if (!name) {
	      throw new _errors.KinveyError('A name for the collection is required to use the indexeddb persistence adapter.', name);
	    }

	    if (!(0, _isString2.default)(name)) {
	      throw new _errors.KinveyError('The name of the collection must be a string to use the indexeddb persistence adapter', name);
	    }

	    this.name = name;
	    this.inTransaction = false;
	    this.queue = [];
	  }

	  _createClass(IndexedDB, [{
	    key: 'openTransaction',
	    value: function openTransaction(collection) {
	      var write = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	      var success = arguments[2];

	      var _this = this;

	      var error = arguments[3];
	      var force = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];

	      var db = dbCache[this.name];

	      if (db) {
	        var containsCollection = (0, _isFunction2.default)(db.objectStoreNames.contains) ? db.objectStoreNames.contains(collection) : db.objectStoreNames.indexOf(collection) !== -1;

	        if (containsCollection) {
	          try {
	            var mode = write ? TransactionMode.ReadWrite : TransactionMode.ReadOnly;
	            var txn = db.transaction([collection], mode);

	            if (txn) {
	              var store = txn.objectStore(collection);
	              return success(store);
	            }

	            throw new _errors.KinveyError('Unable to open a transaction for the ' + collection + ' ' + ('collection on the ' + this.name + ' indexedDB database.'));
	          } catch (err) {
	            return error(err);
	          }
	        } else if (!write) {
	          return error(new _errors.NotFoundError('The ' + collection + ' collection was not found on ' + ('the ' + this.name + ' indexedDB database.')));
	        }
	      }

	      if (!force && this.inTransaction) {
	        return this.queue.push(function () {
	          _this.openTransaction(collection, write, success, error);
	        });
	      }

	      // Switch flag
	      this.inTransaction = true;
	      var request = void 0;

	      if (db) {
	        var version = db.version + 1;
	        request = indexedDB.open(this.name, version);
	      } else {
	        request = indexedDB.open(this.name);
	      }

	      // If the database is opened with an higher version than its current, the
	      // `upgradeneeded` event is fired. Save the handle to the database, and
	      // create the collection.
	      request.onupgradeneeded = function (e) {
	        db = e.target.result;

	        if (write) {
	          db.createObjectStore(collection, { keyPath: '_id' });
	        }
	      };

	      // The `success` event is fired after `upgradeneeded` terminates.
	      // Save the handle to the database.
	      request.onsuccess = function (e) {
	        db = e.target.result;
	        dbCache[_this.name] = db;

	        // If a second instance of the same IndexedDB database performs an
	        // upgrade operation, the `versionchange` event is fired. Then, close the
	        // database to allow the external upgrade to proceed.
	        db.onversionchange = function () {
	          if (db) {
	            db.close();
	            db = null;
	            dbCache[_this.name] = null;
	          }
	        };

	        // Try to obtain the collection handle by recursing. Append the handlers
	        // to empty the queue upon success and failure. Set the `force` flag so
	        // all but the current transaction remain queued.
	        var wrap = function wrap(done) {
	          var callbackFn = function callbackFn(arg) {
	            done(arg);

	            // Switch flag
	            _this.inTransaction = false;

	            // The database handle has been established, we can now safely empty
	            // the queue. The queue must be emptied before invoking the concurrent
	            // operations to avoid infinite recursion.
	            if (_this.queue.length > 0) {
	              var pending = _this.queue;
	              _this.queue = [];
	              (0, _forEach2.default)(pending, function (fn) {
	                fn.call(_this);
	              });
	            }
	          };
	          return callbackFn;
	        };

	        return _this.openTransaction(collection, write, wrap(success), wrap(error), true);
	      };

	      request.onblocked = function () {
	        error(new _errors.KinveyError('The ' + _this.name + ' indexedDB database version can\'t be upgraded ' + 'because the database is already open.'));
	      };

	      request.onerror = function (e) {
	        error(new _errors.KinveyError('Unable to open the ' + _this.name + ' indexedDB database. ' + ('Received the error code ' + e.target.errorCode + '.')));
	      };

	      return null;
	    }
	  }, {
	    key: 'find',
	    value: function find(collection) {
	      var _this2 = this;

	      var promise = new _babybird2.default(function (resolve, reject) {
	        if (!collection) {
	          return reject(new _errors.KinveyError('A collection was not provided.'));
	        }

	        return _this2.openTransaction(collection, false, function (store) {
	          var request = store.openCursor();
	          var response = [];

	          request.onsuccess = function (e) {
	            var cursor = e.target.result;

	            if (cursor) {
	              response.push(cursor.value);
	              return cursor.continue();
	            }

	            return resolve(response);
	          };

	          request.onerror = function (e) {
	            reject(new _errors.KinveyError('An error occurred while fetching data from the ' + collection + ' ' + ('collection on the ' + _this2.name + ' indexedDB database. Received the error code ' + e.target.errorCode + '.')));
	          };
	        }, function (error) {
	          if (error instanceof _errors.NotFoundError) {
	            return resolve([]);
	          }

	          return reject(error);
	        });
	      });

	      return promise;
	    }
	  }, {
	    key: 'findById',
	    value: function findById(collection, id) {
	      var _this3 = this;

	      var promise = new _babybird2.default(function (resolve, reject) {
	        _this3.openTransaction(collection, false, function (store) {
	          var request = store.get(id);

	          request.onsuccess = function (e) {
	            var entity = e.target.result;

	            if (entity) {
	              return resolve(entity);
	            }

	            return reject(new _errors.NotFoundError('An entity with _id = ' + id + ' was not found in the ' + collection + ' ' + ('collection on the ' + _this3.name + ' indexedDB database.')));
	          };

	          request.onerror = function (e) {
	            reject(new _errors.KinveyError('An error occurred while retrieving an entity with _id = ' + id + ' ' + ('from the ' + collection + ' collection on the ' + _this3.name + ' indexedDB database. ') + ('Received the error code ' + e.target.errorCode + '.')));
	          };
	        }, function (error) {
	          if (error instanceof _errors.NotFoundError) {
	            return reject(new _errors.NotFoundError('An entity with _id = ' + id + ' was not found in the ' + collection + ' ' + ('collection on the ' + _this3.name + ' indexedDB database.')));
	          }

	          return reject(error);
	        });
	      });

	      return promise;
	    }
	  }, {
	    key: 'save',
	    value: function save(collection, entities) {
	      var _this4 = this;

	      var singular = false;

	      if (!(0, _isArray2.default)(entities)) {
	        entities = [entities];
	        singular = true;
	      }

	      if (entities.length === 0) {
	        return _babybird2.default.resolve(entities);
	      }

	      var promise = new _babybird2.default(function (resolve, reject) {
	        _this4.openTransaction(collection, true, function (store) {
	          var request = store.transaction;

	          (0, _forEach2.default)(entities, function (entity) {
	            store.put(entity);
	          });

	          request.oncomplete = function onComplete() {
	            resolve(singular ? entities[0] : entities);
	          };

	          request.onerror = function (e) {
	            reject(new _errors.KinveyError('An error occurred while saving the entities to the ' + collection + ' ' + ('collection on the ' + _this4.name + ' indexedDB database. Received the error code ' + e.target.errorCode + '.')));
	          };
	        }, reject);
	      });

	      return promise;
	    }
	  }, {
	    key: 'removeById',
	    value: function removeById(collection, id) {
	      var _this5 = this;

	      var promise = new _babybird2.default(function (resolve, reject) {
	        _this5.openTransaction(collection, true, function (store) {
	          var request = store.transaction;
	          var doc = store.get(id);
	          store.delete(id);

	          request.oncomplete = function () {
	            if (!doc.result) {
	              return reject(new _errors.NotFoundError('An entity with id = ' + id + ' was not found in the ' + collection + ' ' + ('collection on the ' + _this5.name + ' indexedDB database.')));
	            }

	            return resolve({
	              count: 1,
	              entities: [doc.result]
	            });
	          };

	          request.onerror = function (e) {
	            reject(new _errors.KinveyError('An error occurred while deleting an entity with id = ' + id + ' ' + ('in the ' + collection + ' collection on the ' + _this5.name + ' indexedDB database. ') + ('Received the error code ' + e.target.errorCode + '.')));
	          };
	        }, reject);
	      });

	      return promise;
	    }
	  }], [{
	    key: 'isSupported',
	    value: function isSupported() {
	      return !!indexedDB;
	    }
	  }]);

	  return IndexedDB;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 146 */
/***/ function(module, exports) {

	var idbModules = {  // jshint ignore:line
	    util: {
	        cleanInterface: false
	    }
	};

	(function () {
	    'use strict';

	    var testObject = {test: true};
	    //Test whether Object.defineProperty really works.
	    if (Object.defineProperty) {
	        try {
	            Object.defineProperty(testObject, 'test', { enumerable: false });
	            if (testObject.test) {
	                idbModules.util.cleanInterface = true;      // jshint ignore:line
	            }
	        } catch (e) {
	        //Object.defineProperty does not work as intended.
	        }
	    }
	})();

	(function(idbModules) {
	    'use strict';

	    /**
	     * A utility method to callback onsuccess, onerror, etc as soon as the calling function's context is over
	     * @param {Object} fn
	     * @param {Object} context
	     * @param {Object} argArray
	     */
	    function callback(fn, context, event) {
	        //window.setTimeout(function(){
	        event.target = context;
	        (typeof context[fn] === "function") && context[fn].apply(context, [event]);
	        //}, 1);
	    }

	    /**
	     * Shim the DOMStringList object.
	     *
	     */
	    var StringList = function() {
	        this.length = 0;
	        this._items = [];
	        //Internal functions on the prototype have been made non-enumerable below.
	        if (idbModules.util.cleanInterface) {
	            Object.defineProperty(this, '_items', {
	                enumerable: false
	            });
	        }
	    };
	    StringList.prototype = {
	        // Interface.
	        contains: function(str) {
	            return -1 !== this._items.indexOf(str);
	        },
	        item: function(key) {
	            return this._items[key];
	        },

	        // Helpers. Should only be used internally.
	        indexOf: function(str) {
	            return this._items.indexOf(str);
	        },
	        push: function(item) {
	            this._items.push(item);
	            this.length += 1;
	            for (var i = 0; i < this._items.length; i++) {
	                this[i] = this._items[i];
	            }
	        },
	        splice: function(/*index, howmany, item1, ..., itemX*/) {
	            this._items.splice.apply(this._items, arguments);
	            this.length = this._items.length;
	            for (var i in this) {
	                if (i === String(parseInt(i, 10))) {
	                    delete this[i];
	                }
	            }
	            for (i = 0; i < this._items.length; i++) {
	                this[i] = this._items[i];
	            }
	        }
	    };
	    if (idbModules.util.cleanInterface) {
	        for (var i in {
	            'indexOf': false,
	            'push': false,
	            'splice': false
	        }) {
	            Object.defineProperty(StringList.prototype, i, {
	                enumerable: false
	            });
	        }
	    }

	    idbModules.util.callback = callback;
	    idbModules.util.StringList = StringList;
	    idbModules.util.quote = function(arg) {
	        return "\"" + arg + "\"";
	    };

	}(idbModules));

	(function (idbModules) {
	    'use strict';

	    /**
	     * Polyfills missing features in the browser's native IndexedDB implementation.
	     * This is used for browsers that DON'T support WebSQL but DO support IndexedDB
	     */
	    function polyfill() {
	        if (navigator.userAgent.match(/MSIE/) ||
	            navigator.userAgent.match(/Trident/) ||
	            navigator.userAgent.match(/Edge/)) {
	            // Internet Explorer's native IndexedDB does not support compound keys
	            compoundKeyPolyfill();
	        }
	    }

	    /**
	     * Polyfills support for compound keys
	     */
	    function compoundKeyPolyfill() {
	        var cmp = IDBFactory.prototype.cmp;
	        var createObjectStore = IDBDatabase.prototype.createObjectStore;
	        var createIndex = IDBObjectStore.prototype.createIndex;
	        var add = IDBObjectStore.prototype.add;
	        var put = IDBObjectStore.prototype.put;
	        var indexGet = IDBIndex.prototype.get;
	        var indexGetKey = IDBIndex.prototype.getKey;
	        var indexCursor = IDBIndex.prototype.openCursor;
	        var indexKeyCursor = IDBIndex.prototype.openKeyCursor;
	        var storeGet = IDBObjectStore.prototype.get;
	        var storeDelete = IDBObjectStore.prototype.delete;
	        var storeCursor = IDBObjectStore.prototype.openCursor;
	        var storeKeyCursor = IDBObjectStore.prototype.openKeyCursor;
	        var bound = IDBKeyRange.bound;
	        var upperBound = IDBKeyRange.upperBound;
	        var lowerBound = IDBKeyRange.lowerBound;
	        var only = IDBKeyRange.only;
	        var requestResult = Object.getOwnPropertyDescriptor(IDBRequest.prototype, 'result');
	        var cursorPrimaryKey = Object.getOwnPropertyDescriptor(IDBCursor.prototype, 'primaryKey');
	        var cursorKey = Object.getOwnPropertyDescriptor(IDBCursor.prototype, 'key');
	        var cursorValue = Object.getOwnPropertyDescriptor(IDBCursorWithValue.prototype, 'value');

	        IDBFactory.prototype.cmp = function(key1, key2) {
	            var args = Array.prototype.slice.call(arguments);
	            if (key1 instanceof Array) {
	                args[0] = encodeCompoundKey(key1);
	            }
	            if (key2 instanceof Array) {
	                args[1] = encodeCompoundKey(key2);
	            }
	            return cmp.apply(this, args);
	        };

	        IDBDatabase.prototype.createObjectStore = function(name, opts) {
	            if (opts && opts.keyPath instanceof Array) {
	                opts.keyPath = encodeCompoundKeyPath(opts.keyPath);
	            }
	            return createObjectStore.apply(this, arguments);
	        };

	        IDBObjectStore.prototype.createIndex = function(name, keyPath, opts) {
	            var args = Array.prototype.slice.call(arguments);
	            if (keyPath instanceof Array) {
	                args[1] = encodeCompoundKeyPath(keyPath);
	            }
	            return createIndex.apply(this, args);
	        };

	        IDBObjectStore.prototype.add = function(value, key) {
	            return this.__insertData(add, arguments);
	        };

	        IDBObjectStore.prototype.put = function(value, key) {
	            return this.__insertData(put, arguments);
	        };

	        IDBObjectStore.prototype.__insertData = function(method, args) {
	            args = Array.prototype.slice.call(args);
	            var value = args[0];
	            var key = args[1];

	            // out-of-line key
	            if (key instanceof Array) {
	                args[1] = encodeCompoundKey(key);
	            }

	            if (typeof value === 'object') {
	                // inline key
	                if (isCompoundKey(this.keyPath)) {
	                    setInlineCompoundKey(value, this.keyPath);
	                }

	                // inline indexes
	                for (var i = 0; i < this.indexNames.length; i++) {
	                    var index = this.index(this.indexNames[i]);
	                    if (isCompoundKey(index.keyPath)) {
	                        try {
	                            setInlineCompoundKey(value, index.keyPath);
	                        }
	                        catch (e) {
	                            // The value doesn't have a valid key for this index.
	                        }
	                    }
	                }
	            }
	            return method.apply(this, args);
	        };

	        IDBIndex.prototype.get = function(key) {
	            var args = Array.prototype.slice.call(arguments);
	            if (key instanceof Array) {
	                args[0] = encodeCompoundKey(key);
	            }
	            return indexGet.apply(this, args);
	        };

	        IDBIndex.prototype.getKey = function(key) {
	            var args = Array.prototype.slice.call(arguments);
	            if (key instanceof Array) {
	                args[0] = encodeCompoundKey(key);
	            }
	            return indexGetKey.apply(this, args);
	        };

	        IDBIndex.prototype.openCursor = function(key) {
	            var args = Array.prototype.slice.call(arguments);
	            if (key instanceof Array) {
	                args[0] = encodeCompoundKey(key);
	            }
	            return indexCursor.apply(this, args);
	        };

	        IDBIndex.prototype.openKeyCursor = function(key) {
	            var args = Array.prototype.slice.call(arguments);
	            if (key instanceof Array) {
	                args[0] = encodeCompoundKey(key);
	            }
	            return indexKeyCursor.apply(this, args);
	        };

	        IDBObjectStore.prototype.get = function(key) {
	            var args = Array.prototype.slice.call(arguments);
	            if (key instanceof Array) {
	                args[0] = encodeCompoundKey(key);
	            }
	            return storeGet.apply(this, args);
	        };

	        IDBObjectStore.prototype.delete = function(key) {
	            var args = Array.prototype.slice.call(arguments);
	            if (key instanceof Array) {
	                args[0] = encodeCompoundKey(key);
	            }
	            return storeDelete.apply(this, args);
	        };

	        IDBObjectStore.prototype.openCursor = function(key) {
	            var args = Array.prototype.slice.call(arguments);
	            if (key instanceof Array) {
	                args[0] = encodeCompoundKey(key);
	            }
	            return storeCursor.apply(this, args);
	        };

	        IDBObjectStore.prototype.openKeyCursor = function(key) {
	            var args = Array.prototype.slice.call(arguments);
	            if (key instanceof Array) {
	                args[0] = encodeCompoundKey(key);
	            }
	            return storeKeyCursor.apply(this, args);
	        };

	        IDBKeyRange.bound = function(lower, upper, lowerOpen, upperOpen) {
	            var args = Array.prototype.slice.call(arguments);
	            if (lower instanceof Array) {
	                args[0] = encodeCompoundKey(lower);
	            }
	            if (upper instanceof Array) {
	                args[1] = encodeCompoundKey(upper);
	            }
	            return bound.apply(IDBKeyRange, args);
	        };

	        IDBKeyRange.upperBound = function(key, open) {
	            var args = Array.prototype.slice.call(arguments);
	            if (key instanceof Array) {
	                args[0] = encodeCompoundKey(key);
	            }
	            return upperBound.apply(IDBKeyRange, args);
	        };

	        IDBKeyRange.lowerBound = function(key, open) {
	            var args = Array.prototype.slice.call(arguments);
	            if (key instanceof Array) {
	                args[0] = encodeCompoundKey(key);
	            }
	            return lowerBound.apply(IDBKeyRange, args);
	        };

	        IDBKeyRange.only = function(key) {
	            var args = Array.prototype.slice.call(arguments);
	            if (key instanceof Array) {
	                args[0] = encodeCompoundKey(key);
	            }
	            return only.apply(IDBKeyRange, args);
	        };

	        Object.defineProperty(IDBRequest.prototype, 'result', {
	            enumerable: requestResult.enumerable,
	            configurable: requestResult.configurable,
	            get: function() {
	                var result = requestResult.get.call(this);
	                return removeInlineCompoundKey(result);
	            }
	        });

	        Object.defineProperty(IDBCursor.prototype, 'primaryKey', {
	            enumerable: cursorPrimaryKey.enumerable,
	            configurable: cursorPrimaryKey.configurable,
	            get: function() {
	                var result = cursorPrimaryKey.get.call(this);
	                return removeInlineCompoundKey(result);
	            }
	        });

	        Object.defineProperty(IDBCursor.prototype, 'key', {
	            enumerable: cursorKey.enumerable,
	            configurable: cursorKey.configurable,
	            get: function() {
	                var result = cursorKey.get.call(this);
	                return removeInlineCompoundKey(result);
	            }
	        });

	        Object.defineProperty(IDBCursorWithValue.prototype, 'value', {
	            enumerable: cursorValue.enumerable,
	            configurable: cursorValue.configurable,
	            get: function() {
	                var result = cursorValue.get.call(this);
	                return removeInlineCompoundKey(result);
	            }
	        });

	        try {
	            if (!IDBTransaction.VERSION_CHANGE) {
	                IDBTransaction.VERSION_CHANGE = 'versionchange';
	            }
	        }
	        catch (e) {}
	    }

	    var compoundKeysPropertyName = '__$$compoundKey';
	    var propertySeparatorRegExp = /\$\$/g;
	    var propertySeparator = '$$$$';         // "$$" after RegExp escaping
	    var keySeparator = '$_$';

	    function isCompoundKey(keyPath) {
	        return keyPath && (keyPath.indexOf(compoundKeysPropertyName + '.') === 0);
	    }

	    function encodeCompoundKeyPath(keyPath) {
	        // Encoded dotted properties
	        // ["name.first", "name.last"] ==> ["name$$first", "name$$last"]
	        for (var i = 0; i < keyPath.length; i++) {
	            keyPath[i] = keyPath[i].replace(/\./g, propertySeparator);
	        }

	        // Encode the array as a single property
	        // ["name$$first", "name$$last"] => "__$$compoundKey.name$$first$_$name$$last"
	        return compoundKeysPropertyName + '.' + keyPath.join(keySeparator);
	    }

	    function decodeCompoundKeyPath(keyPath) {
	        // Remove the "__$$compoundKey." prefix
	        keyPath = keyPath.substr(compoundKeysPropertyName.length + 1);

	        // Split the properties into an array
	        // "name$$first$_$name$$last" ==> ["name$$first", "name$$last"]
	        keyPath = keyPath.split(keySeparator);

	        // Decode dotted properties
	        // ["name$$first", "name$$last"] ==> ["name.first", "name.last"]
	        for (var i = 0; i < keyPath.length; i++) {
	            keyPath[i] = keyPath[i].replace(propertySeparatorRegExp, '.');
	        }
	        return keyPath;
	    }

	    function setInlineCompoundKey(value, encodedKeyPath) {
	        // Encode the key
	        var keyPath = decodeCompoundKeyPath(encodedKeyPath);
	        var key = idbModules.Key.getValue(value, keyPath);
	        var encodedKey = encodeCompoundKey(key);

	        // Store the encoded key inline
	        encodedKeyPath = encodedKeyPath.substr(compoundKeysPropertyName.length + 1);
	        value[compoundKeysPropertyName] = value[compoundKeysPropertyName] || {};
	        value[compoundKeysPropertyName][encodedKeyPath] = encodedKey;
	    }

	    function removeInlineCompoundKey(value) {
	        if (typeof value === "string" && isCompoundKey(value)) {
	            return decodeCompoundKey(value);
	        }
	        else if (value && typeof value[compoundKeysPropertyName] === "object") {
	            delete value[compoundKeysPropertyName];
	        }
	        return value;
	    }

	    function encodeCompoundKey(key) {
	        // Validate and encode the key
	        idbModules.Key.validate(key);
	        key = idbModules.Key.encode(key);

	        // Prepend the "__$$compoundKey." prefix
	        key = compoundKeysPropertyName + '.' + key;

	        validateKeyLength(key);
	        return key;
	    }

	    function decodeCompoundKey(key) {
	        validateKeyLength(key);

	        // Remove the "__$$compoundKey." prefix
	        key = key.substr(compoundKeysPropertyName.length + 1);

	        // Decode the key
	        key = idbModules.Key.decode(key);
	        return key;
	    }

	    function validateKeyLength(key) {
	        // BUG: Internet Explorer truncates string keys at 889 characters
	        if (key.length > 889) {
	            throw idbModules.util.createDOMException("DataError", "The encoded key is " + key.length + " characters long, but IE only allows 889 characters. Consider replacing numeric keys with strings to reduce the encoded length.");
	        }
	    }

	    idbModules.polyfill = polyfill;
	})(idbModules);

	(function(idbModules){
	    'use strict';

	    /**
	     * Implementation of the Structured Cloning Algorithm.  Supports the
	     * following object types:
	     * - Blob
	     * - Boolean
	     * - Date object
	     * - File object (deserialized as Blob object).
	     * - Number object
	     * - RegExp object
	     * - String object
	     * This is accomplished by doing the following:
	     * 1) Using the cycle/decycle functions from:
	     *    https://github.com/douglascrockford/JSON-js/blob/master/cycle.js
	     * 2) Serializing/deserializing objects to/from string that don't work with
	     *    JSON.stringify and JSON.parse by using object specific logic (eg use 
	     *    the FileReader API to convert a Blob or File object to a data URL.   
	     * 3) JSON.stringify and JSON.parse do the final conversion to/from string.
	     */
	    var Sca = (function(){
	        return {
	            decycle: function(object, callback) {
	                //From: https://github.com/douglascrockford/JSON-js/blob/master/cycle.js
	                // Contains additional logic to convert the following object types to string
	                // so that they can properly be encoded using JSON.stringify:
	                //  *Boolean
	                //  *Date
	                //  *File
	                //  *Blob
	                //  *Number
	                //  *Regex
	                // Make a deep copy of an object or array, assuring that there is at most
	                // one instance of each object or array in the resulting structure. The
	                // duplicate references (which might be forming cycles) are replaced with
	                // an object of the form
	                //      {$ref: PATH}
	                // where the PATH is a JSONPath string that locates the first occurance.
	                // So,
	                //      var a = [];
	                //      a[0] = a;
	                //      return JSON.stringify(JSON.decycle(a));
	                // produces the string '[{"$ref":"$"}]'.

	                // JSONPath is used to locate the unique object. $ indicates the top level of
	                // the object or array. [NUMBER] or [STRING] indicates a child member or
	                // property.

	                var objects = [],   // Keep a reference to each unique object or array
	                paths = [],     // Keep the path to each unique object or array
	                queuedObjects = [],
	                returnCallback = callback;

	                /**
	                 * Check the queue to see if all objects have been processed.
	                 * if they have, call the callback with the converted object.
	                 */
	                function checkForCompletion() {
	                    if (queuedObjects.length === 0) {
	                        returnCallback(derezObj);
	                    }    
	                }

	                /**
	                 * Convert a blob to a data URL.
	                 * @param {Blob} blob to convert.
	                 * @param {String} path of blob in object being encoded.
	                 */
	                function readBlobAsDataURL(blob, path) {
	                    var reader = new FileReader();
	                    reader.onloadend = function(loadedEvent) {
	                        var dataURL = loadedEvent.target.result;
	                        var blobtype = 'Blob';
	                        if (blob instanceof File) {
	                            //blobtype = 'File';
	                        }
	                        updateEncodedBlob(dataURL, path, blobtype);
	                    };
	                    reader.readAsDataURL(blob);
	                }
	                
	                /**
	                 * Async handler to update a blob object to a data URL for encoding.
	                 * @param {String} dataURL
	                 * @param {String} path
	                 * @param {String} blobtype - file if the blob is a file; blob otherwise
	                 */
	                function updateEncodedBlob(dataURL, path, blobtype) {
	                    var encoded = queuedObjects.indexOf(path);
	                    path = path.replace('$','derezObj');
	                    eval(path+'.$enc="'+dataURL+'"');
	                    eval(path+'.$type="'+blobtype+'"');
	                    queuedObjects.splice(encoded, 1);
	                    checkForCompletion();
	                }

	                function derez(value, path) {

	                    // The derez recurses through the object, producing the deep copy.

	                    var i,          // The loop counter
	                    name,       // Property name
	                    nu;         // The new object or array

	                    // typeof null === 'object', so go on if this value is really an object but not
	                    // one of the weird builtin objects.

	                    if (typeof value === 'object' && value !== null &&
	                        !(value instanceof Boolean) &&
	                        !(value instanceof Date)    &&
	                        !(value instanceof Number)  &&
	                        !(value instanceof RegExp)  &&
	                        !(value instanceof Blob)  &&
	                        !(value instanceof String)) {

	                        // If the value is an object or array, look to see if we have already
	                        // encountered it. If so, return a $ref/path object. This is a hard way,
	                        // linear search that will get slower as the number of unique objects grows.

	                        for (i = 0; i < objects.length; i += 1) {
	                            if (objects[i] === value) {
	                                return {$ref: paths[i]};
	                            }
	                        }

	                        // Otherwise, accumulate the unique value and its path.

	                        objects.push(value);
	                        paths.push(path);

	                        // If it is an array, replicate the array.

	                        if (Object.prototype.toString.apply(value) === '[object Array]') {
	                            nu = [];
	                            for (i = 0; i < value.length; i += 1) {
	                                nu[i] = derez(value[i], path + '[' + i + ']');
	                            }
	                        } else {
	                            // If it is an object, replicate the object.
	                            nu = {};
	                            for (name in value) {
	                                if (Object.prototype.hasOwnProperty.call(value, name)) {
	                                    nu[name] = derez(value[name],
	                                     path + '[' + JSON.stringify(name) + ']');
	                                }
	                            }
	                        }

	                        return nu;
	                    } else if (value instanceof Blob) {
	                        //Queue blob for conversion
	                        queuedObjects.push(path);
	                        readBlobAsDataURL(value, path);
	                    } else if (value instanceof Boolean) {
	                        value = {
	                            '$type': 'Boolean',
	                            '$enc': value.toString()
	                        };
	                    } else if (value instanceof Date) {
	                        value = {
	                            '$type': 'Date',
	                            '$enc': value.getTime()
	                        };
	                    } else if (value instanceof Number) {
	                        value = {
	                            '$type': 'Number',
	                            '$enc': value.toString()
	                        };
	                    } else if (value instanceof RegExp) {
	                        value = {
	                            '$type': 'RegExp',
	                            '$enc': value.toString()
	                        };
	                    } else if (typeof value === 'number') {
	                        value = {
	                            '$type': 'number',
	                            '$enc': value + ''  // handles NaN, Infinity, Negative Infinity
	                        };
	                    } else if (value === undefined) {
	                        value = {
	                            '$type': 'undefined'
	                        };
	                    }
	                    return value;
	                }
	                var derezObj = derez(object, '$');
	                checkForCompletion();
	            },
	                
	            retrocycle: function retrocycle($) {
	                //From: https://github.com/douglascrockford/JSON-js/blob/master/cycle.js
	                // Contains additional logic to convert strings to the following object types 
	                // so that they can properly be decoded:
	                //  *Boolean
	                //  *Date
	                //  *File
	                //  *Blob
	                //  *Number
	                //  *Regex
	                // Restore an object that was reduced by decycle. Members whose values are
	                // objects of the form
	                //      {$ref: PATH}
	                // are replaced with references to the value found by the PATH. This will
	                // restore cycles. The object will be mutated.

	                // The eval function is used to locate the values described by a PATH. The
	                // root object is kept in a $ variable. A regular expression is used to
	                // assure that the PATH is extremely well formed. The regexp contains nested
	                // * quantifiers. That has been known to have extremely bad performance
	                // problems on some browsers for very long strings. A PATH is expected to be
	                // reasonably short. A PATH is allowed to belong to a very restricted subset of
	                // Goessner's JSONPath.

	                // So,
	                //      var s = '[{"$ref":"$"}]';
	                //      return JSON.retrocycle(JSON.parse(s));
	                // produces an array containing a single element which is the array itself.

	                var px = /^\$(?:\[(?:\d+|\"(?:[^\\\"\u0000-\u001f]|\\([\\\"\/bfnrt]|u[0-9a-zA-Z]{4}))*\")\])*$/;
	                
	                /**
	                 * Converts the specified data URL to a Blob object
	                 * @param {String} dataURL to convert to a Blob
	                 * @returns {Blob} the converted Blob object
	                 */
	                function dataURLToBlob(dataURL) {
	                    var BASE64_MARKER = ';base64,',
	                        contentType,
	                        parts,
	                        raw;
	                    if (dataURL.indexOf(BASE64_MARKER) === -1) {
	                        parts = dataURL.split(',');
	                        contentType = parts[0].split(':')[1];
	                        raw = parts[1];

	                        return new Blob([raw], {type: contentType});
	                    }

	                    parts = dataURL.split(BASE64_MARKER);
	                    contentType = parts[0].split(':')[1];
	                    raw = window.atob(parts[1]);
	                    var rawLength = raw.length;
	                    var uInt8Array = new Uint8Array(rawLength);

	                    for (var i = 0; i < rawLength; ++i) {
	                        uInt8Array[i] = raw.charCodeAt(i);
	                    }
	                    return new Blob([uInt8Array.buffer], {type: contentType});
	                }
	                
	                function rez(value) {
	                    // The rez function walks recursively through the object looking for $ref
	                    // properties. When it finds one that has a value that is a path, then it
	                    // replaces the $ref object with a reference to the value that is found by
	                    // the path.

	                    var i, item, name, path;

	                    if (value && typeof value === 'object') {
	                        if (Object.prototype.toString.apply(value) === '[object Array]') {
	                            for (i = 0; i < value.length; i += 1) {
	                                item = value[i];
	                                if (item && typeof item === 'object') {
	                                    path = item.$ref;
	                                    if (typeof path === 'string' && px.test(path)) {
	                                        value[i] = eval(path);
	                                    } else {
	                                        value[i] = rez(item);
	                                    }
	                                }
	                            }
	                        } else {
	                            if (value.$type !== undefined) {
	                                switch(value.$type) {
	                                    case 'Blob':
	                                    case 'File':
	                                        value = dataURLToBlob(value.$enc);
	                                        break;
	                                    case 'Boolean':
	                                        value = Boolean(value.$enc === 'true');
	                                        break;
	                                    case 'Date':
	                                        value = new Date(value.$enc);
	                                        break;
	                                    case 'Number':
	                                        value = Number(value.$enc);
	                                        break;
	                                    case 'RegExp':
	                                        value = eval(value.$enc);
	                                        break;
	                                    case 'number':
	                                        value = parseFloat(value.$enc);
	                                        break;
	                                    case 'undefined':
	                                        value = undefined;
	                                        break;
	                                }
	                            } else {
	                                for (name in value) {
	                                    if (typeof value[name] === 'object') {
	                                        item = value[name];
	                                        if (item) {
	                                            path = item.$ref;
	                                            if (typeof path === 'string' && px.test(path)) {
	                                                value[name] = eval(path);
	                                            } else {
	                                                value[name] = rez(item);
	                                            }
	                                        }
	                                    }   
	                                }
	                            }
	                        }
	                    }
	                    return value;
	                }
	                return rez($);

	            },

	            /**
	             * Encode the specified object as a string.  Because of the asynchronus
	             * conversion of Blob/File to string, the encode function requires
	             * a callback
	             * @param {Object} val the value to convert.
	             * @param {function} callback the function to call once conversion is
	             * complete.  The callback gets called with the converted value.
	             */
	            "encode": function(val, callback){
	                function finishEncode(val) {
	                    callback(JSON.stringify(val));
	                }
	                this.decycle(val, finishEncode);                        
	            },
	                    
	            /**
	             * Deserialize the specified string to an object
	             * @param {String} val the serialized string
	             * @returns {Object} the deserialized object
	             */
	            "decode": function(val){
	                return this.retrocycle(JSON.parse(val));
	            }
	        };
	    }());
	    idbModules.Sca = Sca;
	}(idbModules));

	(function(idbModules) {
	    "use strict";

	    /**
	     * Encodes the keys based on their types. This is required to maintain collations
	     */
	    var collations = ["undefined", "number", "date", "string", "array"];

	    /**
	     * The sign values for numbers, ordered from least to greatest.
	     *  - "negativeInfinity": Sorts below all other values.
	     *  - "bigNegative": Negative values less than or equal to negative one.
	     *  - "smallNegative": Negative values between negative one and zero, noninclusive.
	     *  - "smallPositive": Positive values between zero and one, including zero but not one.
	     *  - "largePositive": Positive values greater than or equal to one.
	     *  - "positiveInfinity": Sorts above all other values.
	     */
	    var signValues = ["negativeInfinity", "bigNegative", "smallNegative", "smallPositive", "bigPositive", "positiveInfinity"];

	    var types = {
	        // Undefined is not a valid key type.  It's only used when there is no key.
	        undefined: {
	            encode: function(key) {
	                return collations.indexOf("undefined") + "-";
	            },
	            decode: function(key) {
	                return undefined;
	            }
	        },

	        // Dates are encoded as ISO 8601 strings, in UTC time zone.
	        date: {
	            encode: function(key) {
	                return collations.indexOf("date") + "-" + key.toJSON();
	            },
	            decode: function(key) {
	                return new Date(key.substring(2));
	            }
	        },

	        // Numbers are represented in a lexically sortable base-32 sign-exponent-mantissa
	        // notation.
	        //
	        // sign: takes a value between zero and five, inclusive. Represents infinite cases
	        //     and the signs of both the exponent and the fractional part of the number.
	        // exponent: paded to two base-32 digits, represented by the 32's compliment in the
	        //     "smallPositive" and "bigNegative" cases to ensure proper lexical sorting.
	        // mantissa: also called the fractional part. Normed 11-digit base-32 representation.
	        //     Represented by the 32's compliment in the "smallNegative" and "bigNegative"
	        //     cases to ensure proper lexical sorting.
	        number: {
	            // The encode step checks for six numeric cases and generates 14-digit encoded
	            // sign-exponent-mantissa strings.
	            encode: function(key) {
	                var key32 = Math.abs(key).toString(32);
	                // Get the index of the decimal.
	                var decimalIndex = key32.indexOf(".");
	                // Remove the decimal.
	                key32 = (decimalIndex !== -1) ? key32.replace(".", "") : key32;
	                // Get the index of the first significant digit.
	                var significantDigitIndex = key32.search(/[^0]/);
	                // Truncate leading zeros.
	                key32 = key32.slice(significantDigitIndex);
	                var sign, exponent = zeros(2), mantissa = zeros(11);

	                // Finite cases:
	                if (isFinite(key)) {
	                    // Negative cases:
	                    if (key < 0) {
	                        // Negative exponent case:
	                        if (key > -1) {
	                            sign = signValues.indexOf("smallNegative");
	                            exponent = padBase32Exponent(significantDigitIndex);
	                            mantissa = flipBase32(padBase32Mantissa(key32));
	                        }
	                        // Non-negative exponent case:
	                        else {
	                            sign = signValues.indexOf("bigNegative");
	                            exponent = flipBase32(padBase32Exponent(
	                                (decimalIndex !== -1) ? decimalIndex : key32.length
	                            ));
	                            mantissa = flipBase32(padBase32Mantissa(key32));
	                        }
	                    }
	                    // Non-negative cases:
	                    else {
	                        // Negative exponent case:
	                        if (key < 1) {
	                            sign = signValues.indexOf("smallPositive");
	                            exponent = flipBase32(padBase32Exponent(significantDigitIndex));
	                            mantissa = padBase32Mantissa(key32);
	                        }
	                        // Non-negative exponent case:
	                        else {
	                            sign = signValues.indexOf("bigPositive");
	                            exponent = padBase32Exponent(
	                                (decimalIndex !== -1) ? decimalIndex : key32.length
	                            );
	                            mantissa = padBase32Mantissa(key32);
	                        }
	                    }
	                }
	                // Infinite cases:
	                else {
	                    sign = signValues.indexOf(
	                        key > 0 ? "positiveInfinity" : "negativeInfinity"
	                    );
	                }

	                return collations.indexOf("number") + "-" + sign + exponent + mantissa;
	            },
	            // The decode step must interpret the sign, reflip values encoded as the 32's complements,
	            // apply signs to the exponent and mantissa, do the base-32 power operation, and return
	            // the original JavaScript number values.
	            decode: function(key) {
	                var sign = +key.substr(2, 1);
	                var exponent = key.substr(3, 2);
	                var mantissa = key.substr(5, 11);

	                switch (signValues[sign]) {
	                    case "negativeInfinity":
	                        return -Infinity;
	                    case "positiveInfinity":
	                        return Infinity;
	                    case "bigPositive":
	                        return pow32(mantissa, exponent);
	                    case "smallPositive":
	                        exponent = negate(flipBase32(exponent));
	                        return pow32(mantissa, exponent);
	                    case "smallNegative":
	                        exponent = negate(exponent);
	                        mantissa = flipBase32(mantissa);
	                        return -pow32(mantissa, exponent);
	                    case "bigNegative":
	                        exponent = flipBase32(exponent);
	                        mantissa = flipBase32(mantissa);
	                        return -pow32(mantissa, exponent);
	                    default:
	                        throw new Error("Invalid number.");
	                }
	            }
	        },

	        // Strings are encoded as JSON strings (with quotes and unicode characters escaped).
	        //
	        // IF the strings are in an array, then some extra encoding is done to make sorting work correctly:
	        // Since we can't force all strings to be the same length, we need to ensure that characters line-up properly
	        // for sorting, while also accounting for the extra characters that are added when the array itself is encoded as JSON.
	        // To do this, each character of the string is prepended with a dash ("-"), and a space is added to the end of the string.
	        // This effectively doubles the size of every string, but it ensures that when two arrays of strings are compared,
	        // the indexes of each string's characters line up with each other.
	        string: {
	            encode: function(key, inArray) {
	                if (inArray) {
	                    // prepend each character with a dash, and append a space to the end
	                    key = key.replace(/(.)/g, '-$1') + ' ';
	                }
	                return collations.indexOf("string") + "-" + key;
	            },
	            decode: function(key, inArray) {
	                key = key.substring(2);
	                if (inArray) {
	                    // remove the space at the end, and the dash before each character
	                    key = key.substr(0, key.length - 1).replace(/-(.)/g, '$1');
	                }
	                return key;
	            }
	        },

	        // Arrays are encoded as JSON strings.
	        // An extra, value is added to each array during encoding to make empty arrays sort correctly.
	        array: {
	            encode: function(key) {
	                var encoded = [];
	                for (var i = 0; i < key.length; i++) {
	                    var item = key[i];
	                    var encodedItem = idbModules.Key.encode(item, true);        // encode the array item
	                    encoded[i] = encodedItem;
	                }
	                encoded.push(collations.indexOf("undefined") + "-");            // append an extra item, so empty arrays sort correctly
	                return collations.indexOf("array") + "-" + JSON.stringify(encoded);
	            },
	            decode: function(key) {
	                var decoded = JSON.parse(key.substring(2));
	                decoded.pop();                                                  // remove the extra item
	                for (var i = 0; i < decoded.length; i++) {
	                    var item = decoded[i];
	                    var decodedItem = idbModules.Key.decode(item, true);        // decode the item
	                    decoded[i] = decodedItem;
	                }
	                return decoded;
	            }
	        }
	    };

	    /**
	     * Return a padded base-32 exponent value.
	     * @param {number}
	     * @return {string}
	     */
	    function padBase32Exponent(n) {
	        n = n.toString(32);
	        return (n.length === 1) ? "0" + n : n;
	    }

	    /**
	     * Return a padded base-32 mantissa.
	     * @param {string}
	     * @return {string}
	     */
	    function padBase32Mantissa(s) {
	        return (s + zeros(11)).slice(0, 11);
	    }

	    /**
	     * Flips each digit of a base-32 encoded string.
	     * @param {string} encoded
	     */
	    function flipBase32(encoded) {
	        var flipped = "";
	        for (var i = 0; i < encoded.length; i++) {
	            flipped += (31 - parseInt(encoded[i], 32)).toString(32);
	        }
	        return flipped;
	    }

	    /**
	     * Base-32 power function.
	     * RESEARCH: This function does not precisely decode floats because it performs
	     * floating point arithmetic to recover values. But can the original values be
	     * recovered exactly?
	     * Someone may have already figured out a good way to store JavaScript floats as
	     * binary strings and convert back. Barring a better method, however, one route
	     * may be to generate decimal strings that `parseFloat` decodes predictably.
	     * @param {string}
	     * @param {string}
	     * @return {number}
	     */
	    function pow32(mantissa, exponent) {
	        var whole, fraction, expansion;
	        exponent = parseInt(exponent, 32);
	        if (exponent < 0) {
	            return roundToPrecision(
	                parseInt(mantissa, 32) * Math.pow(32, exponent - 10)
	            );
	        }
	        else {
	            if (exponent < 11) {
	                whole = mantissa.slice(0, exponent);
	                whole = parseInt(whole, 32);
	                fraction = mantissa.slice(exponent);
	                fraction = parseInt(fraction, 32) * Math.pow(32, exponent - 11);
	                return roundToPrecision(whole + fraction);
	            }
	            else {
	                expansion = mantissa + zeros(exponent - 11);
	                return parseInt(expansion, 32);
	            }
	        }
	    }

	    /**
	     *
	     */
	    function roundToPrecision(num, precision) {
	        precision = precision || 16;
	        return parseFloat(num.toPrecision(precision));
	    }

	    /**
	     * Returns a string of n zeros.
	     * @param {number}
	     * @return {string}
	     */
	    function zeros(n) {
	        var result = "";
	        while (n--) {
	            result = result + "0";
	        }
	        return result;
	    }

	    /**
	     * Negates numeric strings.
	     * @param {string}
	     * @return {string}
	     */
	    function negate(s) {
	        return "-" + s;
	    }

	    /**
	     * Returns the string "number", "date", "string", or "array".
	     */
	    function getType(key) {
	        if (key instanceof Date) {
	            return "date";
	        }
	        if (key instanceof Array) {
	            return "array";
	        }
	        return typeof key;
	    }

	    /**
	     * Keys must be strings, numbers, Dates, or Arrays
	     */
	    function validate(key) {
	        var type = getType(key);
	        if (type === "array") {
	            for (var i = 0; i < key.length; i++) {
	                validate(key[i]);
	            }
	        }
	        else if (!types[type] || (type !== "string" && isNaN(key))) {
	            throw idbModules.util.createDOMException("DataError", "Not a valid key");
	        }
	    }

	    /**
	     * Returns the value of an inline key
	     * @param {object} source
	     * @param {string|array} keyPath
	     */
	    function getValue(source, keyPath) {
	        try {
	            if (keyPath instanceof Array) {
	                var arrayValue = [];
	                for (var i = 0; i < keyPath.length; i++) {
	                    arrayValue.push(eval("source." + keyPath[i]));
	                }
	                return arrayValue;
	            } else {
	                return eval("source." + keyPath);
	            }
	        }
	        catch (e) {
	            return undefined;
	        }
	    }

	    /**
	     * Sets the inline key value
	     * @param {object} source
	     * @param {string} keyPath
	     * @param {*} value
	     */
	    function setValue(source, keyPath, value) {
	        var props = keyPath.split('.');
	        for (var i = 0; i < props.length - 1; i++) {
	            var prop = props[i];
	            source = source[prop] = source[prop] || {};
	        }
	        source[props[props.length - 1]] = value;
	    }

	    /**
	     * Determines whether an index entry matches a multi-entry key value.
	     * @param {string} encodedEntry     The entry value (already encoded)
	     * @param {string} encodedKey       The full index key (already encoded)
	     * @returns {boolean}
	     */
	    function isMultiEntryMatch(encodedEntry, encodedKey) {
	        var keyType = collations[encodedKey.substring(0, 1)];

	        if (keyType === "array") {
	            return encodedKey.indexOf(encodedEntry) > 1;
	        }
	        else {
	            return encodedKey === encodedEntry;
	        }
	    }

	    function isKeyInRange(key, range) {
	        var lowerMatch = range.lower === undefined;
	        var upperMatch = range.upper === undefined;
	        var encodedKey = idbModules.Key.encode(key, true);

	        if (range.lower !== undefined) {
	            if (range.lowerOpen && encodedKey > range.__lower) {
	                lowerMatch = true;
	            }
	            if (!range.lowerOpen && encodedKey >= range.__lower) {
	                lowerMatch = true;
	            }
	        }
	        if (range.upper !== undefined) {
	            if (range.upperOpen && encodedKey < range.__upper) {
	                upperMatch = true;
	            }
	            if (!range.upperOpen && encodedKey <= range.__upper) {
	                upperMatch = true;
	            }
	        }

	        return lowerMatch && upperMatch;
	    }

	    function findMultiEntryMatches(keyEntry, range) {
	        var matches = [];

	        if (keyEntry instanceof Array) {
	            for (var i = 0; i < keyEntry.length; i++) {
	                var key = keyEntry[i];

	                if (key instanceof Array) {
	                    if (range.lower === range.upper) {
	                        continue;
	                    }
	                    if (key.length === 1) {
	                        key = key[0];
	                    } else {
	                        var nested = findMultiEntryMatches(key, range);
	                        if (nested.length > 0) {
	                            matches.push(key);
	                        }
	                        continue;
	                    }
	                }

	                if (isKeyInRange(key, range)) {
	                    matches.push(key);
	                }
	            }
	        } else {
	            if (isKeyInRange(keyEntry, range)) {
	                matches.push(keyEntry);
	            }
	        }
	        return matches;
	    }

	    idbModules.Key = {
	        encode: function(key, inArray) {
	            if (key === undefined) {
	                return null;
	            }
	            return types[getType(key)].encode(key, inArray);
	        },
	        decode: function(key, inArray) {
	            if (typeof key !== "string") {
	                return undefined;
	            }
	            return types[collations[key.substring(0, 1)]].decode(key, inArray);
	        },
	        validate: validate,
	        getValue: getValue,
	        setValue: setValue,
	        isMultiEntryMatch: isMultiEntryMatch,
	        findMultiEntryMatches: findMultiEntryMatches
	    };
	}(idbModules));

	(function(idbModules) {
	    'use strict';

	    /**
	     * Creates a native Event object, for browsers that support it
	     * @returns {Event}
	     */
	    function createNativeEvent(type, debug) {
	        var event = new Event(type);
	        event.debug = debug;

	        // Make the "target" writable
	        Object.defineProperty(event, 'target', {
	            writable: true
	        });

	        return event;
	    }

	    /**
	     * A shim Event class, for browsers that don't allow us to create native Event objects.
	     * @constructor
	     */
	    function ShimEvent(type, debug) {
	        this.type = type;
	        this.debug = debug;
	        this.bubbles = false;
	        this.cancelable = false;
	        this.eventPhase = 0;
	        this.timeStamp = new Date().valueOf();
	    }

	    var useNativeEvent = false;
	    try {
	        // Test whether we can use the browser's native Event class
	        var test = createNativeEvent('test type', 'test debug');
	        var target = {test: 'test target'};
	        test.target = target;

	        if (test instanceof Event && test.type === 'test type' && test.debug === 'test debug' && test.target === target) {
	            // Native events work as expected
	            useNativeEvent = true;
	        }
	    }
	    catch (e) {}

	    if (useNativeEvent) {
	        idbModules.Event = Event;
	        idbModules.IDBVersionChangeEvent = Event;
	        idbModules.util.createEvent = createNativeEvent;
	    }
	    else {
	        idbModules.Event = ShimEvent;
	        idbModules.IDBVersionChangeEvent = ShimEvent;
	        idbModules.util.createEvent = function(type, debug) {
	            return new ShimEvent(type, debug);
	        };
	    }
	}(idbModules));

	(function(idbModules) {
	    'use strict';

	    /**
	     * Creates a native DOMException, for browsers that support it
	     * @returns {DOMException}
	     */
	    function createNativeDOMException(name, message) {
	        var e = new DOMException.prototype.constructor(0, message);
	        e.name = name || 'DOMException';
	        e.message = message;
	        return e;
	    }

	    /**
	     * Creates a native DOMError, for browsers that support it
	     * @returns {DOMError}
	     */
	    function createNativeDOMError(name, message) {
	        name = name || 'DOMError';
	        var e = new DOMError(name, message);
	        e.name === name || (e.name = name);
	        e.message === message || (e.message = message);
	        return e;
	    }

	    /**
	     * Creates a generic Error object
	     * @returns {Error}
	     */
	    function createError(name, message) {
	        var e = new Error(message);
	        e.name = name || 'DOMException';
	        e.message = message;
	        return e;
	    }

	    /**
	     * Logs detailed error information to the console.
	     * @param {string} name
	     * @param {string} message
	     * @param {string|Error|null} error
	     */
	    idbModules.util.logError = function(name, message, error) {
	        if (idbModules.DEBUG) {
	            if (error && error.message) {
	                error = error.message;
	            }

	            var method = typeof(console.error) === 'function' ? 'error' : 'log';
	            console[method](name + ': ' + message + '. ' + (error || ''));
	            console.trace && console.trace();
	        }
	    };

	    /**
	     * Finds the error argument.  This is useful because some WebSQL callbacks
	     * pass the error as the first argument, and some pass it as the second argument.
	     * @param {array} args
	     * @returns {Error|DOMException|undefined}
	     */
	    idbModules.util.findError = function(args) {
	        var err;
	        if (args) {
	            if (args.length === 1) {
	                return args[0];
	            }
	            for (var i = 0; i < args.length; i++) {
	                var arg = args[i];
	                if (arg instanceof Error || arg instanceof DOMException) {
	                    return arg;
	                }
	                else if (arg && typeof arg.message === "string") {
	                    err = arg;
	                }
	            }
	        }
	        return err;
	    };

	    var test, useNativeDOMException = false, useNativeDOMError = false;

	    // Test whether we can use the browser's native DOMException class
	    try {
	        test = createNativeDOMException('test name', 'test message');
	        if (test instanceof DOMException && test.name === 'test name' && test.message === 'test message') {
	            // Native DOMException works as expected
	            useNativeDOMException = true;
	        }
	    }
	    catch (e) {}

	    // Test whether we can use the browser's native DOMError class
	    try {
	        test = createNativeDOMError('test name', 'test message');
	        if (test instanceof DOMError && test.name === 'test name' && test.message === 'test message') {
	            // Native DOMError works as expected
	            useNativeDOMError = true;
	        }
	    }
	    catch (e) {}

	    if (useNativeDOMException) {
	        idbModules.DOMException = DOMException;
	        idbModules.util.createDOMException = function(name, message, error) {
	            idbModules.util.logError(name, message, error);
	            return createNativeDOMException(name, message);
	        };
	    }
	    else {
	        idbModules.DOMException = Error;
	        idbModules.util.createDOMException = function(name, message, error) {
	            idbModules.util.logError(name, message, error);
	            return createError(name, message);
	        };
	    }

	    if (useNativeDOMError) {
	        idbModules.DOMError = DOMError;
	        idbModules.util.createDOMError = function(name, message, error) {
	            idbModules.util.logError(name, message, error);
	            return createNativeDOMError(name, message);
	        };
	    }
	    else {
	        idbModules.DOMError = Error;
	        idbModules.util.createDOMError = function(name, message, error) {
	            idbModules.util.logError(name, message, error);
	            return createError(name, message);
	        };
	    }
	}(idbModules));

	(function(idbModules){
	    'use strict';

	    /**
	     * The IDBRequest Object that is returns for all async calls
	     * http://dvcs.w3.org/hg/IndexedDB/raw-file/tip/Overview.html#request-api
	     */
	    function IDBRequest(){
	        this.onsuccess = this.onerror = this.result = this.error = this.source = this.transaction = null;
	        this.readyState = "pending";
	    }

	    /**
	     * The IDBOpenDBRequest called when a database is opened
	     */
	    function IDBOpenDBRequest(){
	        this.onblocked = this.onupgradeneeded = null;
	    }
	    IDBOpenDBRequest.prototype = new IDBRequest();
	    IDBOpenDBRequest.prototype.constructor = IDBOpenDBRequest;
	    
	    idbModules.IDBRequest = IDBRequest;
	    idbModules.IDBOpenDBRequest = IDBOpenDBRequest;
	    
	}(idbModules));

	(function(idbModules, undefined){
	    'use strict';

	    /**
	     * The IndexedDB KeyRange object
	     * http://dvcs.w3.org/hg/IndexedDB/raw-file/tip/Overview.html#dfn-key-range
	     * @param {Object} lower
	     * @param {Object} upper
	     * @param {Object} lowerOpen
	     * @param {Object} upperOpen
	     */
	    function IDBKeyRange(lower, upper, lowerOpen, upperOpen){
	        if (lower !== undefined) {
	            idbModules.Key.validate(lower);
	        }
	        if (upper !== undefined) {
	            idbModules.Key.validate(upper);
	        }

	        this.lower = lower;
	        this.upper = upper;
	        this.lowerOpen = !!lowerOpen;
	        this.upperOpen = !!upperOpen;
	    }

	    IDBKeyRange.only = function(value){
	        return new IDBKeyRange(value, value, false, false);
	    };

	    IDBKeyRange.lowerBound = function(value, open){
	        return new IDBKeyRange(value, undefined, open, undefined);
	    };
	    IDBKeyRange.upperBound = function(value, open){
	        return new IDBKeyRange(undefined, value, undefined, open);
	    };
	    IDBKeyRange.bound = function(lower, upper, lowerOpen, upperOpen){
	        return new IDBKeyRange(lower, upper, lowerOpen, upperOpen);
	    };

	    idbModules.IDBKeyRange = IDBKeyRange;

	}(idbModules));

	(function(idbModules, undefined){
	    'use strict';

	    /**
	     * The IndexedDB Cursor Object
	     * http://dvcs.w3.org/hg/IndexedDB/raw-file/tip/Overview.html#idl-def-IDBCursor
	     * @param {IDBKeyRange} range
	     * @param {string} direction
	     * @param {IDBObjectStore} store
	     * @param {IDBObjectStore|IDBIndex} source
	     * @param {string} keyColumnName
	     * @param {string} valueColumnName
	     * @param {boolean} count
	     */
	    function IDBCursor(range, direction, store, source, keyColumnName, valueColumnName, count){
	        // Calling openCursor on an index or objectstore with null is allowed but we treat it as undefined internally
	        if (range === null) {
	            range = undefined;
	        }
	        if (range !== undefined && !(range instanceof idbModules.IDBKeyRange)) {
	            range = new idbModules.IDBKeyRange(range, range, false, false);
	        }
	        store.transaction.__assertActive();
	        if (direction !== undefined && ["next", "prev", "nextunique", "prevunique"].indexOf(direction) === -1) {
	            throw new TypeError(direction + "is not a valid cursor direction");
	        }

	        this.source = source;
	        this.direction = direction || "next";
	        this.key = undefined;
	        this.primaryKey = undefined;
	        this.__store = store;
	        this.__range = range;
	        this.__req = new idbModules.IDBRequest();
	        this.__keyColumnName = keyColumnName;
	        this.__valueColumnName = valueColumnName;
	        this.__valueDecoder = valueColumnName === "value" ? idbModules.Sca : idbModules.Key;
	        this.__count = count;
	        this.__offset = -1; // Setting this to -1 as continue will set it to 0 anyway
	        this.__lastKeyContinued = undefined; // Used when continuing with a key
	        this.__multiEntryIndex = source instanceof idbModules.IDBIndex ? source.multiEntry : false;
	        this.__unique = this.direction.indexOf("unique") !== -1;

	        if (range !== undefined) {
	            // Encode the key range and cache the encoded values, so we don't have to re-encode them over and over
	            range.__lower = range.lower !== undefined && idbModules.Key.encode(range.lower, this.__multiEntryIndex);
	            range.__upper = range.upper !== undefined && idbModules.Key.encode(range.upper, this.__multiEntryIndex);
	        }

	        this["continue"]();
	    }

	    IDBCursor.prototype.__find = function (/* key, tx, success, error, recordsToLoad */) {
	        var args = Array.prototype.slice.call(arguments);
	        if (this.__multiEntryIndex) {
	            this.__findMultiEntry.apply(this, args);
	        } else {
	            this.__findBasic.apply(this, args);
	        }
	    };

	    IDBCursor.prototype.__findBasic = function (key, tx, success, error, recordsToLoad) {
	        recordsToLoad = recordsToLoad || 1;

	        var me = this;
	        var quotedKeyColumnName = idbModules.util.quote(me.__keyColumnName);
	        var sql = ["SELECT * FROM", idbModules.util.quote(me.__store.name)];
	        var sqlValues = [];
	        sql.push("WHERE", quotedKeyColumnName, "NOT NULL");
	        if (me.__range && (me.__range.lower !== undefined || me.__range.upper !== undefined )) {
	            sql.push("AND");
	            if (me.__range.lower !== undefined) {
	                sql.push(quotedKeyColumnName, (me.__range.lowerOpen ? ">" : ">="), "?");
	                sqlValues.push(me.__range.__lower);
	            }
	            (me.__range.lower !== undefined && me.__range.upper !== undefined) && sql.push("AND");
	            if (me.__range.upper !== undefined) {
	                sql.push(quotedKeyColumnName, (me.__range.upperOpen ? "<" : "<="), "?");
	                sqlValues.push(me.__range.__upper);
	            }
	        }
	        if (typeof key !== "undefined") {
	            me.__lastKeyContinued = key;
	            me.__offset = 0;
	        }
	        if (me.__lastKeyContinued !== undefined) {
	            sql.push("AND", quotedKeyColumnName, ">= ?");
	            idbModules.Key.validate(me.__lastKeyContinued);
	            sqlValues.push(idbModules.Key.encode(me.__lastKeyContinued));
	        }

	        // Determine the ORDER BY direction based on the cursor.
	        var direction = me.direction === 'prev' || me.direction === 'prevunique' ? 'DESC' : 'ASC';

	        if (!me.__count) {
	            sql.push("ORDER BY", quotedKeyColumnName, direction);
	            sql.push("LIMIT", recordsToLoad, "OFFSET", me.__offset);
	        }
	        sql = sql.join(" ");
	        idbModules.DEBUG && console.log(sql, sqlValues);

	        me.__prefetchedData = null;
	        me.__prefetchedIndex = 0;
	        tx.executeSql(sql, sqlValues, function (tx, data) {
	            if (me.__count) {
	                success(undefined, data.rows.length, undefined);
	            }
	            else if (data.rows.length > 1) {
	                me.__prefetchedData = data.rows;
	                me.__prefetchedIndex = 0;
	                idbModules.DEBUG && console.log("Preloaded " + me.__prefetchedData.length + " records for cursor");
	                me.__decode(data.rows.item(0), success);
	            }
	            else if (data.rows.length === 1) {
	                me.__decode(data.rows.item(0), success);
	            }
	            else {
	                idbModules.DEBUG && console.log("Reached end of cursors");
	                success(undefined, undefined, undefined);
	            }
	        }, function (tx, err) {
	            idbModules.DEBUG && console.log("Could not execute Cursor.continue", sql, sqlValues);
	            error(err);
	        });
	    };

	    IDBCursor.prototype.__findMultiEntry = function (key, tx, success, error) {
	        var me = this;

	        if (me.__prefetchedData && me.__prefetchedData.length === me.__prefetchedIndex) {
	            idbModules.DEBUG && console.log("Reached end of multiEntry cursor");
	            success(undefined, undefined, undefined);
	            return;
	        }

	        var quotedKeyColumnName = idbModules.util.quote(me.__keyColumnName);
	        var sql = ["SELECT * FROM", idbModules.util.quote(me.__store.name)];
	        var sqlValues = [];
	        sql.push("WHERE", quotedKeyColumnName, "NOT NULL");
	        if (me.__range && (me.__range.lower !== undefined && me.__range.upper !== undefined)) {
	            if (me.__range.upper.indexOf(me.__range.lower) === 0) {
	                sql.push("AND", quotedKeyColumnName, "LIKE ?");
	                sqlValues.push("%" + me.__range.__lower.slice(0, -1) + "%");
	            }
	        }
	        if (typeof key !== "undefined") {
	            me.__lastKeyContinued = key;
	            me.__offset = 0;
	        }
	        if (me.__lastKeyContinued !== undefined) {
	            sql.push("AND", quotedKeyColumnName, ">= ?");
	            idbModules.Key.validate(me.__lastKeyContinued);
	            sqlValues.push(idbModules.Key.encode(me.__lastKeyContinued));
	        }

	        // Determine the ORDER BY direction based on the cursor.
	        var direction = me.direction === 'prev' || me.direction === 'prevunique' ? 'DESC' : 'ASC';

	        if (!me.__count) {
	            sql.push("ORDER BY key", direction);
	        }
	        sql = sql.join(" ");
	        idbModules.DEBUG && console.log(sql, sqlValues);

	        me.__prefetchedData = null;
	        me.__prefetchedIndex = 0;
	        tx.executeSql(sql, sqlValues, function (tx, data) {
	            me.__multiEntryOffset = data.rows.length;

	            if (data.rows.length > 0) {
	                var rows = [];

	                for (var i = 0; i < data.rows.length; i++) {
	                    var rowItem = data.rows.item(i);
	                    var rowKey = idbModules.Key.decode(rowItem[me.__keyColumnName], true);
	                    var matches = idbModules.Key.findMultiEntryMatches(rowKey, me.__range);

	                    for (var j = 0; j < matches.length; j++) {
	                        var matchingKey = matches[j];
	                        var clone = {
	                            matchingKey: idbModules.Key.encode(matchingKey, true),
	                            key: rowItem.key
	                        };
	                        clone[me.__keyColumnName] = rowItem[me.__keyColumnName];
	                        clone[me.__valueColumnName] = rowItem[me.__valueColumnName];
	                        rows.push(clone);
	                    }
	                }

	                var reverse = me.direction.indexOf("prev") === 0;
	                rows.sort(function (a, b) {
	                    if (a.matchingKey.replace('[','z') < b.matchingKey.replace('[','z')) {
	                        return reverse ? 1 : -1;
	                    }
	                    if (a.matchingKey.replace('[','z') > b.matchingKey.replace('[','z')) {
	                        return reverse ? -1 : 1;
	                    }
	                    if (a.key < b.key) {
	                        return me.direction === "prev" ? 1 : -1;
	                    }
	                    if (a.key > b.key) {
	                        return me.direction === "prev" ? -1 : 1;
	                    }
	                    return 0;
	                });

	                me.__prefetchedData = {
	                    data: rows,
	                    length: rows.length,
	                    item: function (index) {
	                        return this.data[index];
	                    }
	                };
	                me.__prefetchedIndex = 0;

	                if (me.__count) {
	                    success(undefined, rows.length, undefined);
	                }
	                else if (rows.length > 1) {
	                    idbModules.DEBUG && console.log("Preloaded " + me.__prefetchedData.length + " records for multiEntry cursor");
	                    me.__decode(rows[0], success);
	                } else if (rows.length === 1) {
	                    idbModules.DEBUG && console.log("Reached end of multiEntry cursor");
	                    me.__decode(rows[0], success);
	                } else {
	                    idbModules.DEBUG && console.log("Reached end of multiEntry cursor");
	                    success(undefined, undefined, undefined);
	                }
	            }
	            else {
	                idbModules.DEBUG && console.log("Reached end of multiEntry cursor");
	                success(undefined, undefined, undefined);
	            }
	        }, function (tx, err) {
	            idbModules.DEBUG && console.log("Could not execute Cursor.continue", sql, sqlValues);
	            error(err);
	        });
	    };

	    /**
	     * Creates an "onsuccess" callback
	     * @private
	     */
	    IDBCursor.prototype.__onsuccess = function(success) {
	        var me = this;
	        return function(key, value, primaryKey) {
	            if (me.__count) {
	                success(value, me.__req);
	            }
	            else {
	                me.key = key === undefined ? null : key;
	                me.value = value === undefined ? null : value;
	                me.primaryKey = primaryKey === undefined ? null : primaryKey;
	                var result = key === undefined ? null : me;
	                success(result, me.__req);
	            }
	        };
	    };

	    IDBCursor.prototype.__decode = function (rowItem, callback) {
	        if (this.__multiEntryIndex && this.__unique) {
	            if (!this.__matchedKeys) {
	                this.__matchedKeys = {};
	            }
	            if (this.__matchedKeys[rowItem.matchingKey]) {
	                callback(undefined, undefined, undefined);
	                return;
	            }
	            this.__matchedKeys[rowItem.matchingKey] = true;
	        }
	        var key = idbModules.Key.decode(this.__multiEntryIndex ? rowItem.matchingKey : rowItem[this.__keyColumnName], this.__multiEntryIndex);
	        var val = this.__valueDecoder.decode(rowItem[this.__valueColumnName]);
	        var primaryKey = idbModules.Key.decode(rowItem.key);
	        callback(key, val, primaryKey);
	    };

	    IDBCursor.prototype["continue"] = function (key) {
	        var recordsToPreloadOnContinue = idbModules.cursorPreloadPackSize || 100;
	        var me = this;

	        this.__store.transaction.__pushToQueue(me.__req, function cursorContinue(tx, args, success, error) {
	            me.__offset++;

	            if (me.__prefetchedData) {
	                // We have pre-loaded data for the cursor
	                me.__prefetchedIndex++;
	                if (me.__prefetchedIndex < me.__prefetchedData.length) {
	                    me.__decode(me.__prefetchedData.item(me.__prefetchedIndex), me.__onsuccess(success));
	                    return;
	                }
	            }

	            // No pre-fetched data, do query
	            me.__find(key, tx, me.__onsuccess(success), error, recordsToPreloadOnContinue);
	        });
	    };

	    IDBCursor.prototype.advance = function(count){
	        if (count <= 0) {
	            throw idbModules.util.createDOMException("Type Error", "Count is invalid - 0 or negative", count);
	        }
	        var me = this;
	        this.__store.transaction.__pushToQueue(me.__req, function cursorAdvance(tx, args, success, error){
	            me.__offset += count;
	            me.__find(undefined, tx, me.__onsuccess(success), error);
	        });
	    };

	    IDBCursor.prototype.update = function(valueToUpdate){
	        var me = this;
	        me.__store.transaction.__assertWritable();
	        return me.__store.transaction.__addToTransactionQueue(function cursorUpdate(tx, args, success, error){
	            idbModules.Sca.encode(valueToUpdate, function(encoded) {
	                me.__find(undefined, tx, function(key, value, primaryKey){
	                    var store = me.__store;
	                    var params = [encoded];
	                    var sql = ["UPDATE", idbModules.util.quote(store.name), "SET value = ?"];
	                    idbModules.Key.validate(primaryKey);

	                    // Also correct the indexes in the table
	                    for (var i = 0; i < store.indexNames.length; i++) {
	                        var index = store.__indexes[store.indexNames[i]];
	                        var indexKey = idbModules.Key.getValue(valueToUpdate, index.keyPath);
	                        sql.push(",", idbModules.util.quote(index.name), "= ?");
	                        params.push(idbModules.Key.encode(indexKey, index.multiEntry));
	                    }

	                    sql.push("WHERE key = ?");
	                    params.push(idbModules.Key.encode(primaryKey));

	                    idbModules.DEBUG && console.log(sql.join(" "), encoded, key, primaryKey);
	                    tx.executeSql(sql.join(" "), params, function(tx, data){
	                        me.__prefetchedData = null;
	                        me.__prefetchedIndex = 0;
	                        if (data.rowsAffected === 1) {
	                            success(key);
	                        }
	                        else {
	                            error("No rows with key found" + key);
	                        }
	                    }, function(tx, data){
	                        error(data);
	                    });
	                }, error);
	            });
	        });
	    };

	    IDBCursor.prototype["delete"] = function(){
	        var me = this;
	        me.__store.transaction.__assertWritable();
	        return this.__store.transaction.__addToTransactionQueue(function cursorDelete(tx, args, success, error){
	            me.__find(undefined, tx, function(key, value, primaryKey){
	                var sql = "DELETE FROM  " + idbModules.util.quote(me.__store.name) + " WHERE key = ?";
	                idbModules.DEBUG && console.log(sql, key, primaryKey);
	                idbModules.Key.validate(primaryKey);
	                tx.executeSql(sql, [idbModules.Key.encode(primaryKey)], function(tx, data){
	                    me.__prefetchedData = null;
	                    me.__prefetchedIndex = 0;
	                    if (data.rowsAffected === 1) {
	                        // lower the offset or we will miss a row
	                        me.__offset--;
	                        success(undefined);
	                    }
	                    else {
	                        error("No rows with key found" + key);
	                    }
	                }, function(tx, data){
	                    error(data);
	                });
	            }, error);
	        });
	    };

	    idbModules.IDBCursor = IDBCursor;
	}(idbModules));

	(function(idbModules, undefined) {
	    'use strict';

	    /**
	     * IDB Index
	     * http://www.w3.org/TR/IndexedDB/#idl-def-IDBIndex
	     * @param {IDBObjectStore} store
	     * @param {IDBIndexProperties} indexProperties
	     * @constructor
	     */
	    function IDBIndex(store, indexProperties) {
	        this.objectStore = store;
	        this.name = indexProperties.columnName;
	        this.keyPath = indexProperties.keyPath;
	        this.multiEntry = indexProperties.optionalParams && indexProperties.optionalParams.multiEntry;
	        this.unique = indexProperties.optionalParams && indexProperties.optionalParams.unique;
	        this.__deleted = !!indexProperties.__deleted;
	    }

	    /**
	     * Clones an IDBIndex instance for a different IDBObjectStore instance.
	     * @param {IDBIndex} index
	     * @param {IDBObjectStore} store
	     * @protected
	     */
	    IDBIndex.__clone = function(index, store) {
	        return new IDBIndex(store, {
	            columnName: index.name,
	            keyPath: index.keyPath,
	            optionalParams: {
	                multiEntry: index.multiEntry,
	                unique: index.unique
	            }
	        });
	    };

	    /**
	     * Creates a new index on an object store.
	     * @param {IDBObjectStore} store
	     * @param {IDBIndex} index
	     * @returns {IDBIndex}
	     * @protected
	     */
	    IDBIndex.__createIndex = function(store, index) {
	        var columnExists = !!store.__indexes[index.name] && store.__indexes[index.name].__deleted;

	        // Add the index to the IDBObjectStore
	        store.__indexes[index.name] = index;
	        store.indexNames.push(index.name);

	        // Create the index in WebSQL
	        var transaction = store.transaction;
	        transaction.__addToTransactionQueue(function createIndex(tx, args, success, failure) {
	            function error(tx, err) {
	                failure(idbModules.util.createDOMException(0, "Could not create index \"" + index.name + "\"", err));
	            }

	            function applyIndex(tx) {
	                // Update the object store's index list
	                IDBIndex.__updateIndexList(store, tx, function() {
	                    // Add index entries for all existing records
	                    tx.executeSql("SELECT * FROM " + idbModules.util.quote(store.name), [], function(tx, data) {
	                        idbModules.DEBUG && console.log("Adding existing " + store.name + " records to the " + index.name + " index");
	                        addIndexEntry(0);

	                        function addIndexEntry(i) {
	                            if (i < data.rows.length) {
	                                try {
	                                    var value = idbModules.Sca.decode(data.rows.item(i).value);
	                                    var indexKey = idbModules.Key.getValue(value, index.keyPath);
	                                    indexKey = idbModules.Key.encode(indexKey, index.multiEntry);

	                                    tx.executeSql("UPDATE " + idbModules.util.quote(store.name) + " set " + idbModules.util.quote(index.name) + " = ? where key = ?", [indexKey, data.rows.item(i).key], function(tx, data) {
	                                        addIndexEntry(i + 1);
	                                    }, error);
	                                }
	                                catch (e) {
	                                    // Not a valid value to insert into index, so just continue
	                                    addIndexEntry(i + 1);
	                                }
	                            }
	                            else {
	                                success(store);
	                            }
	                        }
	                    }, error);
	                }, error);
	            }

	            if (columnExists) {
	                // For a previously existing index, just update the index entries in the existing column
	                applyIndex(tx);
	            }
	            else {
	                // For a new index, add a new column to the object store, then apply the index
	                var sql = ["ALTER TABLE", idbModules.util.quote(store.name), "ADD", idbModules.util.quote(index.name), "BLOB"].join(" ");
	                idbModules.DEBUG && console.log(sql);
	                tx.executeSql(sql, [], applyIndex, error);
	            }
	        });
	    };

	    /**
	     * Deletes an index from an object store.
	     * @param {IDBObjectStore} store
	     * @param {IDBIndex} index
	     * @protected
	     */
	    IDBIndex.__deleteIndex = function(store, index) {
	        // Remove the index from the IDBObjectStore
	        store.__indexes[index.name].__deleted = true;
	        store.indexNames.splice(store.indexNames.indexOf(index.name), 1);

	        // Remove the index in WebSQL
	        var transaction = store.transaction;
	        transaction.__addToTransactionQueue(function createIndex(tx, args, success, failure) {
	            function error(tx, err) {
	                failure(idbModules.util.createDOMException(0, "Could not delete index \"" + index.name + "\"", err));
	            }

	            // Update the object store's index list
	            IDBIndex.__updateIndexList(store, tx, success, error);
	        });
	    };

	    /**
	     * Updates index list for the given object store.
	     * @param {IDBObjectStore} store
	     * @param {object} tx
	     * @param {function} success
	     * @param {function} failure
	     */
	    IDBIndex.__updateIndexList = function(store, tx, success, failure) {
	        var indexList = {};
	        for (var i = 0; i < store.indexNames.length; i++) {
	            var idx = store.__indexes[store.indexNames[i]];
	            /** @type {IDBIndexProperties} **/
	            indexList[idx.name] = {
	                columnName: idx.name,
	                keyPath: idx.keyPath,
	                optionalParams: {
	                    unique: idx.unique,
	                    multiEntry: idx.multiEntry
	                },
	                deleted: !!idx.deleted
	            };
	        }

	        idbModules.DEBUG && console.log("Updating the index list for " + store.name, indexList);
	        tx.executeSql("UPDATE __sys__ set indexList = ? where name = ?", [JSON.stringify(indexList), store.name], function() {
	            success(store);
	        }, failure);
	    };

	    /**
	     * Retrieves index data for the given key
	     * @param {*|IDBKeyRange} key
	     * @param {string} opType
	     * @returns {IDBRequest}
	     * @private
	     */
	    IDBIndex.prototype.__fetchIndexData = function(key, opType) {
	        var me = this;
	        var hasKey, encodedKey;

	        // key is optional
	        if (arguments.length === 1) {
	            opType = key;
	            hasKey = false;
	        }
	        else {
	            idbModules.Key.validate(key);
	            encodedKey = idbModules.Key.encode(key, me.multiEntry);
	            hasKey = true;
	        }

	        return me.objectStore.transaction.__addToTransactionQueue(function fetchIndexData(tx, args, success, error) {
	            var sql = ["SELECT * FROM", idbModules.util.quote(me.objectStore.name), "WHERE", idbModules.util.quote(me.name), "NOT NULL"];
	            var sqlValues = [];
	            if (hasKey) {
	                if (me.multiEntry) {
	                    sql.push("AND", idbModules.util.quote(me.name), "LIKE ?");
	                    sqlValues.push("%" + encodedKey + "%");
	                }
	                else {
	                    sql.push("AND", idbModules.util.quote(me.name), "= ?");
	                    sqlValues.push(encodedKey);
	                }
	            }
	            idbModules.DEBUG && console.log("Trying to fetch data for Index", sql.join(" "), sqlValues);
	            tx.executeSql(sql.join(" "), sqlValues, function(tx, data) {
	                var recordCount = 0, record = null;
	                if (me.multiEntry) {
	                    for (var i = 0; i < data.rows.length; i++) {
	                        var row = data.rows.item(i);
	                        var rowKey = idbModules.Key.decode(row[me.name]);
	                        if (hasKey && idbModules.Key.isMultiEntryMatch(encodedKey, row[me.name])) {
	                            recordCount++;
	                            record = record || row;
	                        }
	                        else if (!hasKey && rowKey !== undefined) {
	                            recordCount = recordCount + (rowKey instanceof Array ? rowKey.length : 1);
	                            record = record || row;
	                        }
	                    }
	                }
	                else {
	                    recordCount = data.rows.length;
	                    record = recordCount && data.rows.item(0);
	                }

	                if (opType === "count") {
	                    success(recordCount);
	                }
	                else if (recordCount === 0) {
	                    success(undefined);
	                }
	                else if (opType === "key") {
	                    success(idbModules.Key.decode(record.key));
	                }
	                else { // when opType is value
	                    success(idbModules.Sca.decode(record.value));
	                }
	            }, error);
	        });
	    };

	    /**
	     * Opens a cursor over the given key range.
	     * @param {IDBKeyRange} range
	     * @param {string} direction
	     * @returns {IDBRequest}
	     */
	    IDBIndex.prototype.openCursor = function(range, direction) {
	        return new idbModules.IDBCursor(range, direction, this.objectStore, this, this.name, "value").__req;
	    };

	    /**
	     * Opens a cursor over the given key range.  The cursor only includes key values, not data.
	     * @param {IDBKeyRange} range
	     * @param {string} direction
	     * @returns {IDBRequest}
	     */
	    IDBIndex.prototype.openKeyCursor = function(range, direction) {
	        return new idbModules.IDBCursor(range, direction, this.objectStore, this, this.name, "key").__req;
	    };

	    IDBIndex.prototype.get = function(key) {
	        if (arguments.length === 0) {
	            throw new TypeError("No key was specified");
	        }

	        return this.__fetchIndexData(key, "value");
	    };

	    IDBIndex.prototype.getKey = function(key) {
	        if (arguments.length === 0) {
	            throw new TypeError("No key was specified");
	        }

	        return this.__fetchIndexData(key, "key");
	    };

	    IDBIndex.prototype.count = function(key) {
	        // key is optional
	        if (key === undefined) {
	            return this.__fetchIndexData("count");
	        }
	        else if (key instanceof idbModules.IDBKeyRange) {
	            return new idbModules.IDBCursor(key, "next", this.objectStore, this, this.name, "value", true).__req;
	        }
	        else {
	            return this.__fetchIndexData(key, "count");
	        }
	    };

	    idbModules.IDBIndex = IDBIndex;
	}(idbModules));

	(function(idbModules) {
	    'use strict';

	    /**
	     * IndexedDB Object Store
	     * http://dvcs.w3.org/hg/IndexedDB/raw-file/tip/Overview.html#idl-def-IDBObjectStore
	     * @param {IDBObjectStoreProperties} storeProperties
	     * @param {IDBTransaction} transaction
	     * @constructor
	     */
	    function IDBObjectStore(storeProperties, transaction) {
	        this.name = storeProperties.name;
	        this.keyPath = JSON.parse(storeProperties.keyPath);
	        this.transaction = transaction;

	        // autoInc is numeric (0/1) on WinPhone
	        this.autoIncrement = typeof storeProperties.autoInc === "string" ? storeProperties.autoInc === "true" : !!storeProperties.autoInc;

	        this.__indexes = {};
	        this.indexNames = new idbModules.util.StringList();
	        var indexList = JSON.parse(storeProperties.indexList);
	        for (var indexName in indexList) {
	            if (indexList.hasOwnProperty(indexName)) {
	                var index = new idbModules.IDBIndex(this, indexList[indexName]);
	                this.__indexes[index.name] = index;
	                if (!index.__deleted) {
	                    this.indexNames.push(index.name);
	                }
	            }
	        }
	    }

	    /**
	     * Clones an IDBObjectStore instance for a different IDBTransaction instance.
	     * @param {IDBObjectStore} store
	     * @param {IDBTransaction} transaction
	     * @protected
	     */
	    IDBObjectStore.__clone = function(store, transaction) {
	        var newStore = new IDBObjectStore({
	            name: store.name,
	            keyPath: JSON.stringify(store.keyPath),
	            autoInc: JSON.stringify(store.autoIncrement),
	            indexList: "{}"
	        }, transaction);
	        newStore.__indexes = store.__indexes;
	        newStore.indexNames = store.indexNames;
	        return newStore;
	    };

	    /**
	     * Creates a new object store in the database.
	     * @param {IDBDatabase} db
	     * @param {IDBObjectStore} store
	     * @protected
	     */
	    IDBObjectStore.__createObjectStore = function(db, store) {
	        // Add the object store to the IDBDatabase
	        db.__objectStores[store.name] = store;
	        db.objectStoreNames.push(store.name);

	        // Add the object store to WebSQL
	        var transaction = db.__versionTransaction;
	        idbModules.IDBTransaction.__assertVersionChange(transaction);
	        transaction.__addToTransactionQueue(function createObjectStore(tx, args, success, failure) {
	            function error(tx, err) {
	                throw idbModules.util.createDOMException(0, "Could not create object store \"" + store.name + "\"", err);
	            }

	            //key INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE
	            var sql = ["CREATE TABLE", idbModules.util.quote(store.name), "(key BLOB", store.autoIncrement ? "UNIQUE, inc INTEGER PRIMARY KEY AUTOINCREMENT" : "PRIMARY KEY", ", value BLOB)"].join(" ");
	            idbModules.DEBUG && console.log(sql);
	            tx.executeSql(sql, [], function(tx, data) {
	                tx.executeSql("INSERT INTO __sys__ VALUES (?,?,?,?)", [store.name, JSON.stringify(store.keyPath), store.autoIncrement, "{}"], function() {
	                    success(store);
	                }, error);
	            }, error);
	        });
	    };

	    /**
	     * Deletes an object store from the database.
	     * @param {IDBDatabase} db
	     * @param {IDBObjectStore} store
	     * @protected
	     */
	    IDBObjectStore.__deleteObjectStore = function(db, store) {
	        // Remove the object store from the IDBDatabase
	        db.__objectStores[store.name] = undefined;
	        db.objectStoreNames.splice(db.objectStoreNames.indexOf(store.name), 1);

	        // Remove the object store from WebSQL
	        var transaction = db.__versionTransaction;
	        idbModules.IDBTransaction.__assertVersionChange(transaction);
	        transaction.__addToTransactionQueue(function deleteObjectStore(tx, args, success, failure) {
	            function error(tx, err) {
	                failure(idbModules.util.createDOMException(0, "Could not delete ObjectStore", err));
	            }

	            tx.executeSql("SELECT * FROM __sys__ where name = ?", [store.name], function(tx, data) {
	                if (data.rows.length > 0) {
	                    tx.executeSql("DROP TABLE " + idbModules.util.quote(store.name), [], function() {
	                        tx.executeSql("DELETE FROM __sys__ WHERE name = ?", [store.name], function() {
	                            success();
	                        }, error);
	                    }, error);
	                }
	            });
	        });
	    };

	    /**
	     * Determines whether the given inline or out-of-line key is valid, according to the object store's schema.
	     * @param {*} value     Used for inline keys
	     * @param {*} key       Used for out-of-line keys
	     * @private
	     */
	    IDBObjectStore.prototype.__validateKey = function(value, key) {
	        if (this.keyPath) {
	            if (typeof key !== "undefined") {
	                throw idbModules.util.createDOMException("DataError", "The object store uses in-line keys and the key parameter was provided", this);
	            }
	            else if (value && typeof value === "object") {
	                key = idbModules.Key.getValue(value, this.keyPath);
	                if (key === undefined) {
	                    if (this.autoIncrement) {
	                        // A key will be generated
	                        return;
	                    }
	                    else {
	                        throw idbModules.util.createDOMException("DataError", "Could not eval key from keyPath");
	                    }
	                }
	            }
	            else {
	                throw idbModules.util.createDOMException("DataError", "KeyPath was specified, but value was not an object");
	            }
	        }
	        else {
	            if (typeof key === "undefined") {
	                if (this.autoIncrement) {
	                    // A key will be generated
	                    return;
	                }
	                else {
	                    throw idbModules.util.createDOMException("DataError", "The object store uses out-of-line keys and has no key generator and the key parameter was not provided. ", this);
	                }
	            }
	        }

	        idbModules.Key.validate(key);
	    };

	    /**
	     * From the store properties and object, extracts the value for the key in hte object Store
	     * If the table has auto increment, get the next in sequence
	     * @param {Object} tx
	     * @param {Object} value
	     * @param {Object} key
	     * @param {function} success
	     * @param {function} failure
	     */
	    IDBObjectStore.prototype.__deriveKey = function(tx, value, key, success, failure) {
	        var me = this;

	        function getNextAutoIncKey(callback) {
	            tx.executeSql("SELECT * FROM sqlite_sequence where name like ?", [me.name], function(tx, data) {
	                if (data.rows.length !== 1) {
	                    callback(1);
	                }
	                else {
	                    callback(data.rows.item(0).seq + 1);
	                }
	            }, function(tx, error) {
	                failure(idbModules.util.createDOMException("DataError", "Could not get the auto increment value for key", error));
	            });
	        }

	        if (me.keyPath) {
	            var primaryKey = idbModules.Key.getValue(value, me.keyPath);
	            if (primaryKey === undefined && me.autoIncrement) {
	                getNextAutoIncKey(function(primaryKey) {
	                    try {
	                        // Update the value with the new key
	                        idbModules.Key.setValue(value, me.keyPath, primaryKey);
	                        success(primaryKey);
	                    }
	                    catch (e) {
	                        failure(idbModules.util.createDOMException("DataError", "Could not assign a generated value to the keyPath", e));
	                    }
	                });
	            }
	            else {
	                success(primaryKey);
	            }
	        }
	        else {
	            if (typeof key === "undefined" && me.autoIncrement) {
	                // Looks like this has autoInc, so lets get the next in sequence and return that.
	                getNextAutoIncKey(success);
	            }
	            else {
	                success(key);
	            }
	        }
	    };

	    IDBObjectStore.prototype.__insertData = function(tx, encoded, value, primaryKey, success, error) {
	        try {
	            var paramMap = {};
	            if (typeof primaryKey !== "undefined") {
	                idbModules.Key.validate(primaryKey);
	                paramMap.key = idbModules.Key.encode(primaryKey);
	            }
	            for (var i = 0; i < this.indexNames.length; i++) {
	                var index = this.__indexes[this.indexNames[i]];
	                paramMap[index.name] = idbModules.Key.encode(idbModules.Key.getValue(value, index.keyPath), index.multiEntry);
	            }
	            var sqlStart = ["INSERT INTO ", idbModules.util.quote(this.name), "("];
	            var sqlEnd = [" VALUES ("];
	            var sqlValues = [];
	            for (var key in paramMap) {
	                sqlStart.push(idbModules.util.quote(key) + ",");
	                sqlEnd.push("?,");
	                sqlValues.push(paramMap[key]);
	            }
	            // removing the trailing comma
	            sqlStart.push("value )");
	            sqlEnd.push("?)");
	            sqlValues.push(encoded);

	            var sql = sqlStart.join(" ") + sqlEnd.join(" ");

	            idbModules.DEBUG && console.log("SQL for adding", sql, sqlValues);
	            tx.executeSql(sql, sqlValues, function(tx, data) {
	                idbModules.Sca.encode(primaryKey, function(primaryKey) {
	                    primaryKey = idbModules.Sca.decode(primaryKey);
	                    success(primaryKey);
	                });
	            }, function(tx, err) {
	                error(idbModules.util.createDOMError("ConstraintError", err.message, err));
	            });
	        }
	        catch (e) {
	            error(e);
	        }
	    };

	    IDBObjectStore.prototype.add = function(value, key) {
	        var me = this;
	        if (arguments.length === 0) {
	            throw new TypeError("No value was specified");
	        }
	        this.__validateKey(value, key);
	        me.transaction.__assertWritable();

	        var request = me.transaction.__createRequest();
	        me.transaction.__pushToQueue(request, function objectStoreAdd(tx, args, success, error) {
	            me.__deriveKey(tx, value, key, function(primaryKey) {
	                idbModules.Sca.encode(value, function(encoded) {
	                    me.__insertData(tx, encoded, value, primaryKey, success, error);
	                });
	            }, error);
	        });
	        return request;
	    };

	    IDBObjectStore.prototype.put = function(value, key) {
	        var me = this;
	        if (arguments.length === 0) {
	            throw new TypeError("No value was specified");
	        }
	        this.__validateKey(value, key);
	        me.transaction.__assertWritable();

	        var request = me.transaction.__createRequest();
	        me.transaction.__pushToQueue(request, function objectStorePut(tx, args, success, error) {
	            me.__deriveKey(tx, value, key, function(primaryKey) {
	                idbModules.Sca.encode(value, function(encoded) {
	                    // First try to delete if the record exists
	                    idbModules.Key.validate(primaryKey);
	                    var sql = "DELETE FROM " + idbModules.util.quote(me.name) + " where key = ?";
	                    tx.executeSql(sql, [idbModules.Key.encode(primaryKey)], function(tx, data) {
	                        idbModules.DEBUG && console.log("Did the row with the", primaryKey, "exist? ", data.rowsAffected);
	                        me.__insertData(tx, encoded, value, primaryKey, success, error);
	                    }, function(tx, err) {
	                        error(err);
	                    });
	                });
	            }, error);
	        });
	        return request;
	    };

	    IDBObjectStore.prototype.get = function(key) {
	        // TODO Key should also be a key range
	        var me = this;

	        if (arguments.length === 0) {
	            throw new TypeError("No key was specified");
	        }

	        idbModules.Key.validate(key);
	        var primaryKey = idbModules.Key.encode(key);
	        return me.transaction.__addToTransactionQueue(function objectStoreGet(tx, args, success, error) {
	            idbModules.DEBUG && console.log("Fetching", me.name, primaryKey);
	            tx.executeSql("SELECT * FROM " + idbModules.util.quote(me.name) + " where key = ?", [primaryKey], function(tx, data) {
	                idbModules.DEBUG && console.log("Fetched data", data);
	                var value;
	                try {
	                    // Opera can't deal with the try-catch here.
	                    if (0 === data.rows.length) {
	                        return success();
	                    }

	                    value = idbModules.Sca.decode(data.rows.item(0).value);
	                }
	                catch (e) {
	                    // If no result is returned, or error occurs when parsing JSON
	                    idbModules.DEBUG && console.log(e);
	                }
	                success(value);
	            }, function(tx, err) {
	                error(err);
	            });
	        });
	    };

	    IDBObjectStore.prototype["delete"] = function(key) {
	        var me = this;

	        if (arguments.length === 0) {
	            throw new TypeError("No key was specified");
	        }

	        me.transaction.__assertWritable();
	        idbModules.Key.validate(key);
	        var primaryKey = idbModules.Key.encode(key);
	        // TODO key should also support key ranges
	        return me.transaction.__addToTransactionQueue(function objectStoreDelete(tx, args, success, error) {
	            idbModules.DEBUG && console.log("Fetching", me.name, primaryKey);
	            tx.executeSql("DELETE FROM " + idbModules.util.quote(me.name) + " where key = ?", [primaryKey], function(tx, data) {
	                idbModules.DEBUG && console.log("Deleted from database", data.rowsAffected);
	                success();
	            }, function(tx, err) {
	                error(err);
	            });
	        });
	    };

	    IDBObjectStore.prototype.clear = function() {
	        var me = this;
	        me.transaction.__assertWritable();
	        return me.transaction.__addToTransactionQueue(function objectStoreClear(tx, args, success, error) {
	            tx.executeSql("DELETE FROM " + idbModules.util.quote(me.name), [], function(tx, data) {
	                idbModules.DEBUG && console.log("Cleared all records from database", data.rowsAffected);
	                success();
	            }, function(tx, err) {
	                error(err);
	            });
	        });
	    };

	    IDBObjectStore.prototype.count = function(key) {
	        if (key instanceof idbModules.IDBKeyRange) {
	            return new idbModules.IDBCursor(key, "next", this, this, "key", "value", true).__req;
	        }
	        else {
	            var me = this;
	            var hasKey = false;

	            // key is optional
	            if (key !== undefined) {
	                hasKey = true;
	                idbModules.Key.validate(key);
	            }

	            return me.transaction.__addToTransactionQueue(function objectStoreCount(tx, args, success, error) {
	                var sql = "SELECT * FROM " + idbModules.util.quote(me.name) + (hasKey ? " WHERE key = ?" : "");
	                var sqlValues = [];
	                hasKey && sqlValues.push(idbModules.Key.encode(key));
	                tx.executeSql(sql, sqlValues, function(tx, data) {
	                    success(data.rows.length);
	                }, function(tx, err) {
	                    error(err);
	                });
	            });
	        }
	    };

	    IDBObjectStore.prototype.openCursor = function(range, direction) {
	        return new idbModules.IDBCursor(range, direction, this, this, "key", "value").__req;
	    };

	    IDBObjectStore.prototype.index = function(indexName) {
	        if (arguments.length === 0) {
	            throw new TypeError("No index name was specified");
	        }
	        var index = this.__indexes[indexName];
	        if (!index) {
	            throw idbModules.util.createDOMException("NotFoundError", "Index \"" + indexName + "\" does not exist on " + this.name);
	        }

	        return idbModules.IDBIndex.__clone(index, this);
	    };

	    /**
	     * Creates a new index on the object store.
	     * @param {string} indexName
	     * @param {string} keyPath
	     * @param {object} optionalParameters
	     * @returns {IDBIndex}
	     */
	    IDBObjectStore.prototype.createIndex = function(indexName, keyPath, optionalParameters) {
	        if (arguments.length === 0) {
	            throw new TypeError("No index name was specified");
	        }
	        if (arguments.length === 1) {
	            throw new TypeError("No key path was specified");
	        }
	        if (keyPath instanceof Array && optionalParameters && optionalParameters.multiEntry) {
	            throw idbModules.util.createDOMException("InvalidAccessError", "The keyPath argument was an array and the multiEntry option is true.");
	        }
	        if (this.__indexes[indexName] && !this.__indexes[indexName].__deleted) {
	            throw idbModules.util.createDOMException("ConstraintError", "Index \"" + indexName + "\" already exists on " + this.name);
	        }

	        this.transaction.__assertVersionChange();

	        optionalParameters = optionalParameters || {};
	        /** @name IDBIndexProperties **/
	        var indexProperties = {
	            columnName: indexName,
	            keyPath: keyPath,
	            optionalParams: {
	                unique: !!optionalParameters.unique,
	                multiEntry: !!optionalParameters.multiEntry
	            }
	        };
	        var index = new idbModules.IDBIndex(this, indexProperties);
	        idbModules.IDBIndex.__createIndex(this, index);
	        return index;
	    };

	    IDBObjectStore.prototype.deleteIndex = function(indexName) {
	        if (arguments.length === 0) {
	            throw new TypeError("No index name was specified");
	        }
	        var index = this.__indexes[indexName];
	        if (!index) {
	            throw idbModules.util.createDOMException("NotFoundError", "Index \"" + indexName + "\" does not exist on " + this.name);
	        }
	        this.transaction.__assertVersionChange();

	        idbModules.IDBIndex.__deleteIndex(this, index);
	    };

	    idbModules.IDBObjectStore = IDBObjectStore;
	}(idbModules));

	(function(idbModules) {
	    'use strict';

	    var uniqueID = 0;

	    /**
	     * The IndexedDB Transaction
	     * http://dvcs.w3.org/hg/IndexedDB/raw-file/tip/Overview.html#idl-def-IDBTransaction
	     * @param {IDBDatabase} db
	     * @param {string[]} storeNames
	     * @param {string} mode
	     * @constructor
	     */
	    function IDBTransaction(db, storeNames, mode) {
	        this.__id = ++uniqueID; // for debugging simultaneous transactions
	        this.__active = true;
	        this.__running = false;
	        this.__errored = false;
	        this.__requests = [];
	        this.__storeNames = storeNames;
	        this.mode = mode;
	        this.db = db;
	        this.error = null;
	        this.onabort = this.onerror = this.oncomplete = null;

	        // Kick off the transaction as soon as all synchronous code is done.
	        var me = this;
	        setTimeout(function() { me.__executeRequests(); }, 0);
	    }

	    IDBTransaction.prototype.__executeRequests = function() {
	        if (this.__running) {
	            idbModules.DEBUG && console.log("Looks like the request set is already running", this.mode);
	            return;
	        }

	        this.__running = true;
	        var me = this;

	        me.db.__db.transaction(function executeRequests(tx) {
	                me.__tx = tx;
	                var q = null, i = 0;

	                function success(result, req) {
	                    if (req) {
	                        q.req = req;// Need to do this in case of cursors
	                    }
	                    q.req.readyState = "done";
	                    q.req.result = result;
	                    delete q.req.error;
	                    var e = idbModules.util.createEvent("success");
	                    idbModules.util.callback("onsuccess", q.req, e);
	                    i++;
	                    executeNextRequest();
	                }

	                function error(tx, err) {
	                    err = idbModules.util.findError(arguments);
	                    try {
	                        // Fire an error event for the current IDBRequest
	                        q.req.readyState = "done";
	                        q.req.error = err || "DOMError";
	                        q.req.result = undefined;
	                        var e = idbModules.util.createEvent("error", err);
	                        idbModules.util.callback("onerror", q.req, e);
	                    }
	                    finally {
	                        // Fire an error event for the transaction
	                        transactionError(err);
	                    }
	                }

	                function executeNextRequest() {
	                    if (i >= me.__requests.length) {
	                        // All requests in the transaction are done
	                        me.__requests = [];
	                        if (me.__active) {
	                            me.__active = false;
	                            transactionFinished();
	                        }
	                    }
	                    else {
	                        try {
	                            q = me.__requests[i];
	                            q.op(tx, q.args, success, error);
	                        }
	                        catch (e) {
	                            error(e);
	                        }
	                    }
	                }

	                executeNextRequest();
	            },

	            function webSqlError(err) {
	                transactionError(err);
	            }
	        );

	        function transactionError(err) {
	            idbModules.util.logError("Error", "An error occurred in a transaction", err);

	            if (me.__errored) {
	                // We've already called "onerror", "onabort", or thrown, so don't do it again.
	                return;
	            }

	            me.__errored = true;

	            if (!me.__active) {
	                // The transaction has already completed, so we can't call "onerror" or "onabort".
	                // So throw the error instead.
	                throw err;
	            }

	            try {
	                me.error = err;
	                var evt = idbModules.util.createEvent("error");
	                idbModules.util.callback("onerror", me, evt);
	                idbModules.util.callback("onerror", me.db, evt);
	            }
	            finally {
	                me.abort();
	            }
	        }

	        function transactionFinished() {
	            idbModules.DEBUG && console.log("Transaction completed");
	            var evt = idbModules.util.createEvent("complete");
	            try {
	                idbModules.util.callback("oncomplete", me, evt);
	                idbModules.util.callback("__oncomplete", me, evt);
	            }
	            catch (e) {
	                // An error occurred in the "oncomplete" handler.
	                // It's too late to call "onerror" or "onabort". Throw a global error instead.
	                // (this may seem odd/bad, but it's how all native IndexedDB implementations work)
	                me.__errored = true;
	                throw e;
	            }
	        }
	    };

	    /**
	     * Creates a new IDBRequest for the transaction.
	     * NOTE: The transaction is not queued util you call {@link IDBTransaction#__pushToQueue}
	     * @returns {IDBRequest}
	     * @protected
	     */
	    IDBTransaction.prototype.__createRequest = function() {
	        var request = new idbModules.IDBRequest();
	        request.source = this.db;
	        request.transaction = this;
	        return request;
	    };

	    /**
	     * Adds a callback function to the transaction queue
	     * @param {function} callback
	     * @param {*} args
	     * @returns {IDBRequest}
	     * @protected
	     */
	    IDBTransaction.prototype.__addToTransactionQueue = function(callback, args) {
	        var request = this.__createRequest();
	        this.__pushToQueue(request, callback, args);
	        return request;
	    };

	    /**
	     * Adds an IDBRequest to the transaction queue
	     * @param {IDBRequest} request
	     * @param {function} callback
	     * @param {*} args
	     * @protected
	     */
	    IDBTransaction.prototype.__pushToQueue = function(request, callback, args) {
	        this.__assertActive();
	        this.__requests.push({
	            "op": callback,
	            "args": args,
	            "req": request
	        });
	    };

	    IDBTransaction.prototype.__assertActive = function() {
	        if (!this.__active) {
	            throw idbModules.util.createDOMException("TransactionInactiveError", "A request was placed against a transaction which is currently not active, or which is finished");
	        }
	    };

	    IDBTransaction.prototype.__assertWritable = function() {
	        if (this.mode === IDBTransaction.READ_ONLY) {
	            throw idbModules.util.createDOMException("ReadOnlyError", "The transaction is read only");
	        }
	    };

	    IDBTransaction.prototype.__assertVersionChange = function() {
	        IDBTransaction.__assertVersionChange(this);
	    };

	    IDBTransaction.__assertVersionChange = function(tx) {
	        if (!tx || tx.mode !== IDBTransaction.VERSION_CHANGE) {
	            throw idbModules.util.createDOMException("InvalidStateError", "Not a version transaction");
	        }
	    };

	    /**
	     * Returns the specified object store.
	     * @param {string} objectStoreName
	     * @returns {IDBObjectStore}
	     */
	    IDBTransaction.prototype.objectStore = function(objectStoreName) {
	        if (arguments.length === 0) {
	            throw new TypeError("No object store name was specified");
	        }
	        if (!this.__active) {
	            throw idbModules.util.createDOMException("InvalidStateError", "A request was placed against a transaction which is currently not active, or which is finished");
	        }
	        if (this.__storeNames.indexOf(objectStoreName) === -1 && this.mode !== IDBTransaction.VERSION_CHANGE) {
	            throw idbModules.util.createDOMException("NotFoundError", objectStoreName + " is not participating in this transaction");
	        }
	        var store = this.db.__objectStores[objectStoreName];
	        if (!store) {
	            throw idbModules.util.createDOMException("NotFoundError", objectStoreName + " does not exist in " + this.db.name);
	        }

	        return idbModules.IDBObjectStore.__clone(store, this);
	    };

	    IDBTransaction.prototype.abort = function() {
	        var me = this;
	        idbModules.DEBUG && console.log("The transaction was aborted", me);
	        me.__active = false;
	        var evt = idbModules.util.createEvent("abort");

	        // Fire the "onabort" event asynchronously, so errors don't bubble
	        setTimeout(function() {
	            idbModules.util.callback("onabort", me, evt);
	        }, 0);
	    };

	    IDBTransaction.READ_ONLY = "readonly";
	    IDBTransaction.READ_WRITE = "readwrite";
	    IDBTransaction.VERSION_CHANGE = "versionchange";

	    idbModules.IDBTransaction = IDBTransaction;
	}(idbModules));

	(function(idbModules){
	    'use strict';

	    /**
	     * IDB Database Object
	     * http://dvcs.w3.org/hg/IndexedDB/raw-file/tip/Overview.html#database-interface
	     * @constructor
	     */
	    function IDBDatabase(db, name, version, storeProperties){
	        this.__db = db;
	        this.__closed = false;
	        this.version = version;
	        this.name = name;
	        this.onabort = this.onerror = this.onversionchange = null;

	        this.__objectStores = {};
	        this.objectStoreNames = new idbModules.util.StringList();
	        for (var i = 0; i < storeProperties.rows.length; i++) {
	            var store = new idbModules.IDBObjectStore(storeProperties.rows.item(i));
	            this.__objectStores[store.name] = store;
	            this.objectStoreNames.push(store.name);
	        }
	    }

	    /**
	     * Creates a new object store.
	     * @param {string} storeName
	     * @param {object} [createOptions]
	     * @returns {IDBObjectStore}
	     */
	    IDBDatabase.prototype.createObjectStore = function(storeName, createOptions){
	        if (arguments.length === 0) {
	            throw new TypeError("No object store name was specified");
	        }
	        if (this.__objectStores[storeName]) {
	            throw idbModules.util.createDOMException("ConstraintError", "Object store \"" + storeName + "\" already exists in " + this.name);
	        }
	        this.__versionTransaction.__assertVersionChange();

	        createOptions = createOptions || {};
	        /** @name IDBObjectStoreProperties **/
	        var storeProperties = {
	            name: storeName,
	            keyPath: JSON.stringify(createOptions.keyPath || null),
	            autoInc: JSON.stringify(createOptions.autoIncrement),
	            indexList: "{}"
	        };
	        var store = new idbModules.IDBObjectStore(storeProperties, this.__versionTransaction);
	        idbModules.IDBObjectStore.__createObjectStore(this, store);
	        return store;
	    };

	    /**
	     * Deletes an object store.
	     * @param {string} storeName
	     */
	    IDBDatabase.prototype.deleteObjectStore = function(storeName){
	        if (arguments.length === 0) {
	            throw new TypeError("No object store name was specified");
	        }
	        var store = this.__objectStores[storeName];
	        if (!store) {
	            throw idbModules.util.createDOMException("NotFoundError", "Object store \"" + storeName + "\" does not exist in " + this.name);
	        }
	        this.__versionTransaction.__assertVersionChange();

	        idbModules.IDBObjectStore.__deleteObjectStore(this, store);
	    };

	    IDBDatabase.prototype.close = function(){
	        this.__closed = true;
	    };

	    /**
	     * Starts a new transaction.
	     * @param {string|string[]} storeNames
	     * @param {string} mode
	     * @returns {IDBTransaction}
	     */
	    IDBDatabase.prototype.transaction = function(storeNames, mode){
	        if (this.__closed) {
	            throw idbModules.util.createDOMException("InvalidStateError", "An attempt was made to start a new transaction on a database connection that is not open");
	        }

	        if (typeof mode === "number") {
	            mode = mode === 1 ? IDBTransaction.READ_WRITE : IDBTransaction.READ_ONLY;
	            idbModules.DEBUG && console.log("Mode should be a string, but was specified as ", mode);
	        }
	        else {
	            mode = mode || IDBTransaction.READ_ONLY;
	        }

	        if (mode !== IDBTransaction.READ_ONLY && mode !== IDBTransaction.READ_WRITE) {
	            throw new TypeError("Invalid transaction mode: " + mode);
	        }

	        storeNames = typeof storeNames === "string" ? [storeNames] : storeNames;
	        if (storeNames.length === 0) {
	            throw idbModules.util.createDOMException("InvalidAccessError", "No object store names were specified");
	        }
	        for (var i = 0; i < storeNames.length; i++) {
	            if (!this.objectStoreNames.contains(storeNames[i])) {
	                throw idbModules.util.createDOMException("NotFoundError", "The \"" + storeNames[i] + "\" object store does not exist");
	            }
	        }

	        var transaction = new idbModules.IDBTransaction(this, storeNames, mode);
	        return transaction;
	    };
	    
	    idbModules.IDBDatabase = IDBDatabase;
	}(idbModules));

	(function(idbModules) {
	    'use strict';

	    var DEFAULT_DB_SIZE = 4 * 1024 * 1024;
	    var sysdb;

	    /**
	     * Craetes the sysDB to keep track of version numbers for databases
	     **/
	    function createSysDB(success, failure) {
	        function sysDbCreateError(tx, err) {
	            err = idbModules.util.findError(arguments);
	            idbModules.DEBUG && console.log("Error in sysdb transaction - when creating dbVersions", err);
	            failure(err);
	        }

	        if (sysdb) {
	            success();
	        }
	        else {
	            sysdb = window.openDatabase("__sysdb__", 1, "System Database", DEFAULT_DB_SIZE);
	            sysdb.transaction(function(tx) {
	                tx.executeSql("CREATE TABLE IF NOT EXISTS dbVersions (name VARCHAR(255), version INT);", [], success, sysDbCreateError);
	            }, sysDbCreateError);
	        }
	    }

	    /**
	     * IDBFactory Class
	     * https://w3c.github.io/IndexedDB/#idl-def-IDBFactory
	     * @constructor
	     */
	    function IDBFactory() {
	        this.modules = idbModules;
	    }

	    /**
	     * The IndexedDB Method to create a new database and return the DB
	     * @param {string} name
	     * @param {number} version
	     */
	    IDBFactory.prototype.open = function(name, version) {
	        var req = new idbModules.IDBOpenDBRequest();
	        var calledDbCreateError = false;

	        if (arguments.length === 0) {
	            throw new TypeError('Database name is required');
	        }
	        else if (arguments.length === 2) {
	            version = parseFloat(version);
	            if (isNaN(version) || !isFinite(version) || version <= 0) {
	                throw new TypeError('Invalid database version: ' + version);
	            }
	        }
	        name = name + ''; // cast to a string

	        function dbCreateError(tx, err) {
	            if (calledDbCreateError) {
	                return;
	            }
	            err = idbModules.util.findError(arguments);
	            calledDbCreateError = true;
	            var evt = idbModules.util.createEvent("error", arguments);
	            req.readyState = "done";
	            req.error = err || "DOMError";
	            idbModules.util.callback("onerror", req, evt);
	        }

	        function openDB(oldVersion) {
	            var db = window.openDatabase(name, 1, name, DEFAULT_DB_SIZE);
	            req.readyState = "done";
	            if (typeof version === "undefined") {
	                version = oldVersion || 1;
	            }
	            if (version <= 0 || oldVersion > version) {
	                var err = idbModules.util.createDOMError("VersionError", "An attempt was made to open a database using a lower version than the existing version.", version);
	                dbCreateError(err);
	                return;
	            }

	            db.transaction(function(tx) {
	                tx.executeSql("CREATE TABLE IF NOT EXISTS __sys__ (name VARCHAR(255), keyPath VARCHAR(255), autoInc BOOLEAN, indexList BLOB)", [], function() {
	                    tx.executeSql("SELECT * FROM __sys__", [], function(tx, data) {
	                        var e = idbModules.util.createEvent("success");
	                        req.source = req.result = new idbModules.IDBDatabase(db, name, version, data);
	                        if (oldVersion < version) {
	                            // DB Upgrade in progress
	                            sysdb.transaction(function(systx) {
	                                systx.executeSql("UPDATE dbVersions set version = ? where name = ?", [version, name], function() {
	                                    var e = idbModules.util.createEvent("upgradeneeded");
	                                    e.oldVersion = oldVersion;
	                                    e.newVersion = version;
	                                    req.transaction = req.result.__versionTransaction = new idbModules.IDBTransaction(req.source, [], idbModules.IDBTransaction.VERSION_CHANGE);
	                                    req.transaction.__addToTransactionQueue(function onupgradeneeded(tx, args, success) {
	                                        idbModules.util.callback("onupgradeneeded", req, e);
	                                        success();
	                                    });
	                                    req.transaction.__oncomplete = function() {
	                                        req.transaction = null;
	                                        var e = idbModules.util.createEvent("success");
	                                        idbModules.util.callback("onsuccess", req, e);
	                                    };
	                                }, dbCreateError);
	                            }, dbCreateError);
	                        } else {
	                            idbModules.util.callback("onsuccess", req, e);
	                        }
	                    }, dbCreateError);
	                }, dbCreateError);
	            }, dbCreateError);
	        }

	        createSysDB(function() {
	            sysdb.transaction(function(tx) {
	                tx.executeSql("SELECT * FROM dbVersions where name = ?", [name], function(tx, data) {
	                    if (data.rows.length === 0) {
	                        // Database with this name does not exist
	                        tx.executeSql("INSERT INTO dbVersions VALUES (?,?)", [name, version || 1], function() {
	                            openDB(0);
	                        }, dbCreateError);
	                    } else {
	                        openDB(data.rows.item(0).version);
	                    }
	                }, dbCreateError);
	            }, dbCreateError);
	        }, dbCreateError);

	        return req;
	    };

	    /**
	     * Deletes a database
	     * @param {string} name
	     * @returns {IDBOpenDBRequest}
	     */
	    IDBFactory.prototype.deleteDatabase = function(name) {
	        var req = new idbModules.IDBOpenDBRequest();
	        var calledDBError = false;
	        var version = null;

	        if (arguments.length === 0) {
	            throw new TypeError('Database name is required');
	        }
	        name = name + ''; // cast to a string

	        function dbError(tx, err) {
	            if (calledDBError) {
	                return;
	            }
	            err = idbModules.util.findError(arguments);
	            req.readyState = "done";
	            req.error = err || "DOMError";
	            var e = idbModules.util.createEvent("error");
	            e.debug = arguments;
	            idbModules.util.callback("onerror", req, e);
	            calledDBError = true;
	        }

	        function deleteFromDbVersions() {
	            sysdb.transaction(function(systx) {
	                systx.executeSql("DELETE FROM dbVersions where name = ? ", [name], function() {
	                    req.result = undefined;
	                    var e = idbModules.util.createEvent("success");
	                    e.newVersion = null;
	                    e.oldVersion = version;
	                    idbModules.util.callback("onsuccess", req, e);
	                }, dbError);
	            }, dbError);
	        }

	        createSysDB(function() {
	            sysdb.transaction(function(systx) {
	                systx.executeSql("SELECT * FROM dbVersions where name = ?", [name], function(tx, data) {
	                    if (data.rows.length === 0) {
	                        req.result = undefined;
	                        var e = idbModules.util.createEvent("success");
	                        e.newVersion = null;
	                        e.oldVersion = version;
	                        idbModules.util.callback("onsuccess", req, e);
	                        return;
	                    }
	                    version = data.rows.item(0).version;
	                    var db = window.openDatabase(name, 1, name, DEFAULT_DB_SIZE);
	                    db.transaction(function(tx) {
	                        tx.executeSql("SELECT * FROM __sys__", [], function(tx, data) {
	                            var tables = data.rows;
	                            (function deleteTables(i) {
	                                if (i >= tables.length) {
	                                    // If all tables are deleted, delete the housekeeping tables
	                                    tx.executeSql("DROP TABLE IF EXISTS __sys__", [], function() {
	                                        // Finally, delete the record for this DB from sysdb
	                                        deleteFromDbVersions();
	                                    }, dbError);
	                                } else {
	                                    // Delete all tables in this database, maintained in the sys table
	                                    tx.executeSql("DROP TABLE " + idbModules.util.quote(tables.item(i).name), [], function() {
	                                        deleteTables(i + 1);
	                                    }, function() {
	                                        deleteTables(i + 1);
	                                    });
	                                }
	                            }(0));
	                        }, function(e) {
	                            // __sysdb table does not exist, but that does not mean delete did not happen
	                            deleteFromDbVersions();
	                        });
	                    });
	                }, dbError);
	            }, dbError);
	        }, dbError);

	        return req;
	    };

	    /**
	     * Compares two keys
	     * @param key1
	     * @param key2
	     * @returns {number}
	     */
	    IDBFactory.prototype.cmp = function(key1, key2) {
	        if (arguments.length < 2) {
	            throw new TypeError("You must provide two keys to be compared");
	        }

	        idbModules.Key.validate(key1);
	        idbModules.Key.validate(key2);
	        var encodedKey1 = idbModules.Key.encode(key1);
	        var encodedKey2 = idbModules.Key.encode(key2);
	        var result = encodedKey1 > encodedKey2 ? 1 : encodedKey1 === encodedKey2 ? 0 : -1;
	        
	        if (idbModules.DEBUG) {
	            // verify that the keys encoded correctly
	            var decodedKey1 = idbModules.Key.decode(encodedKey1);
	            var decodedKey2 = idbModules.Key.decode(encodedKey2);
	            if (typeof key1 === "object") {
	                key1 = JSON.stringify(key1);
	                decodedKey1 = JSON.stringify(decodedKey1);
	            }
	            if (typeof key2 === "object") {
	                key2 = JSON.stringify(key2);
	                decodedKey2 = JSON.stringify(decodedKey2);
	            }

	            // encoding/decoding mismatches are usually due to a loss of floating-point precision
	            if (decodedKey1 !== key1) {
	                console.warn(key1 + ' was incorrectly encoded as ' + decodedKey1);
	            }
	            if (decodedKey2 !== key2) {
	                console.warn(key2 + ' was incorrectly encoded as ' + decodedKey2);
	            }
	        }
	        
	        return result;
	    };


	    idbModules.shimIndexedDB = new IDBFactory();
	    idbModules.IDBFactory = IDBFactory;
	}(idbModules));

	(function(window, idbModules){
	    'use strict';

	    function shim(name, value) {
	        try {
	            // Try setting the property. This will fail if the property is read-only.
	            window[name] = value;
	        }
	        catch (e) {}

	        if (window[name] !== value && Object.defineProperty) {
	            // Setting a read-only property failed, so try re-defining the property
	            try {
	                Object.defineProperty(window, name, {
	                    value: value
	                });
	            }
	            catch (e) {}

	            if (window[name] !== value) {
	                window.console && console.warn && console.warn('Unable to shim ' + name);
	            }
	        }
	    }

	    shim('shimIndexedDB', idbModules.shimIndexedDB);
	    if (window.shimIndexedDB) {
	        window.shimIndexedDB.__useShim = function(){
	            if (typeof window.openDatabase !== "undefined") {
	                // Polyfill ALL of IndexedDB, using WebSQL
	                shim('indexedDB', idbModules.shimIndexedDB);
	                shim('IDBFactory', idbModules.IDBFactory);
	                shim('IDBDatabase', idbModules.IDBDatabase);
	                shim('IDBObjectStore', idbModules.IDBObjectStore);
	                shim('IDBIndex', idbModules.IDBIndex);
	                shim('IDBTransaction', idbModules.IDBTransaction);
	                shim('IDBCursor', idbModules.IDBCursor);
	                shim('IDBKeyRange', idbModules.IDBKeyRange);
	                shim('IDBRequest', idbModules.IDBRequest);
	                shim('IDBOpenDBRequest', idbModules.IDBOpenDBRequest);
	                shim('IDBVersionChangeEvent', idbModules.IDBVersionChangeEvent);
	            }
	            else if (typeof window.indexedDB === "object") {
	                // Polyfill the missing IndexedDB features
	                idbModules.polyfill();
	            }
	        };

	        window.shimIndexedDB.__debug = function(val){
	            idbModules.DEBUG = val;
	        };
	    }
	    
	    // Workaround to prevent an error in Firefox
	    if(!('indexedDB' in window)) {
	        window.indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.oIndexedDB || window.msIndexedDB;
	    }
	    
	    // Detect browsers with known IndexedDb issues (e.g. Android pre-4.4)
	    var poorIndexedDbSupport = false;
	    if (navigator.userAgent.match(/Android 2/) || navigator.userAgent.match(/Android 3/) || navigator.userAgent.match(/Android 4\.[0-3]/)) {
	        /* Chrome is an exception. It supports IndexedDb */
	        if (!navigator.userAgent.match(/Chrome/)) {
	            poorIndexedDbSupport = true;
	        }
	    }

	    if ((typeof window.indexedDB === "undefined" || !window.indexedDB || poorIndexedDbSupport) && typeof window.openDatabase !== "undefined") {
	        window.shimIndexedDB.__useShim();
	    }
	    else {
	        window.IDBDatabase = window.IDBDatabase || window.webkitIDBDatabase;
	        window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction;
	        window.IDBCursor = window.IDBCursor || window.webkitIDBCursor;
	        window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange;
	        if(!window.IDBTransaction){
	            window.IDBTransaction = {};
	        }
	        /* Some browsers (e.g. Chrome 18 on Android) support IndexedDb but do not allow writing of these properties */
	        try {
	            window.IDBTransaction.READ_ONLY = window.IDBTransaction.READ_ONLY || "readonly";
	            window.IDBTransaction.READ_WRITE = window.IDBTransaction.READ_WRITE || "readwrite";
	        } catch (e) {}
	    }
	    
	}(window, idbModules));



/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.LocalStorage = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _errors = __webpack_require__(7);

	var _keyBy = __webpack_require__(148);

	var _keyBy2 = _interopRequireDefault(_keyBy);

	var _merge = __webpack_require__(152);

	var _merge2 = _interopRequireDefault(_merge);

	var _values = __webpack_require__(186);

	var _values2 = _interopRequireDefault(_values);

	var _forEach = __webpack_require__(16);

	var _forEach2 = _interopRequireDefault(_forEach);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';
	var localStorage = global.localStorage;

	/**
	 * @private
	 */

	var LocalStorage = exports.LocalStorage = function () {
	  function LocalStorage() {
	    var name = arguments.length <= 0 || arguments[0] === undefined ? 'kinvey' : arguments[0];

	    _classCallCheck(this, LocalStorage);

	    this.name = name;
	  }

	  _createClass(LocalStorage, [{
	    key: 'find',
	    value: function find(collection) {
	      var _this = this;

	      return _babybird2.default.resolve().then(function () {
	        var data = localStorage.getItem('' + _this.name + collection);

	        try {
	          return JSON.parse(data);
	        } catch (err) {
	          return data;
	        }
	      }).then(function (entities) {
	        if (!entities) {
	          return [];
	        }

	        return entities;
	      });
	    }
	  }, {
	    key: 'findById',
	    value: function findById(collection, id) {
	      var _this2 = this;

	      return this.find(collection).then(function (entities) {
	        var entity = find(entities, function (entity) {
	          return entity[idAttribute] === id;
	        });

	        if (!entity) {
	          throw new _errors.NotFoundError('An entity with _id = ' + id + ' was not found in the ' + collection + ' ' + ('collection on the ' + _this2.name + ' memory database.'));
	        }

	        return entity;
	      });
	    }
	  }, {
	    key: 'save',
	    value: function save(collection, entities) {
	      var _this3 = this;

	      return this.find(collection).then(function (existingEntities) {
	        var existingEntitiesById = (0, _keyBy2.default)(existingEntities, idAttribute);
	        var entitiesById = (0, _keyBy2.default)(entities, idAttribute);
	        var existingEntityIds = Object.keys(existingEntitiesById);

	        (0, _forEach2.default)(existingEntityIds, function (id) {
	          var existingEntity = existingEntitiesById[id];
	          var entity = entitiesById[id];

	          if (entity) {
	            entitiesById[id] = (0, _merge2.default)(existingEntity, entity);
	          }
	        });

	        localStorage.setItem('' + _this3.name + collection, JSON.stringify((0, _values2.default)(entitiesById)));
	        return entities;
	      });
	    }
	  }, {
	    key: 'removeById',
	    value: function removeById(collection, id) {
	      var _this4 = this;

	      return this.find(collection).then(function (entities) {
	        var entitiesById = (0, _keyBy2.default)(entities, idAttribute);
	        var entity = entitiesById[id];

	        if (!entity) {
	          throw new _errors.NotFoundError('An entity with _id = ' + id + ' was not found in the ' + collection + ' ' + ('collection on the ' + _this4.name + ' memory database.'));
	        }

	        delete entitiesById[id];
	        localStorage.setItem('' + _this4.name + collection, JSON.stringify((0, _values2.default)(entitiesById)));

	        return {
	          count: 1,
	          entities: [entity]
	        };
	      });
	    }
	  }], [{
	    key: 'isSupported',
	    value: function isSupported() {
	      if (localStorage) {
	        var item = 'testLocalStorageSupport';
	        try {
	          localStorage.setItem(item, item);
	          localStorage.removeItem(item);
	          return true;
	        } catch (e) {
	          return false;
	        }
	      }

	      return false;
	    }
	  }]);

	  return LocalStorage;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), (function() { return this; }())))

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	var createAggregator = __webpack_require__(149);

	/**
	 * Creates an object composed of keys generated from the results of running
	 * each element of `collection` thru `iteratee`. The corresponding value of
	 * each key is the last element responsible for generating the key. The
	 * iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Array|Function|Object|string} [iteratee=_.identity]
	 *  The iteratee to transform keys.
	 * @returns {Object} Returns the composed aggregate object.
	 * @example
	 *
	 * var array = [
	 *   { 'dir': 'left', 'code': 97 },
	 *   { 'dir': 'right', 'code': 100 }
	 * ];
	 *
	 * _.keyBy(array, function(o) {
	 *   return String.fromCharCode(o.code);
	 * });
	 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	 *
	 * _.keyBy(array, 'dir');
	 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	 */
	var keyBy = createAggregator(function(result, value, key) {
	  result[key] = value;
	});

	module.exports = keyBy;


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	var arrayAggregator = __webpack_require__(150),
	    baseAggregator = __webpack_require__(151),
	    baseIteratee = __webpack_require__(40),
	    isArray = __webpack_require__(35);

	/**
	 * Creates a function like `_.groupBy`.
	 *
	 * @private
	 * @param {Function} setter The function to set accumulator values.
	 * @param {Function} [initializer] The accumulator object initializer.
	 * @returns {Function} Returns the new aggregator function.
	 */
	function createAggregator(setter, initializer) {
	  return function(collection, iteratee) {
	    var func = isArray(collection) ? arrayAggregator : baseAggregator,
	        accumulator = initializer ? initializer() : {};

	    return func(collection, setter, baseIteratee(iteratee), accumulator);
	  };
	}

	module.exports = createAggregator;


/***/ },
/* 150 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `baseAggregator` for arrays.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform keys.
	 * @param {Object} accumulator The initial aggregated object.
	 * @returns {Function} Returns `accumulator`.
	 */
	function arrayAggregator(array, setter, iteratee, accumulator) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    var value = array[index];
	    setter(accumulator, value, iteratee(value), array);
	  }
	  return accumulator;
	}

	module.exports = arrayAggregator;


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(18);

	/**
	 * Aggregates elements of `collection` on `accumulator` with keys transformed
	 * by `iteratee` and values set by `setter`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform keys.
	 * @param {Object} accumulator The initial aggregated object.
	 * @returns {Function} Returns `accumulator`.
	 */
	function baseAggregator(collection, setter, iteratee, accumulator) {
	  baseEach(collection, function(value, key, collection) {
	    setter(accumulator, value, iteratee(value), collection);
	  });
	  return accumulator;
	}

	module.exports = baseAggregator;


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	var baseMerge = __webpack_require__(153),
	    createAssigner = __webpack_require__(117);

	/**
	 * This method is like `_.assign` except that it recursively merges own and
	 * inherited enumerable string keyed properties of source objects into the
	 * destination object. Source properties that resolve to `undefined` are
	 * skipped if a destination value exists. Array and plain object properties
	 * are merged recursively.Other objects and value types are overridden by
	 * assignment. Source objects are applied from left to right. Subsequent
	 * sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.5.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var users = {
	 *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	 * };
	 *
	 * var ages = {
	 *   'data': [{ 'age': 36 }, { 'age': 40 }]
	 * };
	 *
	 * _.merge(users, ages);
	 * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	 */
	var merge = createAssigner(function(object, source, srcIndex) {
	  baseMerge(object, source, srcIndex);
	});

	module.exports = merge;


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(43),
	    arrayEach = __webpack_require__(17),
	    assignMergeValue = __webpack_require__(154),
	    baseMergeDeep = __webpack_require__(155),
	    isArray = __webpack_require__(35),
	    isObject = __webpack_require__(12),
	    isTypedArray = __webpack_require__(91),
	    keysIn = __webpack_require__(182);

	/**
	 * The base implementation of `_.merge` without support for multiple sources.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMerge(object, source, srcIndex, customizer, stack) {
	  if (object === source) {
	    return;
	  }
	  if (!(isArray(source) || isTypedArray(source))) {
	    var props = keysIn(source);
	  }
	  arrayEach(props || source, function(srcValue, key) {
	    if (props) {
	      key = srcValue;
	      srcValue = source[key];
	    }
	    if (isObject(srcValue)) {
	      stack || (stack = new Stack);
	      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	    }
	    else {
	      var newValue = customizer
	        ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	        : undefined;

	      if (newValue === undefined) {
	        newValue = srcValue;
	      }
	      assignMergeValue(object, key, newValue);
	    }
	  });
	}

	module.exports = baseMerge;


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(48);

	/**
	 * This function is like `assignValue` except that it doesn't assign
	 * `undefined` values.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignMergeValue(object, key, value) {
	  if ((value !== undefined && !eq(object[key], value)) ||
	      (typeof key == 'number' && value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}

	module.exports = assignMergeValue;


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	var assignMergeValue = __webpack_require__(154),
	    baseClone = __webpack_require__(156),
	    copyArray = __webpack_require__(159),
	    isArguments = __webpack_require__(28),
	    isArray = __webpack_require__(35),
	    isArrayLikeObject = __webpack_require__(29),
	    isFunction = __webpack_require__(11),
	    isObject = __webpack_require__(12),
	    isPlainObject = __webpack_require__(130),
	    isTypedArray = __webpack_require__(91),
	    toPlainObject = __webpack_require__(181);

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	  var objValue = object[key],
	      srcValue = source[key],
	      stacked = stack.get(srcValue);

	  if (stacked) {
	    assignMergeValue(object, key, stacked);
	    return;
	  }
	  var newValue = customizer
	    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	    : undefined;

	  var isCommon = newValue === undefined;

	  if (isCommon) {
	    newValue = srcValue;
	    if (isArray(srcValue) || isTypedArray(srcValue)) {
	      if (isArray(objValue)) {
	        newValue = objValue;
	      }
	      else if (isArrayLikeObject(objValue)) {
	        newValue = copyArray(objValue);
	      }
	      else {
	        isCommon = false;
	        newValue = baseClone(srcValue, true);
	      }
	    }
	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      if (isArguments(objValue)) {
	        newValue = toPlainObject(objValue);
	      }
	      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	        isCommon = false;
	        newValue = baseClone(srcValue, true);
	      }
	      else {
	        newValue = objValue;
	      }
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  stack.set(srcValue, newValue);

	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	  }
	  stack['delete'](srcValue);
	  assignMergeValue(object, key, newValue);
	}

	module.exports = baseMergeDeep;


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(43),
	    arrayEach = __webpack_require__(17),
	    assignValue = __webpack_require__(115),
	    baseAssign = __webpack_require__(157),
	    cloneBuffer = __webpack_require__(158),
	    copyArray = __webpack_require__(159),
	    copySymbols = __webpack_require__(160),
	    getAllKeys = __webpack_require__(162),
	    getTag = __webpack_require__(86),
	    initCloneArray = __webpack_require__(165),
	    initCloneByTag = __webpack_require__(166),
	    initCloneObject = __webpack_require__(177),
	    isArray = __webpack_require__(35),
	    isBuffer = __webpack_require__(179),
	    isHostObject = __webpack_require__(60),
	    isObject = __webpack_require__(12),
	    keys = __webpack_require__(22);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	cloneableTags[boolTag] = cloneableTags[dateTag] =
	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	cloneableTags[int32Tag] = cloneableTags[mapTag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[setTag] =
	cloneableTags[stringTag] = cloneableTags[symbolTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {boolean} [isFull] Specify a clone including symbols.
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      if (isHostObject(value)) {
	        return object ? value : {};
	      }
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, baseClone, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack);
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (!isArr) {
	    var props = isFull ? getAllKeys(value) : keys(value);
	  }
	  // Recursively populate clone (susceptible to call stack limits).
	  arrayEach(props || value, function(subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	  });
	  return result;
	}

	module.exports = baseClone;


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(116),
	    keys = __webpack_require__(22);

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	module.exports = baseAssign;


/***/ },
/* 158 */
/***/ function(module, exports) {

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var result = new buffer.constructor(buffer.length);
	  buffer.copy(result);
	  return result;
	}

	module.exports = cloneBuffer;


/***/ },
/* 159 */
/***/ function(module, exports) {

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	module.exports = copyArray;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(116),
	    getSymbols = __webpack_require__(161);

	/**
	 * Copies own symbol properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	module.exports = copySymbols;


/***/ },
/* 161 */
/***/ function(module, exports) {

	/** Built-in value references. */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own enumerable symbol properties of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	function getSymbols(object) {
	  // Coerce `object` to an object to avoid non-object errors in V8.
	  // See https://bugs.chromium.org/p/v8/issues/detail?id=3443 for more details.
	  return getOwnPropertySymbols(Object(object));
	}

	// Fallback for IE < 11.
	if (!getOwnPropertySymbols) {
	  getSymbols = function() {
	    return [];
	  };
	}

	module.exports = getSymbols;


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetAllKeys = __webpack_require__(163),
	    getSymbols = __webpack_require__(161),
	    keys = __webpack_require__(22);

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	module.exports = getAllKeys;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(164),
	    isArray = __webpack_require__(35);

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object)
	    ? result
	    : arrayPush(result, symbolsFunc(object));
	}

	module.exports = baseGetAllKeys;


/***/ },
/* 164 */
/***/ function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	module.exports = arrayPush;


/***/ },
/* 165 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	module.exports = initCloneArray;


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(167),
	    cloneDataView = __webpack_require__(168),
	    cloneMap = __webpack_require__(169),
	    cloneRegExp = __webpack_require__(172),
	    cloneSet = __webpack_require__(173),
	    cloneSymbol = __webpack_require__(175),
	    cloneTypedArray = __webpack_require__(176);

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, cloneFunc, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return cloneMap(object, isDeep, cloneFunc);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return cloneSet(object, isDeep, cloneFunc);

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	module.exports = initCloneByTag;


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var Uint8Array = __webpack_require__(82);

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	module.exports = cloneArrayBuffer;


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(167);

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	module.exports = cloneDataView;


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	var addMapEntry = __webpack_require__(170),
	    arrayReduce = __webpack_require__(171),
	    mapToArray = __webpack_require__(83);

	/**
	 * Creates a clone of `map`.
	 *
	 * @private
	 * @param {Object} map The map to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned map.
	 */
	function cloneMap(map, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	  return arrayReduce(array, addMapEntry, new map.constructor);
	}

	module.exports = cloneMap;


/***/ },
/* 170 */
/***/ function(module, exports) {

	/**
	 * Adds the key-value `pair` to `map`.
	 *
	 * @private
	 * @param {Object} map The map to modify.
	 * @param {Array} pair The key-value pair to add.
	 * @returns {Object} Returns `map`.
	 */
	function addMapEntry(map, pair) {
	  // Don't return `Map#set` because it doesn't return the map instance in IE 11.
	  map.set(pair[0], pair[1]);
	  return map;
	}

	module.exports = addMapEntry;


/***/ },
/* 171 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array.length;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	module.exports = arrayReduce;


/***/ },
/* 172 */
/***/ function(module, exports) {

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	module.exports = cloneRegExp;


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	var addSetEntry = __webpack_require__(174),
	    arrayReduce = __webpack_require__(171),
	    setToArray = __webpack_require__(84);

	/**
	 * Creates a clone of `set`.
	 *
	 * @private
	 * @param {Object} set The set to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned set.
	 */
	function cloneSet(set, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	  return arrayReduce(array, addSetEntry, new set.constructor);
	}

	module.exports = cloneSet;


/***/ },
/* 174 */
/***/ function(module, exports) {

	/**
	 * Adds `value` to `set`.
	 *
	 * @private
	 * @param {Object} set The set to modify.
	 * @param {*} value The value to add.
	 * @returns {Object} Returns `set`.
	 */
	function addSetEntry(set, value) {
	  set.add(value);
	  return set;
	}

	module.exports = addSetEntry;


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(81);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	module.exports = cloneSymbol;


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(167);

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	module.exports = cloneTypedArray;


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	var baseCreate = __webpack_require__(178),
	    getPrototype = __webpack_require__(24),
	    isPrototype = __webpack_require__(38);

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return (typeof object.constructor == 'function' && !isPrototype(object))
	    ? baseCreate(getPrototype(object))
	    : {};
	}

	module.exports = initCloneObject;


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(12);

	/** Built-in value references. */
	var objectCreate = Object.create;

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} prototype The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	function baseCreate(proto) {
	  return isObject(proto) ? objectCreate(proto) : {};
	}

	module.exports = baseCreate;


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var constant = __webpack_require__(180),
	    root = __webpack_require__(63);

	/** Used to determine if values are of the language type `Object`. */
	var objectTypes = {
	  'function': true,
	  'object': true
	};

	/** Detect free variable `exports`. */
	var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
	  ? exports
	  : undefined;

	/** Detect free variable `module`. */
	var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
	  ? module
	  : undefined;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = (freeModule && freeModule.exports === freeExports)
	  ? freeExports
	  : undefined;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = !Buffer ? constant(false) : function(value) {
	  return value instanceof Buffer;
	};

	module.exports = isBuffer;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(64)(module)))

/***/ },
/* 180 */
/***/ function(module, exports) {

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 * var getter = _.constant(object);
	 *
	 * getter() === object;
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}

	module.exports = constant;


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(116),
	    keysIn = __webpack_require__(182);

	/**
	 * Converts `value` to a plain object flattening inherited enumerable string
	 * keyed properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return copyObject(value, keysIn(value));
	}

	module.exports = toPlainObject;


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	var baseKeysIn = __webpack_require__(183),
	    indexKeys = __webpack_require__(26),
	    isIndex = __webpack_require__(37),
	    isPrototype = __webpack_require__(38);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  var index = -1,
	      isProto = isPrototype(object),
	      props = baseKeysIn(object),
	      propsLength = props.length,
	      indexes = indexKeys(object),
	      skipIndexes = !!indexes,
	      result = indexes || [],
	      length = result.length;

	  while (++index < propsLength) {
	    var key = props[index];
	    if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = keysIn;


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	var Reflect = __webpack_require__(184),
	    iteratorToArray = __webpack_require__(185);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Built-in value references. */
	var enumerate = Reflect ? Reflect.enumerate : undefined,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * The base implementation of `_.keysIn` which doesn't skip the constructor
	 * property of prototypes or treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  object = object == null ? object : Object(object);

	  var result = [];
	  for (var key in object) {
	    result.push(key);
	  }
	  return result;
	}

	// Fallback for IE < 9 with es6-shim.
	if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
	  baseKeysIn = function(object) {
	    return iteratorToArray(enumerate(object));
	  };
	}

	module.exports = baseKeysIn;


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(63);

	/** Built-in value references. */
	var Reflect = root.Reflect;

	module.exports = Reflect;


/***/ },
/* 185 */
/***/ function(module, exports) {

	/**
	 * Converts `iterator` to an array.
	 *
	 * @private
	 * @param {Object} iterator The iterator to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function iteratorToArray(iterator) {
	  var data,
	      result = [];

	  while (!(data = iterator.next()).done) {
	    result.push(data.value);
	  }
	  return result;
	}

	module.exports = iteratorToArray;


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var baseValues = __webpack_require__(187),
	    keys = __webpack_require__(22);

	/**
	 * Creates an array of the own enumerable string keyed property values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.values(new Foo);
	 * // => [1, 2] (iteration order is not guaranteed)
	 *
	 * _.values('hi');
	 * // => ['h', 'i']
	 */
	function values(object) {
	  return object ? baseValues(object, keys(object)) : [];
	}

	module.exports = values;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(96);

	/**
	 * The base implementation of `_.values` and `_.valuesIn` which creates an
	 * array of `object` property values corresponding to the property names
	 * of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the array of property values.
	 */
	function baseValues(object, props) {
	  return arrayMap(props, function(key) {
	    return object[key];
	  });
	}

	module.exports = baseValues;


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Memory = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _promiseQueue = __webpack_require__(189);

	var _promiseQueue2 = _interopRequireDefault(_promiseQueue);

	var _errors = __webpack_require__(7);

	var _fastMemoryCache = __webpack_require__(192);

	var _fastMemoryCache2 = _interopRequireDefault(_fastMemoryCache);

	var _keyBy = __webpack_require__(148);

	var _keyBy2 = _interopRequireDefault(_keyBy);

	var _forEach = __webpack_require__(16);

	var _forEach2 = _interopRequireDefault(_forEach);

	var _values = __webpack_require__(186);

	var _values2 = _interopRequireDefault(_values);

	var _find = __webpack_require__(193);

	var _find2 = _interopRequireDefault(_find);

	var _isString = __webpack_require__(36);

	var _isString2 = _interopRequireDefault(_isString);

	var _isArray = __webpack_require__(35);

	var _isArray2 = _interopRequireDefault(_isArray);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';
	var caches = [];

	_promiseQueue2.default.configure(_babybird2.default);
	var queue = new _promiseQueue2.default(1, Infinity);

	/**
	 * @private
	 */

	var Memory = exports.Memory = function () {
	  function Memory(name) {
	    _classCallCheck(this, Memory);

	    if (!name) {
	      throw new _errors.KinveyError('A name for the collection is required to use the memory persistence adapter.', name);
	    }

	    if (!(0, _isString2.default)(name)) {
	      throw new _errors.KinveyError('The name of the collection must be a string to use the memory persistence adapter', name);
	    }

	    this.name = name;
	    this.cache = caches[name];

	    if (!this.cache) {
	      this.cache = new _fastMemoryCache2.default();
	      caches[name] = this.cache;
	    }
	  }

	  _createClass(Memory, [{
	    key: 'find',
	    value: function find(collection) {
	      var _this = this;

	      return queue.add(function () {
	        var promise = _babybird2.default.resolve().then(function () {
	          var entities = _this.cache.get('' + _this.name + collection);

	          if (entities) {
	            try {
	              return JSON.parse(entities);
	            } catch (err) {
	              return entities;
	            }
	          }

	          return entities;
	        }).then(function (entities) {
	          if (!entities) {
	            return [];
	          }

	          return entities;
	        });
	        return promise;
	      });
	    }
	  }, {
	    key: 'findById',
	    value: function findById(collection, id) {
	      var _this2 = this;

	      return this.find(collection).then(function (entities) {
	        var entity = (0, _find2.default)(entities, function (entity) {
	          return entity[idAttribute] === id;
	        });

	        if (!entity) {
	          throw new _errors.NotFoundError('An entity with _id = ' + id + ' was not found in the ' + collection + ' ' + ('collection on the ' + _this2.name + ' memory database.'));
	        }

	        return entity;
	      });
	    }
	  }, {
	    key: 'save',
	    value: function save(collection, entities) {
	      var _this3 = this;

	      var singular = false;

	      if (!(0, _isArray2.default)(entities)) {
	        entities = [entities];
	        singular = true;
	      }

	      if (entities.length === 0) {
	        return _babybird2.default.resolve(entities);
	      }

	      return this.find(collection).then(function (existingEntities) {
	        existingEntities = (0, _keyBy2.default)(existingEntities, idAttribute);
	        entities = (0, _keyBy2.default)(entities, idAttribute);
	        var entityIds = Object.keys(entities);

	        (0, _forEach2.default)(entityIds, function (id) {
	          existingEntities[id] = entities[id];
	        });

	        _this3.cache.set('' + _this3.name + collection, JSON.stringify((0, _values2.default)(existingEntities)));
	        entities = (0, _values2.default)(entities);
	        return singular ? entities[0] : entities;
	      });
	    }
	  }, {
	    key: 'removeById',
	    value: function removeById(collection, id) {
	      var _this4 = this;

	      return this.find(collection).then(function (entities) {
	        entities = (0, _keyBy2.default)(entities, idAttribute);
	        var entity = entities[id];

	        if (!entity) {
	          throw new _errors.NotFoundError('An entity with _id = ' + id + ' was not found in the ' + collection + ' ' + ('collection on the ' + _this4.name + ' memory database.'));
	        }

	        delete entities[id];
	        _this4.cache.set('' + _this4.name + collection, JSON.stringify((0, _values2.default)(entities)));

	        return {
	          count: 1,
	          entities: [entity]
	        };
	      });
	    }
	  }], [{
	    key: 'isSupported',
	    value: function isSupported() {
	      return true;
	    }
	  }]);

	  return Memory;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {module.exports = process.env.PROMISE_QUEUE_COVERAGE ?
	    __webpack_require__(190) :
	    __webpack_require__(191);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 190 */
/***/ function(module, exports) {

	

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define, Promise */
	(function (root, factory) {
	    'use strict';
	    if (typeof module === 'object' && module.exports && "function" === 'function') {
	        // CommonJS
	        module.exports = factory();
	    } else if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else {
	        // Browser globals
	        root.Queue = factory();
	    }
	})
	(this, function () {
	    'use strict';

	    /**
	     * @return {Object}
	     */
	    var LocalPromise = typeof Promise !== 'undefined' ? Promise : function () {
	        return {
	            then: function () {
	                throw new Error('Queue.configure() before use Queue');
	            }
	        };
	    };

	    var noop = function () {};

	    /**
	     * @param {*} value
	     * @returns {LocalPromise}
	     */
	    var resolveWith = function (value) {
	        if (value && typeof value.then === 'function') {
	            return value;
	        }

	        return new LocalPromise(function (resolve) {
	            resolve(value);
	        });
	    };

	    /**
	     * It limits concurrently executed promises
	     *
	     * @param {Number} [maxPendingPromises=Infinity] max number of concurrently executed promises
	     * @param {Number} [maxQueuedPromises=Infinity]  max number of queued promises
	     * @constructor
	     *
	     * @example
	     *
	     * var queue = new Queue(1);
	     *
	     * queue.add(function () {
	     *     // resolve of this promise will resume next request
	     *     return downloadTarballFromGithub(url, file);
	     * })
	     * .then(function (file) {
	     *     doStuffWith(file);
	     * });
	     *
	     * queue.add(function () {
	     *     return downloadTarballFromGithub(url, file);
	     * })
	     * // This request will be paused
	     * .then(function (file) {
	     *     doStuffWith(file);
	     * });
	     */
	    function Queue(maxPendingPromises, maxQueuedPromises) {
	        this.pendingPromises = 0;
	        this.maxPendingPromises = typeof maxPendingPromises !== 'undefined' ? maxPendingPromises : Infinity;
	        this.maxQueuedPromises = typeof maxQueuedPromises !== 'undefined' ? maxQueuedPromises : Infinity;
	        this.queue = [];
	    }

	    /**
	     * Defines promise promiseFactory
	     * @param {Function} GlobalPromise
	     */
	    Queue.configure = function (GlobalPromise) {
	        LocalPromise = GlobalPromise;
	    };

	    /**
	     * @param {Function} promiseGenerator
	     * @return {LocalPromise}
	     */
	    Queue.prototype.add = function (promiseGenerator) {
	        var self = this;
	        return new LocalPromise(function (resolve, reject, notify) {
	            // Do not queue to much promises
	            if (self.queue.length >= self.maxQueuedPromises) {
	                reject(new Error('Queue limit reached'));
	                return;
	            }

	            // Add to queue
	            self.queue.push({
	                promiseGenerator: promiseGenerator,
	                resolve: resolve,
	                reject: reject,
	                notify: notify || noop
	            });

	            self._dequeue();
	        });
	    };

	    /**
	     * Number of simultaneously running promises (which are resolving)
	     *
	     * @return {number}
	     */
	    Queue.prototype.getPendingLength = function () {
	        return this.pendingPromises;
	    };

	    /**
	     * Number of queued promises (which are waiting)
	     *
	     * @return {number}
	     */
	    Queue.prototype.getQueueLength = function () {
	        return this.queue.length;
	    };

	    /**
	     * @returns {boolean} true if first item removed from queue
	     * @private
	     */
	    Queue.prototype._dequeue = function () {
	        var self = this;
	        if (this.pendingPromises >= this.maxPendingPromises) {
	            return false;
	        }

	        // Remove from queue
	        var item = this.queue.shift();
	        if (!item) {
	            return false;
	        }

	        try {
	            this.pendingPromises++;

	            resolveWith(item.promiseGenerator())
	            // Forward all stuff
	                .then(function (value) {
	                    // It is not pending now
	                    self.pendingPromises--;
	                    // It should pass values
	                    item.resolve(value);
	                    self._dequeue();
	                }, function (err) {
	                    // It is not pending now
	                    self.pendingPromises--;
	                    // It should not mask errors
	                    item.reject(err);
	                    self._dequeue();
	                }, function (message) {
	                    // It should pass notifications
	                    item.notify(message);
	                });
	        } catch (err) {
	            self.pendingPromises--;
	            item.reject(err);
	            self._dequeue();

	        }

	        return true;
	    };

	    return Queue;
	});


/***/ },
/* 192 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Provides in-memory cache.
	 *
	 * @name MemoryCache
	 * @constructor
	 */
	function MemoryCache() {
	    this._cache = createMap();
	    this._timeouts = createMap();
	}

	/**
	 * Returns cache value for the specified key.
	 *
	 * @param {String} key
	 * @returns {*} Value or `undefined` if value does not exist.
	 */
	MemoryCache.prototype.get = function (key) {
	    return this._cache[key];
	};

	/**
	 * Assigns value for the specified key.
	 *
	 * @param {String} key
	 * @param {*} value
	 * @param {Number} [expireTime=0] The length of time in seconds. After this time has expired, the
	 *      value will be automatically deleted. 0 means that time never expire.
	 */
	MemoryCache.prototype.set = function (key, value, expireTime) {
	    this.delete(key);
	    this._cache[key] = value;
	    if (expireTime) {
	        this._timeouts[key] = setTimeout(this.delete.bind(this, key), expireTime * 1000);
	    }
	};

	/**
	 * Deletes value for the specified key.
	 *
	 * @param {String} key
	 */
	MemoryCache.prototype.delete = function (key) {
	    delete this._cache[key];
	    if (key in this._timeouts) {
	        clearTimeout(this._timeouts[key]);
	        delete this._timeouts[key];
	    }
	};

	/**
	 * Clears the whole cache storage.
	 */
	MemoryCache.prototype.clear = function () {
	    this._cache = createMap();
	    for (var key in this._timeouts) {
	        clearTimeout(this._timeouts[key]);
	    }
	    this._timeouts = createMap();
	};

	/**
	 * Creates a new object without a prototype. This object is useful for lookup without having to
	 * guard against prototypically inherited properties via hasOwnProperty.
	 *
	 * @returns {Object}
	 */
	function createMap() {
	    return Object.create(null);
	}

	module.exports = MemoryCache;


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(18),
	    baseFind = __webpack_require__(194),
	    baseFindIndex = __webpack_require__(195),
	    baseIteratee = __webpack_require__(40),
	    isArray = __webpack_require__(35);

	/**
	 * Iterates over elements of `collection`, returning the first element
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to search.
	 * @param {Array|Function|Object|string} [predicate=_.identity]
	 *  The function invoked per iteration.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': true },
	 *   { 'user': 'fred',    'age': 40, 'active': false },
	 *   { 'user': 'pebbles', 'age': 1,  'active': true }
	 * ];
	 *
	 * _.find(users, function(o) { return o.age < 40; });
	 * // => object for 'barney'
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.find(users, { 'age': 1, 'active': true });
	 * // => object for 'pebbles'
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.find(users, ['active', false]);
	 * // => object for 'fred'
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.find(users, 'active');
	 * // => object for 'barney'
	 */
	function find(collection, predicate) {
	  predicate = baseIteratee(predicate, 3);
	  if (isArray(collection)) {
	    var index = baseFindIndex(collection, predicate);
	    return index > -1 ? collection[index] : undefined;
	  }
	  return baseFind(collection, predicate, baseEach);
	}

	module.exports = find;


/***/ },
/* 194 */
/***/ function(module, exports) {

	/**
	 * The base implementation of methods like `_.find` and `_.findKey`, without
	 * support for iteratee shorthands, which iterates over `collection` using
	 * `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to search.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @param {boolean} [retKey] Specify returning the key of the found element
	 *  instead of the element itself.
	 * @returns {*} Returns the found element or its key, else `undefined`.
	 */
	function baseFind(collection, predicate, eachFunc, retKey) {
	  var result;
	  eachFunc(collection, function(value, key, collection) {
	    if (predicate(value, key, collection)) {
	      result = retKey ? key : value;
	      return false;
	    }
	  });
	  return result;
	}

	module.exports = baseFind;


/***/ },
/* 195 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromRight) {
	  var length = array.length,
	      index = fromRight ? length : -1;

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseFindIndex;


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.WebSQL = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _errors = __webpack_require__(7);

	var _map = __webpack_require__(197);

	var _map2 = _interopRequireDefault(_map);

	var _forEach = __webpack_require__(16);

	var _forEach2 = _interopRequireDefault(_forEach);

	var _isArray = __webpack_require__(35);

	var _isArray2 = _interopRequireDefault(_isArray);

	var _isFunction = __webpack_require__(11);

	var _isFunction2 = _interopRequireDefault(_isFunction);

	var _isString = __webpack_require__(36);

	var _isString2 = _interopRequireDefault(_isString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';
	var masterCollectionName = 'sqlite_master';
	var size = 5 * 1000 * 1000; // Database size in bytes
	var webSQL = null;
	var dbCache = {};

	if (typeof window !== 'undefined') {
	  webSQL = {
	    openDatabase: typeof openDatabase !== 'undefined' ? openDatabase : global.openDatabase
	  };
	}

	/**
	 * @private
	 */

	var WebSQL = exports.WebSQL = function () {
	  function WebSQL() {
	    var name = arguments.length <= 0 || arguments[0] === undefined ? 'kinvey' : arguments[0];

	    _classCallCheck(this, WebSQL);

	    this.name = name;
	  }

	  _createClass(WebSQL, [{
	    key: 'openTransaction',
	    value: function openTransaction(collection, query, parameters) {
	      var _this = this;

	      var write = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

	      var db = dbCache[this.name];
	      var escapedCollection = '"' + collection + '"';
	      var isMaster = collection === masterCollectionName;
	      var isMulti = (0, _isArray2.default)(query);

	      query = isMulti ? query : [[query, parameters]];

	      if (!db) {
	        db = webSQL.openDatabase(this.name, 1, '', size);
	        dbCache[this.name] = db;
	      }

	      var promise = new _babybird2.default(function (resolve, reject) {
	        var writeTxn = write || !(0, _isFunction2.default)(db.readTransaction);
	        db[writeTxn ? 'transaction' : 'readTransaction'](function (tx) {
	          if (write && !isMaster) {
	            tx.executeSql('CREATE TABLE IF NOT EXISTS ' + escapedCollection + ' ' + '(key BLOB PRIMARY KEY NOT NULL, value BLOB NOT NULL)');
	          }

	          var pending = query.length;
	          var responses = [];

	          (0, _forEach2.default)(query, function (parts) {
	            var sql = parts[0].replace('#{collection}', escapedCollection);

	            tx.executeSql(sql, parts[1], function (_, resultSet) {
	              var response = {
	                rowCount: resultSet.rowsAffected,
	                result: []
	              };

	              if (resultSet.rows.length) {
	                for (var i = 0, len = resultSet.rows.length; i < len; i++) {
	                  try {
	                    var value = resultSet.rows.item(i).value;
	                    var entity = isMaster ? value : JSON.parse(value);
	                    response.result.push(entity);
	                  } catch (err) {
	                    // Catch the error
	                  }
	                }
	              }

	              responses.push(response);
	              pending = pending - 1;

	              if (pending === 0) {
	                resolve(isMulti ? responses : responses.shift());
	              }
	            });
	          });
	        }, function (err) {
	          err = (0, _isString2.default)(err) ? err : err.message;

	          if (err && err.indexOf('no such table') === -1) {
	            return reject(new _errors.NotFoundError('The ' + collection + ' collection was not found on ' + ('the ' + _this.name + ' webSQL database.')));
	          }

	          var query = 'SELECT name AS value from #{collection} WHERE type = ? AND name = ?';
	          var parameters = ['table', collection];

	          return _this.openTransaction(masterCollectionName, query, parameters).then(function (response) {
	            if (response.result.length === 0) {
	              return reject(new _errors.NotFoundError('The ' + collection + ' collection was not found on ' + ('the ' + _this.name + ' webSQL database.')));
	            }

	            return reject(new _errors.KinveyError('Unable to open a transaction for the ' + collection + ' ' + ('collection on the ' + _this.name + ' webSQL database.')));
	          }).catch(function (err) {
	            reject(new _errors.KinveyError('Unable to open a transaction for the ' + collection + ' ' + ('collection on the ' + _this.name + ' webSQL database.'), err));
	          });
	        });
	      });

	      return promise;
	    }
	  }, {
	    key: 'find',
	    value: function find(collection) {
	      var sql = 'SELECT value FROM #{collection}';
	      var promise = this.openTransaction(collection, sql, []).then(function (response) {
	        return response.result;
	      }).catch(function (error) {
	        if (error instanceof _errors.NotFoundError) {
	          return [];
	        }

	        throw error;
	      });
	      return promise;
	    }
	  }, {
	    key: 'findById',
	    value: function findById(collection, id) {
	      var _this2 = this;

	      var sql = 'SELECT value FROM #{collection} WHERE key = ?';
	      var promise = this.openTransaction(collection, sql, [id]).then(function (response) {
	        var entities = response.result;

	        if (entities.length === 0) {
	          throw new _errors.NotFoundError('An entity with _id = ' + id + ' was not found in the ' + collection + ' ' + ('collection on the ' + _this2.name + ' webSQL database.'));
	        }

	        return entities[0];
	      });
	      return promise;
	    }
	  }, {
	    key: 'save',
	    value: function save(collection, entities) {
	      var queries = [];
	      entities = (0, _map2.default)(entities, function (entity) {
	        queries.push(['REPLACE INTO #{collection} (key, value) VALUES (?, ?)', [entity[idAttribute], JSON.stringify(entity)]]);

	        return entity;
	      });

	      var promise = this.openTransaction(collection, queries, null, true).then(function () {
	        return entities;
	      });
	      return promise;
	    }
	  }, {
	    key: 'removeById',
	    value: function removeById(collection, id) {
	      var _this3 = this;

	      var promise = this.openTransaction(collection, [['SELECT value FROM #{collection} WHERE key = ?', [id]], ['DELETE FROM #{collection} WHERE key = ?', [id]]], null, true).then(function (response) {
	        var entities = response[0].result;
	        var count = response[1].rowCount;
	        count = !!count ? count : entities.length;

	        if (count === 0) {
	          throw new _errors.NotFoundError('An entity with _id = ' + id + ' was not found in the ' + collection + ' ' + ('collection on the ' + _this3.name + ' webSQL database.'));
	        }

	        return {
	          count: 1,
	          entities: entities
	        };
	      });

	      return promise;
	    }
	  }], [{
	    key: 'isSupported',
	    value: function isSupported() {
	      return !!webSQL;
	    }
	  }]);

	  return WebSQL;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), (function() { return this; }())))

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(96),
	    baseIteratee = __webpack_require__(40),
	    baseMap = __webpack_require__(198),
	    isArray = __webpack_require__(35);

	/**
	 * Creates an array of values by running each element in `collection` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Array|Function|Object|string} [iteratee=_.identity]
	 *  The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * _.map([4, 8], square);
	 * // => [16, 64]
	 *
	 * _.map({ 'a': 4, 'b': 8 }, square);
	 * // => [16, 64] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */
	function map(collection, iteratee) {
	  var func = isArray(collection) ? arrayMap : baseMap;
	  return func(collection, baseIteratee(iteratee, 3));
	}

	module.exports = map;


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(18),
	    isArrayLike = __webpack_require__(30);

	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];

	  baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	module.exports = baseMap;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Log = undefined;

	var _loglevel = __webpack_require__(200);

	var _loglevel2 = _interopRequireDefault(_loglevel);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var originalFactory = _loglevel2.default.methodFactory;

	_loglevel2.default.methodFactory = function methodFactory(methodName, logLevel, loggerName) {
	  var rawMethod = originalFactory(methodName, logLevel, loggerName);

	  return function log(message) {
	    rawMethod('Kinvey: ' + message);
	  };
	};

	_loglevel2.default.setDefaultLevel(_loglevel2.default.levels.SILENT);
	exports.Log = _loglevel2.default;

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	* loglevel - https://github.com/pimterry/loglevel
	*
	* Copyright (c) 2013 Tim Perry
	* Licensed under the MIT license.
	*/
	(function (root, definition) {
	    "use strict";
	    if (typeof module === 'object' && module.exports && "function" === 'function') {
	        module.exports = definition();
	    } else if (true) {
	        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else {
	        root.log = definition();
	    }
	}(this, function () {
	    "use strict";
	    var noop = function() {};
	    var undefinedType = "undefined";

	    function realMethod(methodName) {
	        if (typeof console === undefinedType) {
	            return false; // We can't build a real method without a console to log to
	        } else if (console[methodName] !== undefined) {
	            return bindMethod(console, methodName);
	        } else if (console.log !== undefined) {
	            return bindMethod(console, 'log');
	        } else {
	            return noop;
	        }
	    }

	    function bindMethod(obj, methodName) {
	        var method = obj[methodName];
	        if (typeof method.bind === 'function') {
	            return method.bind(obj);
	        } else {
	            try {
	                return Function.prototype.bind.call(method, obj);
	            } catch (e) {
	                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
	                return function() {
	                    return Function.prototype.apply.apply(method, [obj, arguments]);
	                };
	            }
	        }
	    }

	    // these private functions always need `this` to be set properly

	    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
	        return function () {
	            if (typeof console !== undefinedType) {
	                replaceLoggingMethods.call(this, level, loggerName);
	                this[methodName].apply(this, arguments);
	            }
	        };
	    }

	    function replaceLoggingMethods(level, loggerName) {
	        /*jshint validthis:true */
	        for (var i = 0; i < logMethods.length; i++) {
	            var methodName = logMethods[i];
	            this[methodName] = (i < level) ?
	                noop :
	                this.methodFactory(methodName, level, loggerName);
	        }
	    }

	    function defaultMethodFactory(methodName, level, loggerName) {
	        /*jshint validthis:true */
	        return realMethod(methodName) ||
	               enableLoggingWhenConsoleArrives.apply(this, arguments);
	    }

	    var logMethods = [
	        "trace",
	        "debug",
	        "info",
	        "warn",
	        "error"
	    ];

	    function Logger(name, defaultLevel, factory) {
	      var self = this;
	      var currentLevel;
	      var storageKey = "loglevel";
	      if (name) {
	        storageKey += ":" + name;
	      }

	      function persistLevelIfPossible(levelNum) {
	          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

	          // Use localStorage if available
	          try {
	              window.localStorage[storageKey] = levelName;
	              return;
	          } catch (ignore) {}

	          // Use session cookie as fallback
	          try {
	              window.document.cookie =
	                encodeURIComponent(storageKey) + "=" + levelName + ";";
	          } catch (ignore) {}
	      }

	      function getPersistedLevel() {
	          var storedLevel;

	          try {
	              storedLevel = window.localStorage[storageKey];
	          } catch (ignore) {}

	          if (typeof storedLevel === undefinedType) {
	              try {
	                  var cookie = window.document.cookie;
	                  var location = cookie.indexOf(
	                      encodeURIComponent(storageKey) + "=");
	                  if (location) {
	                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
	                  }
	              } catch (ignore) {}
	          }

	          // If the stored level is not valid, treat it as if nothing was stored.
	          if (self.levels[storedLevel] === undefined) {
	              storedLevel = undefined;
	          }

	          return storedLevel;
	      }

	      /*
	       *
	       * Public API
	       *
	       */

	      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
	          "ERROR": 4, "SILENT": 5};

	      self.methodFactory = factory || defaultMethodFactory;

	      self.getLevel = function () {
	          return currentLevel;
	      };

	      self.setLevel = function (level, persist) {
	          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
	              level = self.levels[level.toUpperCase()];
	          }
	          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
	              currentLevel = level;
	              if (persist !== false) {  // defaults to true
	                  persistLevelIfPossible(level);
	              }
	              replaceLoggingMethods.call(self, level, name);
	              if (typeof console === undefinedType && level < self.levels.SILENT) {
	                  return "No console available for logging";
	              }
	          } else {
	              throw "log.setLevel() called with invalid level: " + level;
	          }
	      };

	      self.setDefaultLevel = function (level) {
	          if (!getPersistedLevel()) {
	              self.setLevel(level, false);
	          }
	      };

	      self.enableAll = function(persist) {
	          self.setLevel(self.levels.TRACE, persist);
	      };

	      self.disableAll = function(persist) {
	          self.setLevel(self.levels.SILENT, persist);
	      };

	      // Initialize with the right level
	      var initialLevel = getPersistedLevel();
	      if (initialLevel == null) {
	          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;
	      }
	      self.setLevel(initialLevel, false);
	    }

	    /*
	     *
	     * Package-level API
	     *
	     */

	    var defaultLogger = new Logger();

	    var _loggersByName = {};
	    defaultLogger.getLogger = function getLogger(name) {
	        if (typeof name !== "string" || name === "") {
	          throw new TypeError("You must supply a name when creating a logger.");
	        }

	        var logger = _loggersByName[name];
	        if (!logger) {
	          logger = _loggersByName[name] = new Logger(
	            name, defaultLogger.getLevel(), defaultLogger.methodFactory);
	        }
	        return logger;
	    };

	    // Grab the current global log variable in case of overwrite
	    var _log = (typeof window !== undefinedType) ? window.log : undefined;
	    defaultLogger.noConflict = function() {
	        if (typeof window !== undefinedType &&
	               window.log === defaultLogger) {
	            window.log = _log;
	        }

	        return defaultLogger;
	    };

	    return defaultLogger;
	}));


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	var arrayReduce = __webpack_require__(171),
	    baseEach = __webpack_require__(18),
	    baseIteratee = __webpack_require__(40),
	    baseReduce = __webpack_require__(202),
	    isArray = __webpack_require__(35);

	/**
	 * Reduces `collection` to a value which is the accumulated result of running
	 * each element in `collection` thru `iteratee`, where each successive
	 * invocation is supplied the return value of the previous. If `accumulator`
	 * is not given, the first element of `collection` is used as the initial
	 * value. The iteratee is invoked with four arguments:
	 * (accumulator, value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.reduce`, `_.reduceRight`, and `_.transform`.
	 *
	 * The guarded methods are:
	 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	 * and `sortBy`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @returns {*} Returns the accumulated value.
	 * @example
	 *
	 * _.reduce([1, 2], function(sum, n) {
	 *   return sum + n;
	 * }, 0);
	 * // => 3
	 *
	 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	 *   (result[value] || (result[value] = [])).push(key);
	 *   return result;
	 * }, {});
	 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	 */
	function reduce(collection, iteratee, accumulator) {
	  var func = isArray(collection) ? arrayReduce : baseReduce,
	      initAccum = arguments.length < 3;

	  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	}

	module.exports = reduce;


/***/ },
/* 202 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.reduce` and `_.reduceRight`, without support
	 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} accumulator The initial value.
	 * @param {boolean} initAccum Specify using the first or last element of
	 *  `collection` as the initial value.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @returns {*} Returns the accumulated value.
	 */
	function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	  eachFunc(collection, function(value, index, collection) {
	    accumulator = initAccum
	      ? (initAccum = false, value)
	      : iteratee(accumulator, value, index, collection);
	  });
	  return accumulator;
	}

	module.exports = baseReduce;


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ParseMiddleware = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _middleware = __webpack_require__(141);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @private
	 */

	var ParseMiddleware = exports.ParseMiddleware = function (_KinveyMiddleware) {
	  _inherits(ParseMiddleware, _KinveyMiddleware);

	  function ParseMiddleware() {
	    var name = arguments.length <= 0 || arguments[0] === undefined ? 'Kinvey Parse Middleware' : arguments[0];

	    _classCallCheck(this, ParseMiddleware);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(ParseMiddleware).call(this, name));
	  }

	  _createClass(ParseMiddleware, [{
	    key: 'handle',
	    value: function handle(request) {
	      return _get(Object.getPrototypeOf(ParseMiddleware.prototype), 'handle', this).call(this, request).then(function () {
	        var response = request.response;

	        if (response && response.data) {
	          var contentType = response.headers['content-type'] || response.headers['Content-Type'];

	          if (contentType.indexOf('application/json') === 0) {
	            try {
	              response.data = JSON.parse(response.data);
	            } catch (err) {
	              response.data = response.data;
	            }

	            request.response = response;
	          }
	        }

	        return request;
	      });
	    }
	  }]);

	  return ParseMiddleware;
	}(_middleware.KinveyMiddleware);

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SerializeMiddleware = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _middleware = __webpack_require__(141);

	var _forEach = __webpack_require__(16);

	var _forEach2 = _interopRequireDefault(_forEach);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @private
	 */

	var SerializeMiddleware = exports.SerializeMiddleware = function (_KinveyMiddleware) {
	  _inherits(SerializeMiddleware, _KinveyMiddleware);

	  function SerializeMiddleware() {
	    var name = arguments.length <= 0 || arguments[0] === undefined ? 'Kinvey Serialize Middleware' : arguments[0];

	    _classCallCheck(this, SerializeMiddleware);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(SerializeMiddleware).call(this, name));
	  }

	  _createClass(SerializeMiddleware, [{
	    key: 'handle',
	    value: function handle(request) {
	      return _get(Object.getPrototypeOf(SerializeMiddleware.prototype), 'handle', this).call(this, request).then(function () {
	        if (request && request.data) {
	          var contentType = request.headers['content-type'] || request.headers['Content-Type'];

	          if (contentType.indexOf('application/json') === 0) {
	            request.data = JSON.stringify(request.data);
	          } else if (contentType.indexOf('application/x-www-form-urlencoded') === 0) {
	            (function () {
	              var data = request.data;
	              var str = [];
	              var keys = Object.keys(data);

	              (0, _forEach2.default)(keys, function (key) {
	                str.push(global.encodeURIComponent(key) + '=' + global.encodeURIComponent(data[key]));
	              });

	              request.data = str.join('&');
	            })();
	          }
	        }

	        return request;
	      });
	    }
	  }]);

	  return SerializeMiddleware;
	}(_middleware.KinveyMiddleware);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var baseFindIndex = __webpack_require__(195),
	    baseIteratee = __webpack_require__(40);

	/**
	 * This method is like `_.find` except that it returns the index of the first
	 * element `predicate` returns truthy for instead of the element itself.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.1.0
	 * @category Array
	 * @param {Array} array The array to search.
	 * @param {Array|Function|Object|string} [predicate=_.identity]
	 *  The function invoked per iteration.
	 * @returns {number} Returns the index of the found element, else `-1`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * _.findIndex(users, function(o) { return o.user == 'barney'; });
	 * // => 0
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.findIndex(users, { 'user': 'fred', 'active': false });
	 * // => 1
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.findIndex(users, ['active', false]);
	 * // => 0
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.findIndex(users, 'active');
	 * // => 2
	 */
	function findIndex(array, predicate) {
	  return (array && array.length)
	    ? baseFindIndex(array, baseIteratee(predicate, 3))
	    : -1;
	}

	module.exports = findIndex;


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.byteCount = byteCount;
	exports.randomString = randomString;

	var _uid = __webpack_require__(207);

	var _uid2 = _interopRequireDefault(_uid);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @private
	 */
	function byteCount(str) {
	  var count = 0;
	  var stringLength = str.length;
	  str = String(str || '');

	  for (var i = 0; i < stringLength; i++) {
	    var partCount = encodeURI(str[i]).split('%').length;
	    count += partCount === 1 ? 1 : partCount - 1;
	  }

	  return count;
	}

	function randomString(size) {
	  var prefix = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

	  return '' + prefix + (0, _uid2.default)(size);
	}

/***/ },
/* 207 */
/***/ function(module, exports) {

	/**
	 * Export `uid`
	 */

	module.exports = uid;

	/**
	 * Create a `uid`
	 *
	 * @param {String} len
	 * @return {String} uid
	 */

	function uid(len) {
	  len = len || 7;
	  return Math.random().toString(35).substr(2, len);
	}


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Generated by CoffeeScript 1.10.0
	var slice = [].slice;

	(function(root, factory) {
	  if (('function' === "function") && (__webpack_require__(209) != null)) {
	    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== "undefined" && exports !== null) {
	    return module.exports = factory();
	  } else {
	    return root.UrlPattern = factory();
	  }
	})(this, function() {
	  var P, UrlPattern, astNodeContainsSegmentsForProvidedParams, astNodeToNames, astNodeToRegexString, baseAstNodeToRegexString, concatMap, defaultOptions, escapeForRegex, getParam, keysAndValuesToObject, newParser, regexGroupCount, stringConcatMap, stringify;
	  escapeForRegex = function(string) {
	    return string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	  };
	  concatMap = function(array, f) {
	    var i, length, results;
	    results = [];
	    i = -1;
	    length = array.length;
	    while (++i < length) {
	      results = results.concat(f(array[i]));
	    }
	    return results;
	  };
	  stringConcatMap = function(array, f) {
	    var i, length, result;
	    result = '';
	    i = -1;
	    length = array.length;
	    while (++i < length) {
	      result += f(array[i]);
	    }
	    return result;
	  };
	  regexGroupCount = function(regex) {
	    return (new RegExp(regex.toString() + '|')).exec('').length - 1;
	  };
	  keysAndValuesToObject = function(keys, values) {
	    var i, key, length, object, value;
	    object = {};
	    i = -1;
	    length = keys.length;
	    while (++i < length) {
	      key = keys[i];
	      value = values[i];
	      if (value == null) {
	        continue;
	      }
	      if (object[key] != null) {
	        if (!Array.isArray(object[key])) {
	          object[key] = [object[key]];
	        }
	        object[key].push(value);
	      } else {
	        object[key] = value;
	      }
	    }
	    return object;
	  };
	  P = {};
	  P.Result = function(value, rest) {
	    this.value = value;
	    this.rest = rest;
	  };
	  P.Tagged = function(tag, value) {
	    this.tag = tag;
	    this.value = value;
	  };
	  P.tag = function(tag, parser) {
	    return function(input) {
	      var result, tagged;
	      result = parser(input);
	      if (result == null) {
	        return;
	      }
	      tagged = new P.Tagged(tag, result.value);
	      return new P.Result(tagged, result.rest);
	    };
	  };
	  P.regex = function(regex) {
	    return function(input) {
	      var matches, result;
	      matches = regex.exec(input);
	      if (matches == null) {
	        return;
	      }
	      result = matches[0];
	      return new P.Result(result, input.slice(result.length));
	    };
	  };
	  P.sequence = function() {
	    var parsers;
	    parsers = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    return function(input) {
	      var i, length, parser, rest, result, values;
	      i = -1;
	      length = parsers.length;
	      values = [];
	      rest = input;
	      while (++i < length) {
	        parser = parsers[i];
	        result = parser(rest);
	        if (result == null) {
	          return;
	        }
	        values.push(result.value);
	        rest = result.rest;
	      }
	      return new P.Result(values, rest);
	    };
	  };
	  P.pick = function() {
	    var indexes, parsers;
	    indexes = arguments[0], parsers = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    return function(input) {
	      var array, result;
	      result = P.sequence.apply(P, parsers)(input);
	      if (result == null) {
	        return;
	      }
	      array = result.value;
	      result.value = array[indexes];
	      return result;
	    };
	  };
	  P.string = function(string) {
	    var length;
	    length = string.length;
	    return function(input) {
	      if (input.slice(0, length) === string) {
	        return new P.Result(string, input.slice(length));
	      }
	    };
	  };
	  P.lazy = function(fn) {
	    var cached;
	    cached = null;
	    return function(input) {
	      if (cached == null) {
	        cached = fn();
	      }
	      return cached(input);
	    };
	  };
	  P.baseMany = function(parser, end, stringResult, atLeastOneResultRequired, input) {
	    var endResult, parserResult, rest, results;
	    rest = input;
	    results = stringResult ? '' : [];
	    while (true) {
	      if (end != null) {
	        endResult = end(rest);
	        if (endResult != null) {
	          break;
	        }
	      }
	      parserResult = parser(rest);
	      if (parserResult == null) {
	        break;
	      }
	      if (stringResult) {
	        results += parserResult.value;
	      } else {
	        results.push(parserResult.value);
	      }
	      rest = parserResult.rest;
	    }
	    if (atLeastOneResultRequired && results.length === 0) {
	      return;
	    }
	    return new P.Result(results, rest);
	  };
	  P.many1 = function(parser) {
	    return function(input) {
	      return P.baseMany(parser, null, false, true, input);
	    };
	  };
	  P.concatMany1Till = function(parser, end) {
	    return function(input) {
	      return P.baseMany(parser, end, true, true, input);
	    };
	  };
	  P.firstChoice = function() {
	    var parsers;
	    parsers = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    return function(input) {
	      var i, length, parser, result;
	      i = -1;
	      length = parsers.length;
	      while (++i < length) {
	        parser = parsers[i];
	        result = parser(input);
	        if (result != null) {
	          return result;
	        }
	      }
	    };
	  };
	  newParser = function(options) {
	    var U;
	    U = {};
	    U.wildcard = P.tag('wildcard', P.string(options.wildcardChar));
	    U.optional = P.tag('optional', P.pick(1, P.string(options.optionalSegmentStartChar), P.lazy(function() {
	      return U.pattern;
	    }), P.string(options.optionalSegmentEndChar)));
	    U.name = P.regex(new RegExp("^[" + options.segmentNameCharset + "]+"));
	    U.named = P.tag('named', P.pick(1, P.string(options.segmentNameStartChar), P.lazy(function() {
	      return U.name;
	    })));
	    U.escapedChar = P.pick(1, P.string(options.escapeChar), P.regex(/^./));
	    U["static"] = P.tag('static', P.concatMany1Till(P.firstChoice(P.lazy(function() {
	      return U.escapedChar;
	    }), P.regex(/^./)), P.firstChoice(P.string(options.segmentNameStartChar), P.string(options.optionalSegmentStartChar), P.string(options.optionalSegmentEndChar), U.wildcard)));
	    U.token = P.lazy(function() {
	      return P.firstChoice(U.wildcard, U.optional, U.named, U["static"]);
	    });
	    U.pattern = P.many1(P.lazy(function() {
	      return U.token;
	    }));
	    return U;
	  };
	  defaultOptions = {
	    escapeChar: '\\',
	    segmentNameStartChar: ':',
	    segmentValueCharset: 'a-zA-Z0-9-_~ %',
	    segmentNameCharset: 'a-zA-Z0-9',
	    optionalSegmentStartChar: '(',
	    optionalSegmentEndChar: ')',
	    wildcardChar: '*'
	  };
	  baseAstNodeToRegexString = function(astNode, segmentValueCharset) {
	    if (Array.isArray(astNode)) {
	      return stringConcatMap(astNode, function(node) {
	        return baseAstNodeToRegexString(node, segmentValueCharset);
	      });
	    }
	    switch (astNode.tag) {
	      case 'wildcard':
	        return '(.*?)';
	      case 'named':
	        return "([" + segmentValueCharset + "]+)";
	      case 'static':
	        return escapeForRegex(astNode.value);
	      case 'optional':
	        return '(?:' + baseAstNodeToRegexString(astNode.value, segmentValueCharset) + ')?';
	    }
	  };
	  astNodeToRegexString = function(astNode, segmentValueCharset) {
	    if (segmentValueCharset == null) {
	      segmentValueCharset = defaultOptions.segmentValueCharset;
	    }
	    return '^' + baseAstNodeToRegexString(astNode, segmentValueCharset) + '$';
	  };
	  astNodeToNames = function(astNode) {
	    if (Array.isArray(astNode)) {
	      return concatMap(astNode, astNodeToNames);
	    }
	    switch (astNode.tag) {
	      case 'wildcard':
	        return ['_'];
	      case 'named':
	        return [astNode.value];
	      case 'static':
	        return [];
	      case 'optional':
	        return astNodeToNames(astNode.value);
	    }
	  };
	  getParam = function(params, key, nextIndexes, sideEffects) {
	    var index, maxIndex, result, value;
	    if (sideEffects == null) {
	      sideEffects = false;
	    }
	    value = params[key];
	    if (value == null) {
	      if (sideEffects) {
	        throw new Error("no values provided for key `" + key + "`");
	      } else {
	        return;
	      }
	    }
	    index = nextIndexes[key] || 0;
	    maxIndex = Array.isArray(value) ? value.length - 1 : 0;
	    if (index > maxIndex) {
	      if (sideEffects) {
	        throw new Error("too few values provided for key `" + key + "`");
	      } else {
	        return;
	      }
	    }
	    result = Array.isArray(value) ? value[index] : value;
	    if (sideEffects) {
	      nextIndexes[key] = index + 1;
	    }
	    return result;
	  };
	  astNodeContainsSegmentsForProvidedParams = function(astNode, params, nextIndexes) {
	    var i, length;
	    if (Array.isArray(astNode)) {
	      i = -1;
	      length = astNode.length;
	      while (++i < length) {
	        if (astNodeContainsSegmentsForProvidedParams(astNode[i], params, nextIndexes)) {
	          return true;
	        }
	      }
	      return false;
	    }
	    switch (astNode.tag) {
	      case 'wildcard':
	        return getParam(params, '_', nextIndexes, false) != null;
	      case 'named':
	        return getParam(params, astNode.value, nextIndexes, false) != null;
	      case 'static':
	        return false;
	      case 'optional':
	        return astNodeContainsSegmentsForProvidedParams(astNode.value, params, nextIndexes);
	    }
	  };
	  stringify = function(astNode, params, nextIndexes) {
	    if (Array.isArray(astNode)) {
	      return stringConcatMap(astNode, function(node) {
	        return stringify(node, params, nextIndexes);
	      });
	    }
	    switch (astNode.tag) {
	      case 'wildcard':
	        return getParam(params, '_', nextIndexes, true);
	      case 'named':
	        return getParam(params, astNode.value, nextIndexes, true);
	      case 'static':
	        return astNode.value;
	      case 'optional':
	        if (astNodeContainsSegmentsForProvidedParams(astNode.value, params, nextIndexes)) {
	          return stringify(astNode.value, params, nextIndexes);
	        } else {
	          return '';
	        }
	    }
	  };
	  UrlPattern = function(arg1, arg2) {
	    var groupCount, options, parsed, parser, withoutWhitespace;
	    if (arg1 instanceof UrlPattern) {
	      this.isRegex = arg1.isRegex;
	      this.regex = arg1.regex;
	      this.ast = arg1.ast;
	      this.names = arg1.names;
	      return;
	    }
	    this.isRegex = arg1 instanceof RegExp;
	    if (!(('string' === typeof arg1) || this.isRegex)) {
	      throw new TypeError('argument must be a regex or a string');
	    }
	    if (this.isRegex) {
	      this.regex = arg1;
	      if (arg2 != null) {
	        if (!Array.isArray(arg2)) {
	          throw new Error('if first argument is a regex the second argument may be an array of group names but you provided something else');
	        }
	        groupCount = regexGroupCount(this.regex);
	        if (arg2.length !== groupCount) {
	          throw new Error("regex contains " + groupCount + " groups but array of group names contains " + arg2.length);
	        }
	        this.names = arg2;
	      }
	      return;
	    }
	    if (arg1 === '') {
	      throw new Error('argument must not be the empty string');
	    }
	    withoutWhitespace = arg1.replace(/\s+/g, '');
	    if (withoutWhitespace !== arg1) {
	      throw new Error('argument must not contain whitespace');
	    }
	    options = {
	      escapeChar: (arg2 != null ? arg2.escapeChar : void 0) || defaultOptions.escapeChar,
	      segmentNameStartChar: (arg2 != null ? arg2.segmentNameStartChar : void 0) || defaultOptions.segmentNameStartChar,
	      segmentNameCharset: (arg2 != null ? arg2.segmentNameCharset : void 0) || defaultOptions.segmentNameCharset,
	      segmentValueCharset: (arg2 != null ? arg2.segmentValueCharset : void 0) || defaultOptions.segmentValueCharset,
	      optionalSegmentStartChar: (arg2 != null ? arg2.optionalSegmentStartChar : void 0) || defaultOptions.optionalSegmentStartChar,
	      optionalSegmentEndChar: (arg2 != null ? arg2.optionalSegmentEndChar : void 0) || defaultOptions.optionalSegmentEndChar,
	      wildcardChar: (arg2 != null ? arg2.wildcardChar : void 0) || defaultOptions.wildcardChar
	    };
	    parser = newParser(options);
	    parsed = parser.pattern(arg1);
	    if (parsed == null) {
	      throw new Error("couldn't parse pattern");
	    }
	    if (parsed.rest !== '') {
	      throw new Error("could only partially parse pattern");
	    }
	    this.ast = parsed.value;
	    this.regex = new RegExp(astNodeToRegexString(this.ast, options.segmentValueCharset));
	    this.names = astNodeToNames(this.ast);
	  };
	  UrlPattern.prototype.match = function(url) {
	    var groups, match;
	    match = this.regex.exec(url);
	    if (match == null) {
	      return null;
	    }
	    groups = match.slice(1);
	    if (this.names) {
	      return keysAndValuesToObject(this.names, groups);
	    } else {
	      return groups;
	    }
	  };
	  UrlPattern.prototype.stringify = function(params) {
	    if (params == null) {
	      params = {};
	    }
	    if (this.isRegex) {
	      throw new Error("can't stringify patterns generated from a regex");
	    }
	    if (params !== Object(params)) {
	      throw new Error("argument must be an object or undefined");
	    }
	    return stringify(this.ast, params, {});
	  };
	  UrlPattern.escapeForRegex = escapeForRegex;
	  UrlPattern.concatMap = concatMap;
	  UrlPattern.stringConcatMap = stringConcatMap;
	  UrlPattern.regexGroupCount = regexGroupCount;
	  UrlPattern.keysAndValuesToObject = keysAndValuesToObject;
	  UrlPattern.P = P;
	  UrlPattern.newParser = newParser;
	  UrlPattern.defaultOptions = defaultOptions;
	  UrlPattern.astNodeToRegexString = astNodeToRegexString;
	  UrlPattern.astNodeToNames = astNodeToNames;
	  UrlPattern.getParam = getParam;
	  UrlPattern.astNodeContainsSegmentsForProvidedParams = astNodeContainsSegmentsForProvidedParams;
	  UrlPattern.stringify = stringify;
	  return UrlPattern;
	});


/***/ },
/* 209 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Stringify = __webpack_require__(211);
	var Parse = __webpack_require__(213);

	module.exports = {
	    stringify: Stringify,
	    parse: Parse
	};


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(212);

	var internals = {
	    delimiter: '&',
	    arrayPrefixGenerators: {
	        brackets: function (prefix) {
	            return prefix + '[]';
	        },
	        indices: function (prefix, key) {
	            return prefix + '[' + key + ']';
	        },
	        repeat: function (prefix) {
	            return prefix;
	        }
	    },
	    strictNullHandling: false,
	    skipNulls: false,
	    encode: true
	};

	internals.stringify = function (object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encode, filter, sort, allowDots) {
	    var obj = object;
	    if (typeof filter === 'function') {
	        obj = filter(prefix, obj);
	    } else if (Utils.isBuffer(obj)) {
	        obj = String(obj);
	    } else if (obj instanceof Date) {
	        obj = obj.toISOString();
	    } else if (obj === null) {
	        if (strictNullHandling) {
	            return encode ? Utils.encode(prefix) : prefix;
	        }

	        obj = '';
	    }

	    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {
	        if (encode) {
	            return [Utils.encode(prefix) + '=' + Utils.encode(obj)];
	        }
	        return [prefix + '=' + obj];
	    }

	    var values = [];

	    if (typeof obj === 'undefined') {
	        return values;
	    }

	    var objKeys;
	    if (Array.isArray(filter)) {
	        objKeys = filter;
	    } else {
	        var keys = Object.keys(obj);
	        objKeys = sort ? keys.sort(sort) : keys;
	    }

	    for (var i = 0; i < objKeys.length; ++i) {
	        var key = objKeys[i];

	        if (skipNulls && obj[key] === null) {
	            continue;
	        }

	        if (Array.isArray(obj)) {
	            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encode, filter, sort, allowDots));
	        } else {
	            values = values.concat(internals.stringify(obj[key], prefix + (allowDots ? '.' + key : '[' + key + ']'), generateArrayPrefix, strictNullHandling, skipNulls, encode, filter, sort, allowDots));
	        }
	    }

	    return values;
	};

	module.exports = function (object, opts) {
	    var obj = object;
	    var options = opts || {};
	    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;
	    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;
	    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : internals.skipNulls;
	    var encode = typeof options.encode === 'boolean' ? options.encode : internals.encode;
	    var sort = typeof options.sort === 'function' ? options.sort : null;
	    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
	    var objKeys;
	    var filter;
	    if (typeof options.filter === 'function') {
	        filter = options.filter;
	        obj = filter('', obj);
	    } else if (Array.isArray(options.filter)) {
	        objKeys = filter = options.filter;
	    }

	    var keys = [];

	    if (typeof obj !== 'object' || obj === null) {
	        return '';
	    }

	    var arrayFormat;
	    if (options.arrayFormat in internals.arrayPrefixGenerators) {
	        arrayFormat = options.arrayFormat;
	    } else if ('indices' in options) {
	        arrayFormat = options.indices ? 'indices' : 'repeat';
	    } else {
	        arrayFormat = 'indices';
	    }

	    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];

	    if (!objKeys) {
	        objKeys = Object.keys(obj);
	    }

	    if (sort) {
	        objKeys.sort(sort);
	    }

	    for (var i = 0; i < objKeys.length; ++i) {
	        var key = objKeys[i];

	        if (skipNulls && obj[key] === null) {
	            continue;
	        }

	        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encode, filter, sort, allowDots));
	    }

	    return keys.join(delimiter);
	};


/***/ },
/* 212 */
/***/ function(module, exports) {

	'use strict';

	var hexTable = (function () {
	    var array = new Array(256);
	    for (var i = 0; i < 256; ++i) {
	        array[i] = '%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase();
	    }

	    return array;
	}());

	exports.arrayToObject = function (source, options) {
	    var obj = options.plainObjects ? Object.create(null) : {};
	    for (var i = 0; i < source.length; ++i) {
	        if (typeof source[i] !== 'undefined') {
	            obj[i] = source[i];
	        }
	    }

	    return obj;
	};

	exports.merge = function (target, source, options) {
	    if (!source) {
	        return target;
	    }

	    if (typeof source !== 'object') {
	        if (Array.isArray(target)) {
	            target.push(source);
	        } else if (typeof target === 'object') {
	            target[source] = true;
	        } else {
	            return [target, source];
	        }

	        return target;
	    }

	    if (typeof target !== 'object') {
	        return [target].concat(source);
	    }

	    var mergeTarget = target;
	    if (Array.isArray(target) && !Array.isArray(source)) {
	        mergeTarget = exports.arrayToObject(target, options);
	    }

		return Object.keys(source).reduce(function (acc, key) {
	        var value = source[key];

	        if (Object.prototype.hasOwnProperty.call(acc, key)) {
	            acc[key] = exports.merge(acc[key], value, options);
	        } else {
	            acc[key] = value;
	        }
			return acc;
	    }, mergeTarget);
	};

	exports.decode = function (str) {
	    try {
	        return decodeURIComponent(str.replace(/\+/g, ' '));
	    } catch (e) {
	        return str;
	    }
	};

	exports.encode = function (str) {
	    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
	    // It has been adapted here for stricter adherence to RFC 3986
	    if (str.length === 0) {
	        return str;
	    }

	    var string = typeof str === 'string' ? str : String(str);

	    var out = '';
	    for (var i = 0; i < string.length; ++i) {
	        var c = string.charCodeAt(i);

	        if (
	            c === 0x2D || // -
	            c === 0x2E || // .
	            c === 0x5F || // _
	            c === 0x7E || // ~
	            (c >= 0x30 && c <= 0x39) || // 0-9
	            (c >= 0x41 && c <= 0x5A) || // a-z
	            (c >= 0x61 && c <= 0x7A) // A-Z
	        ) {
	            out += string.charAt(i);
	            continue;
	        }

	        if (c < 0x80) {
	            out = out + hexTable[c];
	            continue;
	        }

	        if (c < 0x800) {
	            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
	            continue;
	        }

	        if (c < 0xD800 || c >= 0xE000) {
	            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
	            continue;
	        }

	        i += 1;
	        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
	        out += (hexTable[0xF0 | (c >> 18)] + hexTable[0x80 | ((c >> 12) & 0x3F)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
	    }

	    return out;
	};

	exports.compact = function (obj, references) {
	    if (typeof obj !== 'object' || obj === null) {
	        return obj;
	    }

	    var refs = references || [];
	    var lookup = refs.indexOf(obj);
	    if (lookup !== -1) {
	        return refs[lookup];
	    }

	    refs.push(obj);

	    if (Array.isArray(obj)) {
	        var compacted = [];

	        for (var i = 0; i < obj.length; ++i) {
	            if (typeof obj[i] !== 'undefined') {
	                compacted.push(obj[i]);
	            }
	        }

	        return compacted;
	    }

	    var keys = Object.keys(obj);
	    for (var j = 0; j < keys.length; ++j) {
	        var key = keys[j];
	        obj[key] = exports.compact(obj[key], refs);
	    }

	    return obj;
	};

	exports.isRegExp = function (obj) {
	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};

	exports.isBuffer = function (obj) {
	    if (obj === null || typeof obj === 'undefined') {
	        return false;
	    }

	    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
	};


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(212);

	var internals = {
	    delimiter: '&',
	    depth: 5,
	    arrayLimit: 20,
	    parameterLimit: 1000,
	    strictNullHandling: false,
	    plainObjects: false,
	    allowPrototypes: false,
	    allowDots: false
	};

	internals.parseValues = function (str, options) {
	    var obj = {};
	    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

	    for (var i = 0; i < parts.length; ++i) {
	        var part = parts[i];
	        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

	        if (pos === -1) {
	            obj[Utils.decode(part)] = '';

	            if (options.strictNullHandling) {
	                obj[Utils.decode(part)] = null;
	            }
	        } else {
	            var key = Utils.decode(part.slice(0, pos));
	            var val = Utils.decode(part.slice(pos + 1));

	            if (Object.prototype.hasOwnProperty.call(obj, key)) {
	                obj[key] = [].concat(obj[key]).concat(val);
	            } else {
	                obj[key] = val;
	            }
	        }
	    }

	    return obj;
	};

	internals.parseObject = function (chain, val, options) {
	    if (!chain.length) {
	        return val;
	    }

	    var root = chain.shift();

	    var obj;
	    if (root === '[]') {
	        obj = [];
	        obj = obj.concat(internals.parseObject(chain, val, options));
	    } else {
	        obj = options.plainObjects ? Object.create(null) : {};
	        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
	        var index = parseInt(cleanRoot, 10);
	        if (
	            !isNaN(index) &&
	            root !== cleanRoot &&
	            String(index) === cleanRoot &&
	            index >= 0 &&
	            (options.parseArrays && index <= options.arrayLimit)
	        ) {
	            obj = [];
	            obj[index] = internals.parseObject(chain, val, options);
	        } else {
	            obj[cleanRoot] = internals.parseObject(chain, val, options);
	        }
	    }

	    return obj;
	};

	internals.parseKeys = function (givenKey, val, options) {
	    if (!givenKey) {
	        return;
	    }

	    // Transform dot notation to bracket notation
	    var key = options.allowDots ? givenKey.replace(/\.([^\.\[]+)/g, '[$1]') : givenKey;

	    // The regex chunks

	    var parent = /^([^\[\]]*)/;
	    var child = /(\[[^\[\]]*\])/g;

	    // Get the parent

	    var segment = parent.exec(key);

	    // Stash the parent if it exists

	    var keys = [];
	    if (segment[1]) {
	        // If we aren't using plain objects, optionally prefix keys
	        // that would overwrite object prototype properties
	        if (!options.plainObjects && Object.prototype.hasOwnProperty(segment[1])) {
	            if (!options.allowPrototypes) {
	                return;
	            }
	        }

	        keys.push(segment[1]);
	    }

	    // Loop through children appending to the array until we hit depth

	    var i = 0;
	    while ((segment = child.exec(key)) !== null && i < options.depth) {
	        i += 1;
	        if (!options.plainObjects && Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
	            if (!options.allowPrototypes) {
	                continue;
	            }
	        }
	        keys.push(segment[1]);
	    }

	    // If there's a remainder, just add whatever is left

	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }

	    return internals.parseObject(keys, val, options);
	};

	module.exports = function (str, opts) {
	    var options = opts || {};
	    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
	    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
	    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
	    options.parseArrays = options.parseArrays !== false;
	    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : internals.allowDots;
	    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : internals.plainObjects;
	    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : internals.allowPrototypes;
	    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;
	    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;

	    if (
	        str === '' ||
	        str === null ||
	        typeof str === 'undefined'
	    ) {
	        return options.plainObjects ? Object.create(null) : {};
	    }

	    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
	    var obj = options.plainObjects ? Object.create(null) : {};

	    // Iterate over the keys and setup the new object

	    var keys = Object.keys(tempObj);
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        var newObj = internals.parseKeys(key, tempObj[key], options);
	        obj = Utils.merge(obj, newObj, options);
	    }

	    return Utils.compact(obj);
	};


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = __webpack_require__(215);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(216);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	function isString(arg) {
	  return typeof arg === "string";
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(64)(module), (function() { return this; }())))

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(217);
	exports.encode = exports.stringify = __webpack_require__(218);


/***/ },
/* 217 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ },
/* 218 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var querystring = __webpack_require__(220)
	  , extend = __webpack_require__(223)
	  , url = __webpack_require__(214)

	module.exports = function appendQuery(uri, q) {
	  var parts = url.parse(uri, true)
	    , parsedQuery = extend(true, {}, parts.query, typeof q === 'string' ? querystring.parse(q) : q)

	  parts.search = '?' + serialize(parsedQuery)
	  return url.format(parts)
	}

	// serialize an object recursively
	function serialize(obj, prefix) {
	  var str = []
	    , useArraySyntax = false

	  // if there's a prefix, and this object is an array, use array syntax
	  // i.e., `prefix[]=foo&prefix[]=bar` instead of `prefix[0]=foo&prefix[1]=bar`
	  if (Array.isArray(obj) && prefix) {
	    useArraySyntax = true
	  }

	  Object.keys(obj).forEach(function (prop) {
	    var key, query, val = obj[prop]

	    key = prefix ?
	      prefix + '[' + (useArraySyntax ? '' : prop) + ']' :
	      prop

	    query = typeof val === 'object' ?
	      serialize(val, key) :
	      encodeURIComponent(key) + '=' + encodeURIComponent(val)

	    str.push(query)
	  })

	  return str.join('&')
	}


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(221);
	exports.encode = exports.stringify = __webpack_require__(222);


/***/ },
/* 221 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};

	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 222 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return map(objectKeys(obj), function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (isArray(obj[k])) {
	        return map(obj[k], function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};

	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};

	function map (xs, f) {
	  if (xs.map) return xs.map(f);
	  var res = [];
	  for (var i = 0; i < xs.length; i++) {
	    res.push(f(xs[i], i));
	  }
	  return res;
	}

	var objectKeys = Object.keys || function (obj) {
	  var res = [];
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
	  }
	  return res;
	};


/***/ },
/* 223 */
/***/ function(module, exports) {

	var hasOwn = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;
	var undefined;

	var isPlainObject = function isPlainObject(obj) {
		"use strict";
		if (!obj || toString.call(obj) !== '[object Object]' || obj.nodeType || obj.setInterval) {
			return false;
		}

		var has_own_constructor = hasOwn.call(obj, 'constructor');
		var has_is_property_of_method = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
		// Not own constructor property must be Object
		if (obj.constructor && !has_own_constructor && !has_is_property_of_method) {
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		var key;
		for (key in obj) {}

		return key === undefined || hasOwn.call(obj, key);
	};

	module.exports = function extend() {
		"use strict";
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[0],
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if (typeof target === "boolean") {
			deep = target;
			target = arguments[1] || {};
			// skip the boolean and the target
			i = 2;
		} else if (typeof target !== "object" && typeof target !== "function" || target == undefined) {
				target = {};
		}

		for (; i < length; ++i) {
			// Only deal with non-null/undefined values
			if ((options = arguments[i]) != null) {
				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];

					// Prevent never-ending loop
					if (target === copy) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && Array.isArray(src) ? src : [];
						} else {
							clone = src && isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = extend(deep, clone, copy);

					// Don't bring in undefined values
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};



/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	var getTag = __webpack_require__(86),
	    isArguments = __webpack_require__(28),
	    isArray = __webpack_require__(35),
	    isArrayLike = __webpack_require__(30),
	    isBuffer = __webpack_require__(179),
	    isFunction = __webpack_require__(11),
	    isObjectLike = __webpack_require__(34),
	    isString = __webpack_require__(36),
	    keys = __webpack_require__(22);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    setTag = '[object Set]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
	var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

	/**
	 * Checks if `value` is an empty object, collection, map, or set.
	 *
	 * Objects are considered empty if they have no own enumerable string keyed
	 * properties.
	 *
	 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	 * jQuery-like collections are considered empty if they have a `length` of `0`.
	 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	 * @example
	 *
	 * _.isEmpty(null);
	 * // => true
	 *
	 * _.isEmpty(true);
	 * // => true
	 *
	 * _.isEmpty(1);
	 * // => true
	 *
	 * _.isEmpty([1, 2, 3]);
	 * // => false
	 *
	 * _.isEmpty({ 'a': 1 });
	 * // => false
	 */
	function isEmpty(value) {
	  if (isArrayLike(value) &&
	      (isArray(value) || isString(value) || isFunction(value.splice) ||
	        isArguments(value) || isBuffer(value))) {
	    return !value.length;
	  }
	  if (isObjectLike(value)) {
	    var tag = getTag(value);
	    if (tag == mapTag || tag == setTag) {
	      return !value.size;
	    }
	  }
	  for (var key in value) {
	    if (hasOwnProperty.call(value, key)) {
	      return false;
	    }
	  }
	  return !(nonEnumShadows && keys(value).length);
	}

	module.exports = isEmpty;


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Response = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _enums = __webpack_require__(128);

	var _errors = __webpack_require__(7);

	var _assign = __webpack_require__(114);

	var _assign2 = _interopRequireDefault(_assign);

	var _forEach = __webpack_require__(16);

	var _forEach2 = _interopRequireDefault(_forEach);

	var _isString = __webpack_require__(36);

	var _isString2 = _interopRequireDefault(_isString);

	var _isPlainObject = __webpack_require__(130);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @private
	 */

	var Response = exports.Response = function () {
	  function Response() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, Response);

	    options = (0, _assign2.default)({
	      statusCode: _enums.StatusCode.Ok,
	      headers: {
	        'Content-Type': 'application/json; charset=utf-8'
	      },
	      data: null
	    }, options);

	    this.statusCode = options.statusCode;
	    this.addHeaders(options.headers);
	    this.data = options.data;
	  }

	  _createClass(Response, [{
	    key: 'getHeader',
	    value: function getHeader(name) {
	      if (name) {
	        if (!(0, _isString2.default)(name)) {
	          name = String(name);
	        }

	        var headers = this.headers || {};
	        var keys = Object.keys(headers);

	        for (var i = 0, len = keys.length; i < len; i++) {
	          var key = keys[i];

	          if (key.toLowerCase() === name.toLowerCase()) {
	            return headers[key];
	          }
	        }
	      }

	      return undefined;
	    }
	  }, {
	    key: 'setHeader',
	    value: function setHeader(name, value) {
	      if (!name || !value) {
	        throw new Error('A name and value must be provided to set a header.');
	      }

	      if (!(0, _isString2.default)(name)) {
	        name = String(name);
	      }

	      var headers = this.headers || {};

	      if (!(0, _isString2.default)(value)) {
	        headers[name] = JSON.stringify(value);
	      } else {
	        headers[name] = value;
	      }

	      this.headers = headers;
	    }
	  }, {
	    key: 'addHeader',
	    value: function addHeader() {
	      var header = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      return this.setHeader(header.name, header.value);
	    }
	  }, {
	    key: 'addHeaders',
	    value: function addHeaders(headers) {
	      var _this = this;

	      if (!(0, _isPlainObject2.default)(headers)) {
	        throw new Error('Headers argument must be an object.');
	      }

	      var names = Object.keys(headers);

	      (0, _forEach2.default)(names, function (name) {
	        var value = headers[name];
	        _this.setHeader(name, value);
	      });
	    }
	  }, {
	    key: 'removeHeader',
	    value: function removeHeader(name) {
	      if (name) {
	        if (!(0, _isString2.default)(name)) {
	          name = String(name);
	        }

	        var headers = this.headers || {};
	        delete headers[name];
	        this.headers = headers;
	      }
	    }
	  }, {
	    key: 'clearHeaders',
	    value: function clearHeaders() {
	      this.headers = {};
	    }
	  }, {
	    key: 'isSuccess',
	    value: function isSuccess() {
	      return this.statusCode >= 200 && this.statusCode < 300 || this.statusCode === 302;
	    }
	  }, {
	    key: 'toJSON',
	    value: function toJSON() {
	      var json = {
	        statusCode: this.statusCode,
	        headers: this.headers,
	        data: this.data
	      };
	      return json;
	    }
	  }, {
	    key: 'error',
	    get: function get() {
	      if (this.isSuccess()) {
	        return null;
	      }

	      var data = this.data || {};
	      var name = data.name || data.error;
	      var message = data.message || data.description;
	      var debug = data.debug;

	      if (name === 'EntityNotFound' || name === 'CollectionNotFound' || name === 'AppNotFound' || name === 'UserNotFound' || name === 'BlobNotFound' || name === 'DocumentNotFound') {
	        return new _errors.NotFoundError(message, debug);
	      } else if (name === 'InsufficientCredentials') {
	        return new _errors.InsufficientCredentialsError(message, debug);
	      } else if (name === 'InvalidCredentials') {
	        return new _errors.InvalidCredentialsError(message, debug);
	      }

	      return new _errors.KinveyError(message, debug);
	    }
	  }]);

	  return Response;
	}();

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.NetworkRequest = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _request = __webpack_require__(132);

	var _rack = __webpack_require__(140);

	var _errors = __webpack_require__(7);

	var _enums = __webpack_require__(128);

	var _response = __webpack_require__(225);

	var _url = __webpack_require__(214);

	var _url2 = _interopRequireDefault(_url);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var socialIdentityAttribute = process.env.KINVEY_SOCIAL_IDENTITY_ATTRIBUTE || '_socialIdentity';
	var micIdentity = process.env.KINVEY_MIC_IDENTITY || 'kinveyAuth';
	var tokenPathname = process.env.KINVEY_MIC_TOKEN_PATHNAME || '/oauth/token';
	var usersNamespace = process.env.KINVEY_USERS_NAMESPACE || 'user';

	/**
	 * @private
	 */

	var NetworkRequest = exports.NetworkRequest = function (_KinveyRequest) {
	  _inherits(NetworkRequest, _KinveyRequest);

	  function NetworkRequest(options) {
	    _classCallCheck(this, NetworkRequest);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(NetworkRequest).call(this, options));

	    _this.rack = _rack.NetworkRack.sharedInstance();
	    _this.automaticallyRefreshAuthToken = true;
	    return _this;
	  }

	  _createClass(NetworkRequest, [{
	    key: 'execute',
	    value: function execute() {
	      var _this2 = this;

	      var promise = _get(Object.getPrototypeOf(NetworkRequest.prototype), 'execute', this).call(this).then(function () {
	        return _this2.rack.execute(_this2);
	      }).then(function (response) {
	        if (!response) {
	          throw new _errors.NoResponseError();
	        }

	        if (!(response instanceof _response.Response)) {
	          return new _response.Response({
	            statusCode: response.statusCode,
	            headers: response.headers,
	            data: response.data
	          });
	        }

	        return response;
	      }).then(function (response) {
	        if (!response.isSuccess()) {
	          throw response.error;
	        }

	        return response;
	      }).catch(function (error) {
	        if (error instanceof _errors.InvalidCredentialsError && _this2.automaticallyRefreshAuthToken) {
	          var _ret = function () {
	            _this2.automaticallyRefreshAuthToken = false;
	            var socialIdentity = _this2.client.socialIdentity;

	            // Refresh MIC Auth Token
	            if (socialIdentity && socialIdentity.identity === micIdentity) {
	              // Refresh the token
	              var token = socialIdentity.token;
	              var request = new NetworkRequest({
	                method: _enums.HttpMethod.POST,
	                headers: {
	                  'Content-Type': 'application/x-www-form-urlencoded'
	                },
	                authType: _enums.AuthType.App,
	                url: _url2.default.format({
	                  protocol: socialIdentity.client.protocol,
	                  host: socialIdentity.client.host,
	                  pathname: tokenPathname
	                }),
	                properties: _this2.properties,
	                data: {
	                  grant_type: 'refresh_token',
	                  client_id: token.audience,
	                  redirect_uri: socialIdentity.redirectUri,
	                  refresh_token: token.refresh_token
	                }
	              });
	              request.automaticallyRefreshAuthToken = false;

	              return {
	                v: request.execute().then(function (response) {
	                  return response.data;
	                }).then(function (token) {
	                  // Login the user with the new token
	                  var activeUser = _this2.client.user;
	                  var socialIdentity = activeUser[socialIdentityAttribute];
	                  socialIdentity[socialIdentity.identity] = token;
	                  activeUser[socialIdentityAttribute] = socialIdentity;

	                  var request = new NetworkRequest({
	                    method: _enums.HttpMethod.POST,
	                    authType: _enums.AuthType.App,
	                    url: _url2.default.format({
	                      protocol: _this2.client.protocol,
	                      host: _this2.client.host,
	                      pathname: '/' + usersNamespace + '/' + _this2.client.appKey + '/login'
	                    }),
	                    properties: _this2.properties,
	                    data: activeUser,
	                    timeout: _this2.timeout,
	                    client: _this2.client
	                  });
	                  request.automaticallyRefreshAuthToken = false;
	                  return request.execute();
	                }).then(function (response) {
	                  // Store the new data
	                  _this2.client.user = response.data;
	                  _this2.client.socialIdentity = {
	                    identity: socialIdentity.identity,
	                    redirectUri: socialIdentity.redirectUri,
	                    token: response.data[socialIdentityAttribute][socialIdentity.identity],
	                    client: socialIdentity.client
	                  };

	                  // Execute the original request
	                  return _this2.execute();
	                }).catch(function () {
	                  throw error;
	                })
	              };
	            }
	          }();

	          if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	        }

	        throw error;
	      }).then(function (response) {
	        _this2.automaticallyRefreshAuthToken = true;
	        return response;
	      }).catch(function (error) {
	        _this2.automaticallyRefreshAuthToken = true;
	        throw error;
	      });

	      return promise;
	    }
	  }, {
	    key: 'cancel',
	    value: function cancel() {
	      var _this3 = this;

	      var promise = _get(Object.getPrototypeOf(NetworkRequest.prototype), 'cancel', this).call(this).then(function () {
	        return _this3.rack.cancel();
	      });
	      return promise;
	    }
	  }]);

	  return NetworkRequest;
	}(_request.KinveyRequest);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _mapLimit = __webpack_require__(228);

	var _mapLimit2 = _interopRequireDefault(_mapLimit);

	var _doLimit = __webpack_require__(237);

	var _doLimit2 = _interopRequireDefault(_doLimit);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _doLimit2.default)(_mapLimit2.default, 1);
	module.exports = exports['default'];

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _doParallelLimit = __webpack_require__(229);

	var _doParallelLimit2 = _interopRequireDefault(_doParallelLimit);

	var _map = __webpack_require__(236);

	var _map2 = _interopRequireDefault(_map);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _doParallelLimit2.default)(_map2.default);
	module.exports = exports['default'];

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = doParallelLimit;

	var _eachOfLimit = __webpack_require__(230);

	var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function doParallelLimit(fn) {
	    return function (obj, limit, iteratee, callback) {
	        return fn((0, _eachOfLimit2.default)(limit), obj, iteratee, callback);
	    };
	}
	module.exports = exports['default'];

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = _eachOfLimit;

	var _noop = __webpack_require__(231);

	var _noop2 = _interopRequireDefault(_noop);

	var _once = __webpack_require__(232);

	var _once2 = _interopRequireDefault(_once);

	var _iterator = __webpack_require__(233);

	var _iterator2 = _interopRequireDefault(_iterator);

	var _onlyOnce = __webpack_require__(235);

	var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _eachOfLimit(limit) {
	    return function (obj, iteratee, callback) {
	        callback = (0, _once2.default)(callback || _noop2.default);
	        obj = obj || [];
	        var nextElem = (0, _iterator2.default)(obj);
	        if (limit <= 0) {
	            return callback(null);
	        }
	        var done = false;
	        var running = 0;
	        var errored = false;

	        (function replenish() {
	            if (done && running <= 0) {
	                return callback(null);
	            }

	            while (running < limit && !errored) {
	                var elem = nextElem();
	                if (elem === null) {
	                    done = true;
	                    if (running <= 0) {
	                        callback(null);
	                    }
	                    return;
	                }
	                running += 1;
	                iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(function (err) {
	                    running -= 1;
	                    if (err) {
	                        callback(err);
	                        errored = true;
	                    } else {
	                        replenish();
	                    }
	                }));
	            }
	        })();
	    };
	}
	module.exports = exports['default'];

/***/ },
/* 231 */
/***/ function(module, exports) {

	/**
	 * A no-operation function that returns `undefined` regardless of the
	 * arguments it receives.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Util
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.noop(object) === undefined;
	 * // => true
	 */
	function noop() {
	  // No operation performed.
	}

	module.exports = noop;


/***/ },
/* 232 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = once;
	function once(fn) {
	    return function () {
	        if (fn === null) return;
	        fn.apply(this, arguments);
	        fn = null;
	    };
	}
	module.exports = exports['default'];

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = iterator;

	var _isArrayLike = __webpack_require__(30);

	var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

	var _getIterator = __webpack_require__(234);

	var _getIterator2 = _interopRequireDefault(_getIterator);

	var _keys = __webpack_require__(22);

	var _keys2 = _interopRequireDefault(_keys);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function iterator(coll) {
	    var i = -1;
	    var len;
	    if ((0, _isArrayLike2.default)(coll)) {
	        len = coll.length;
	        return function next() {
	            i++;
	            return i < len ? { value: coll[i], key: i } : null;
	        };
	    }

	    var iterate = (0, _getIterator2.default)(coll);
	    if (iterate) {
	        return function next() {
	            var item = iterate.next();
	            if (item.done) return null;
	            i++;
	            return { value: item.value, key: i };
	        };
	    }

	    var okeys = (0, _keys2.default)(coll);
	    len = okeys.length;
	    return function next() {
	        i++;
	        var key = okeys[i];
	        return i < len ? { value: coll[key], key: key } : null;
	    };
	}
	module.exports = exports['default'];

/***/ },
/* 234 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	exports.default = function (coll) {
	    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
	};

	var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;

	module.exports = exports['default'];

/***/ },
/* 235 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = onlyOnce;
	function onlyOnce(fn) {
	    return function () {
	        if (fn === null) throw new Error("Callback was already called.");
	        fn.apply(this, arguments);
	        fn = null;
	    };
	}
	module.exports = exports['default'];

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = _asyncMap;

	var _isArrayLike = __webpack_require__(30);

	var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

	var _getIterator = __webpack_require__(234);

	var _getIterator2 = _interopRequireDefault(_getIterator);

	var _noop = __webpack_require__(231);

	var _noop2 = _interopRequireDefault(_noop);

	var _once = __webpack_require__(232);

	var _once2 = _interopRequireDefault(_once);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _asyncMap(eachfn, arr, iteratee, callback) {
	    callback = (0, _once2.default)(callback || _noop2.default);
	    arr = arr || [];
	    var results = (0, _isArrayLike2.default)(arr) || (0, _getIterator2.default)(arr) ? [] : {};
	    eachfn(arr, function (value, index, callback) {
	        iteratee(value, function (err, v) {
	            results[index] = v;
	            callback(err);
	        });
	    }, function (err) {
	        callback(err, results);
	    });
	}
	module.exports = exports['default'];

/***/ },
/* 237 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = doLimit;
	function doLimit(fn, limit) {
	    return function (iterable, iteratee, callback) {
	        return fn(iterable, limit, iteratee, callback);
	    };
	}
	module.exports = exports['default'];

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var stub = __webpack_require__(239);
	var tracking = __webpack_require__(240);
	var ls = 'localStorage' in global && global.localStorage ? global.localStorage : stub;

	function accessor (key, value) {
	  if (arguments.length === 1) {
	    return get(key);
	  }
	  return set(key, value);
	}

	function get (key) {
	  return JSON.parse(ls.getItem(key));
	}

	function set (key, value) {
	  try {
	    ls.setItem(key, JSON.stringify(value));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function remove (key) {
	  return ls.removeItem(key);
	}

	function clear () {
	  return ls.clear();
	}

	accessor.set = set;
	accessor.get = get;
	accessor.remove = remove;
	accessor.clear = clear;
	accessor.on = tracking.on;
	accessor.off = tracking.off;

	module.exports = accessor;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 239 */
/***/ function(module, exports) {

	'use strict';

	var ms = {};

	function getItem (key) {
	  return key in ms ? ms[key] : null;
	}

	function setItem (key, value) {
	  ms[key] = value;
	  return true;
	}

	function removeItem (key) {
	  var found = key in ms;
	  if (found) {
	    return delete ms[key];
	  }
	  return false;
	}

	function clear () {
	  ms = {};
	  return true;
	}

	module.exports = {
	  getItem: getItem,
	  setItem: setItem,
	  removeItem: removeItem,
	  clear: clear
	};


/***/ },
/* 240 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var listeners = {};
	var listening = false;

	function listen () {
	  if (global.addEventListener) {
	    global.addEventListener('storage', change, false);
	  } else if (global.attachEvent) {
	    global.attachEvent('onstorage', change);
	  } else {
	    global.onstorage = change;
	  }
	}

	function change (e) {
	  if (!e) {
	    e = global.event;
	  }
	  var all = listeners[e.key];
	  if (all) {
	    all.forEach(fire);
	  }

	  function fire (listener) {
	    listener(JSON.parse(e.newValue), JSON.parse(e.oldValue), e.url || e.uri);
	  }
	}

	function on (key, fn) {
	  if (listeners[key]) {
	    listeners[key].push(fn);
	  } else {
	    listeners[key] = [fn];
	  }
	  if (listening === false) {
	    listen();
	  }
	}

	function off (key, fn) {
	  var ns = listeners[key];
	  if (ns.length > 1) {
	    ns.splice(ns.indexOf(fn), 1);
	  } else {
	    listeners[key] = [];
	  }
	}

	module.exports = {
	  on: on,
	  off: off
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Command = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _client = __webpack_require__(126);

	var _enums = __webpack_require__(128);

	var _errors = __webpack_require__(7);

	var _isString = __webpack_require__(36);

	var _isString2 = _interopRequireDefault(_isString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var rpcNamespace = process.env.KINVEY_RPC_NAMESPACE || 'rpc';

	/**
	 * Executes a custom command.
	 */

	var Command = exports.Command = function () {
	  function Command() {
	    _classCallCheck(this, Command);
	  }

	  _createClass(Command, null, [{
	    key: 'execute',

	    /**
	     * Execute a custom command. A promise will be returned that will be resolved
	     * with the result of the command or rejected with an error.
	     *
	     * @param   {String}          command                           Command to execute.
	     * @param   {Object}          [args]                            Command arguments
	     * @param   {Object}          [options]                         Options
	     * @param   {Properties}      [options.properties]              Custom properties to send with
	     *                                                              the request.
	     * @param   {Number}          [options.timeout]                 Timeout for the request.
	     * @return  {Promise}                                           Promise
	     *
	     * @example
	     * var promise = Kinvey.Command.execute('myCustomCommand').then(function(data) {
	     *   ...
	     * }).catch(function(error) {
	     *   ...
	     * });
	     */
	    value: function execute(command, args) {
	      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	      var client = _client.Client.sharedInstance();

	      if (!command) {
	        throw new _errors.KinveyError('A command is required.');
	      }

	      if (!(0, _isString2.default)(command)) {
	        throw new _errors.KinveyError('Command must be a string.');
	      }

	      return client.executeNetworkRequest({
	        method: _enums.HttpMethod.POST,
	        pathname: '/' + rpcNamespace + '/' + options.client.appKey + '/custom/' + command,
	        properties: options.properties,
	        auth: client.defaultAuth(),
	        data: args,
	        timeout: options.timeout
	      }).then(function (response) {
	        return response.data;
	      });
	    }
	  }]);

	  return Command;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DataStore = exports.DataStoreType = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _syncstore = __webpack_require__(243);

	var _networkstore = __webpack_require__(245);

	var _userstore = __webpack_require__(260);

	var _filestore = __webpack_require__(261);

	var _cachestore = __webpack_require__(244);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Enum for DataStore types.
	 */
	var DataStoreType = {
	  Sync: 'Sync',
	  Cache: 'Cache',
	  Network: 'Network',
	  User: 'User',
	  File: 'File'
	};
	Object.freeze(DataStoreType);
	exports.DataStoreType = DataStoreType;

	var DataStore = exports.DataStore = function () {
	  function DataStore() {
	    _classCallCheck(this, DataStore);
	  }

	  _createClass(DataStore, null, [{
	    key: 'getInstance',

	    /**
	     * Returns an instance of the Store class based on the type provided.
	     *
	     * @param  {string}       [name]                      Name of the collection.
	     * @param  {StoreType}    [type=DataStoreType.Cache]  Type of store to return.
	     * @return {Object}                                   Store
	     */
	    value: function getInstance(name) {
	      var type = arguments.length <= 1 || arguments[1] === undefined ? DataStoreType.Cache : arguments[1];

	      var store = void 0;

	      switch (type) {
	        case DataStoreType.Sync:
	          store = new _syncstore.SyncStore(name);
	          break;
	        case DataStoreType.Network:
	          store = new _networkstore.NetworkStore(name);
	          break;
	        case DataStoreType.User:
	          store = new _userstore.UserStore();
	          break;
	        case DataStoreType.File:
	          store = new _filestore.FileStore();
	          break;
	        case DataStoreType.Cache:
	        default:
	          store = new _cachestore.CacheStore(name);
	      }

	      return store;
	    }
	  }]);

	  return DataStore;
	}();

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SyncStore = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _cachestore = __webpack_require__(244);

	var _local = __webpack_require__(131);

	var _aggregation = __webpack_require__(13);

	var _enums = __webpack_require__(128);

	var _errors = __webpack_require__(7);

	var _query = __webpack_require__(14);

	var _log = __webpack_require__(199);

	var _url = __webpack_require__(214);

	var _url2 = _interopRequireDefault(_url);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';

	var SyncStore = exports.SyncStore = function (_CacheStore) {
	  _inherits(SyncStore, _CacheStore);

	  function SyncStore() {
	    _classCallCheck(this, SyncStore);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(SyncStore).apply(this, arguments));
	  }

	  _createClass(SyncStore, [{
	    key: 'find',

	    /**
	     * Finds all entities in a collection. A query can be optionally provided to return
	     * a subset of all entities in a collection or omitted to return all entities in
	     * a collection. The number of entities returned will adhere to the limits specified
	     * at http://devcenter.kinvey.com/rest/guides/datastore#queryrestrictions. A
	     * promise will be returned that will be resolved with the entities or rejected with
	     * an error.
	     *
	     * @param   {Query}                 [query]                                   Query used to filter result.
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @param   {Number}                [options.ttl]                             Time to live for data retrieved
	     *                                                                            from the cache.
	     * @return  {Promise}                                                         Promise
	     */
	    value: function find(query) {
	      var _this2 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      _log.Log.debug('Retrieving the entities in the ' + this.name + ' collection.', query);

	      if (query && !(query instanceof _query.Query)) {
	        return _babybird2.default.reject(new _errors.KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));
	      }

	      var request = new _local.LocalRequest({
	        method: _enums.HttpMethod.GET,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname
	        }),
	        properties: options.properties,
	        query: query,
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Retrieved the entities in the ' + _this2.name + ' collection.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to retrieve the entities in the ' + _this2.name + ' collection.', err);
	      });

	      return promise;
	    }

	    /**
	     * Groups entities in a collection. An aggregation can be optionally provided to group
	     * a subset of entities in a collection or omitted to group all the entities
	     * in a collection. A promise will be returned that will be resolved with the result
	     * or rejected with an error.
	     *
	     * @param   {Aggregation}           aggregation                               Aggregation used to group entities.
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @param   {Number}                [options.ttl]                             Time to live for data retrieved
	     *                                                                            from the cache.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'group',
	    value: function group(aggregation) {
	      var _this3 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      _log.Log.debug('Grouping the entities in the ' + this.name + ' collection.', aggregation, options);

	      if (!(aggregation instanceof _aggregation.Aggregation)) {
	        return _babybird2.default.reject(new _errors.KinveyError('Invalid aggregation. ' + 'It must be an instance of the Kinvey.Aggregation class.'));
	      }

	      var request = new _local.LocalRequest({
	        method: _enums.HttpMethod.GET,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname + '/_group'
	        }),
	        properties: options.properties,
	        data: aggregation.toJSON(),
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Grouped the entities in the ' + _this3.name + ' collection.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to group the entities in the ' + _this3.name + ' collection.', err);
	      });

	      return promise;
	    }

	    /**
	     * Counts entities in a collection. A query can be optionally provided to count
	     * a subset of entities in a collection or omitted to count all the entities
	     * in a collection. A promise will be returned that will be resolved with the count
	     * or rejected with an error.
	     *
	     * @param   {Query}                 [query]                                   Query to count a subset of entities.
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @param   {Number}                [options.ttl]                             Time to live for data retrieved
	     *                                                                            from the cache.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'count',
	    value: function count(query) {
	      var _this4 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      _log.Log.debug('Counting the number of entities in the ' + this.name + ' collection.', query);

	      if (query && !(query instanceof _query.Query)) {
	        return _babybird2.default.reject(new _errors.KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));
	      }

	      var request = new _local.LocalRequest({
	        method: _enums.HttpMethod.GET,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname + '/_count'
	        }),
	        properties: options.properties,
	        query: query,
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Counted the number of entities in the ' + _this4.name + ' collection.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to count the number of entities in the ' + _this4.name + ' collection.', err);
	      });

	      return promise;
	    }

	    /**
	     * Retrieves a single entity in a collection by id. A promise will be returned that will
	     * be resolved with the entity or rejected with an error.
	     *
	     * @param   {string}                id                                        Document Id
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @param   {Number}                [options.ttl]                             Time to live for data retrieved
	     *                                                                            from the cache.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'findById',
	    value: function findById(id) {
	      var _this5 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (!id) {
	        _log.Log.warn('No id was provided to retrieve an entity.', id);
	        return _babybird2.default.resolve(null);
	      }

	      _log.Log.debug('Retrieving the entity in the ' + this.name + ' collection with id = ' + id + '.');

	      var request = new _local.LocalRequest({
	        method: _enums.HttpMethod.GET,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname + '/' + id
	        }),
	        properties: options.properties,
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Retrieved the entity in the ' + _this5.name + ' collection with id = ' + id + '.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to retrieve the entity in the ' + _this5.name + ' collection with id = ' + id + '.', err);
	      });

	      return promise;
	    }

	    /**
	     * Save a entity or an array of entities to a collection. A promise will be returned that
	     * will be resolved with the saved entity/entities or rejected with an error.
	     *
	     * @param   {Object|Array}          entities                                  Entity or entities to save.
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @param   {Number}                [options.ttl]                             Time to live for data saved
	     *                                                                            in the cache.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'save',
	    value: function save(entity) {
	      var _this6 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (!entity) {
	        _log.Log.warn('No entity was provided to be saved.', entity);
	        return _babybird2.default.resolve(null);
	      }

	      _log.Log.debug('Saving the entity(s) to the ' + this.name + ' collection.', entity);

	      var request = new _local.LocalRequest({
	        method: _enums.HttpMethod.POST,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname
	        }),
	        properties: options.properties,
	        data: entity,
	        timeout: options.timeout,
	        client: this.client
	      });

	      if (entity[idAttribute]) {
	        request.method = _enums.HttpMethod.PUT;
	        request.url = _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname + '/' + entity[idAttribute]
	        });
	      }

	      var promise = request.execute().then(function (response) {
	        return _this6._sync(response.data, options).then(function () {
	          return response.data;
	        });
	      });

	      promise.then(function (response) {
	        _log.Log.info('Saved the entity(s) to the ' + _this6.name + ' collection.', response);
	      }).catch(function (error) {
	        _log.Log.error('Failed to save the entity(s) to the ' + _this6.name + ' collection.', error);
	      });

	      return promise;
	    }

	    /**
	     * Remove entities in a collection. A query can be optionally provided to remove
	     * a subset of entities in a collection or omitted to remove all entities in a
	     * collection. A promise will be returned that will be resolved with a count of the
	     * number of entities removed or rejected with an error.
	     *
	     * @param   {Query}                 [query]                                   Query
	     * @param   {Object}                options                                   Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'remove',
	    value: function remove(query) {
	      var _this7 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      _log.Log.debug('Removing the entities in the ' + this.name + ' collection.', query);

	      if (query && !(query instanceof _query.Query)) {
	        return _babybird2.default.reject(new _errors.KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));
	      }

	      var request = new _local.LocalRequest({
	        method: _enums.HttpMethod.DELETE,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname
	        }),
	        properties: options.properties,
	        query: query,
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().then(function (response) {
	        return _this7._sync(response.data.entities, options).then(function () {
	          return response.data;
	        });
	      });

	      promise.then(function (response) {
	        _log.Log.info('Removed the entities in the ' + _this7.name + ' collection.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to remove the entities in the ' + _this7.name + ' collection.', err);
	      });

	      return promise;
	    }

	    /**
	     * Remove an entity in a collection. A promise will be returned that will be
	     * resolved with a count of the number of entities removed or rejected with an error.
	     *
	     * @param   {string}                id                                        Document Id
	     * @param   {Object}                options                                   Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'removeById',
	    value: function removeById(id) {
	      var _this8 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (!id) {
	        _log.Log.warn('No id was provided to be removed.', id);
	        return _babybird2.default.resolve(null);
	      }

	      _log.Log.debug('Removing an entity in the ' + this.name + ' collection with id = ' + id + '.');

	      var request = new _local.LocalRequest({
	        method: _enums.HttpMethod.DELETE,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname + '/' + id
	        }),
	        properties: options.properties,
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().then(function (response) {
	        return _this8._sync(response.data.entities, options).then(function () {
	          return response.data;
	        });
	      });

	      promise.then(function (response) {
	        _log.Log.info('Removed the entity in the ' + _this8.name + ' collection with id = ' + id + '.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to remove the entity in the ' + _this8.name + ' collection with id = ' + id + '.', err);
	      });

	      return promise;
	    }

	    /**
	     * Pull items for a collection from the network to your local cache. A promise will be
	     * returned that will be resolved with the result of the pull or rejected with an error.
	     *
	     * @param   {Query}                 [query]                                   Query to pull a subset of items.
	     * @param   {Object}                options                                   Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'pull',
	    value: function pull(query) {
	      var _this9 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      var promise = this.syncCount(null, options).then(function (count) {
	        if (count > 0) {
	          throw new _errors.KinveyError('Unable to pull data. You must push the pending sync items first.', 'Call store.push() to push the pending sync items before you pull new data.');
	        }

	        return _get(Object.getPrototypeOf(SyncStore.prototype), 'find', _this9).call(_this9, query, options);
	      }).then(function (result) {
	        return result.networkPromise;
	      });
	      return promise;
	    }
	  }]);

	  return SyncStore;
	}(_cachestore.CacheStore);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CacheStore = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _networkstore = __webpack_require__(245);

	var _enums = __webpack_require__(128);

	var _errors = __webpack_require__(7);

	var _local = __webpack_require__(131);

	var _deltafetch = __webpack_require__(246);

	var _query = __webpack_require__(14);

	var _aggregation = __webpack_require__(13);

	var _log = __webpack_require__(199);

	var _url = __webpack_require__(214);

	var _url2 = _interopRequireDefault(_url);

	var _assign = __webpack_require__(114);

	var _assign2 = _interopRequireDefault(_assign);

	var _result = __webpack_require__(125);

	var _result2 = _interopRequireDefault(_result);

	var _isArray = __webpack_require__(35);

	var _isArray2 = _interopRequireDefault(_isArray);

	var _keyBy = __webpack_require__(148);

	var _keyBy2 = _interopRequireDefault(_keyBy);

	var _map = __webpack_require__(197);

	var _map2 = _interopRequireDefault(_map);

	var _differenceBy = __webpack_require__(247);

	var _differenceBy2 = _interopRequireDefault(_differenceBy);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';

	/**
	 * The CacheStore class is used to find, save, update, remove, count and group enitities
	 * in a collection on the network using a cache on the device.
	 */

	var CacheStore = function (_NetworkStore) {
	  _inherits(CacheStore, _NetworkStore);

	  /**
	   * Creates a new instance of the CacheStore class.
	   *
	   * @param   {string}  name   Name of the collection
	   *
	   * @throws  {KinveyError}   If the name provided is not a string.
	   */

	  function CacheStore(name) {
	    _classCallCheck(this, CacheStore);

	    /**
	     * @type {Number}
	     */

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CacheStore).call(this, name));

	    _this.ttl = undefined;

	    // Enable sync
	    _this.enableSync();
	    return _this;
	  }

	  _createClass(CacheStore, [{
	    key: 'disableSync',
	    value: function disableSync() {
	      this._syncEnabled = false;
	    }
	  }, {
	    key: 'enableSync',
	    value: function enableSync() {
	      this._syncEnabled = true;
	    }
	  }, {
	    key: 'isSyncEnabled',
	    value: function isSyncEnabled() {
	      return !!this._syncEnabled;
	    }

	    /**
	     * Finds all entities in a collection. A query can be optionally provided to return
	     * a subset of all entities in a collection or omitted to return all entities in
	     * a collection. The number of entities returned will adhere to the limits specified
	     * at http://devcenter.kinvey.com/rest/guides/datastore#queryrestrictions. A
	     * promise will be returned that will be resolved with the entities or rejected with
	     * an error.
	     *
	     * @param   {Query}                 [query]                                   Query used to filter result.
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @param   {Number}                [options.ttl]                             Time to live for data retrieved
	     *                                                                            from the cache.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'find',
	    value: function find(query) {
	      var _this2 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      _log.Log.debug('Retrieving the entities in the ' + this.name + ' collection.', query);

	      options = (0, _assign2.default)({
	        useDeltaFetch: true
	      }, options);

	      if (query && !(query instanceof _query.Query)) {
	        return _babybird2.default.reject(new _errors.KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));
	      }

	      var promise = _babybird2.default.resolve().then(function () {
	        var request = new _local.LocalRequest({
	          method: _enums.HttpMethod.GET,
	          url: _url2.default.format({
	            protocol: _this2.client.protocol,
	            host: _this2.client.host,
	            pathname: _this2._pathname
	          }),
	          properties: options.properties,
	          query: query,
	          timeout: options.timeout,
	          client: _this2.client
	        });
	        return request.execute();
	      }).then(function (cacheResponse) {
	        var result = {
	          cache: cacheResponse.data
	        };

	        result.networkPromise = _this2.syncCount().then(function (count) {
	          if (count > 0) {
	            return _this2.push().then(function () {
	              return _this2.syncCount();
	            });
	          }

	          return count;
	        }).then(function (count) {
	          if (count > 0) {
	            throw new _errors.KinveyError('Unable to load data from the network. There are ' + count + ' entities that need ' + 'to be synced before data is loaded from the network.');
	          }

	          if (options.useDeltaFetch) {
	            var request = new _deltafetch.DeltaFetchRequest({
	              method: _enums.HttpMethod.GET,
	              authType: _enums.AuthType.Default,
	              url: _url2.default.format({
	                protocol: _this2.client.protocol,
	                host: _this2.client.host,
	                pathname: _this2._pathname
	              }),
	              properties: options.properties,
	              query: query,
	              timeout: options.timeout,
	              client: _this2.client
	            });
	            return request.execute().then(function (response) {
	              return response.data;
	            });
	          }

	          return _get(Object.getPrototypeOf(CacheStore.prototype), 'find', _this2).call(_this2, query, options);
	        }).then(function (networkEntities) {
	          var removedEntities = (0, _differenceBy2.default)(cacheResponse.data, networkEntities, idAttribute);
	          var removeEntityIds = Object.keys((0, _keyBy2.default)(removedEntities, idAttribute));
	          var removeQuery = new _query.Query();
	          removeQuery.contains(idAttribute, removeEntityIds);

	          var request = new _local.LocalRequest({
	            method: _enums.HttpMethod.DELETE,
	            url: _url2.default.format({
	              protocol: _this2.client.protocol,
	              host: _this2.client.host,
	              pathname: _this2._pathname
	            }),
	            properties: options.properties,
	            query: removeQuery,
	            timeout: options.timeout,
	            client: _this2.client
	          });
	          return request.execute().then(function () {
	            return _this2._cache(networkEntities);
	          });
	        });

	        return result;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Retrieved the entities in the ' + _this2.name + ' collection.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to retrieve the entities in the ' + _this2.name + ' collection.', err);
	      });

	      return promise;
	    }

	    /**
	     * Groups entities in a collection. An aggregation can be optionally provided to group
	     * a subset of entities in a collection or omitted to group all the entities
	     * in a collection. A promise will be returned that will be resolved with the result
	     * or rejected with an error.
	     *
	     * @param   {Aggregation}           aggregation                               Aggregation used to group entities.
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @param   {Number}                [options.ttl]                             Time to live for data retrieved
	     *                                                                            from the cache.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'group',
	    value: function group(aggregation) {
	      var _this3 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      _log.Log.debug('Grouping the entities in the ' + this.name + ' collection.', aggregation, options);

	      options = (0, _assign2.default)({
	        force: false
	      }, options);

	      if (!(aggregation instanceof _aggregation.Aggregation)) {
	        return _babybird2.default.reject(new _errors.KinveyError('Invalid aggregation. ' + 'It must be an instance of the Kinvey.Aggregation class.'));
	      }

	      var promise = _babybird2.default.resolve().then(function () {
	        var request = new _local.LocalRequest({
	          method: _enums.HttpMethod.GET,
	          url: _url2.default.format({
	            protocol: _this3.client.protocol,
	            host: _this3.client.host,
	            pathname: _this3._pathname + '/_group'
	          }),
	          properties: options.properties,
	          data: aggregation.toJSON(),
	          timeout: options.timeout,
	          client: _this3.client
	        });
	        return request.execute();
	      }).then(function (response) {
	        var result = {
	          cache: response.data
	        };

	        result.networkPromise = _this3.syncCount().then(function (count) {
	          if (count > 0) {
	            return _this3.push().then(function () {
	              return _this3.syncCount();
	            });
	          }

	          return count;
	        }).then(function (count) {
	          if (count > 0) {
	            throw new _errors.KinveyError('Unable to load data from the network. There are ' + count + ' entities that need ' + 'to be synced before data is loaded from the network.');
	          }

	          return _get(Object.getPrototypeOf(CacheStore.prototype), 'group', _this3).call(_this3, aggregation, options);
	        });

	        return result;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Grouped the entities in the ' + _this3.name + ' collection.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to group the entities in the ' + _this3.name + ' collection.', err);
	      });

	      return promise;
	    }

	    /**
	     * Counts entities in a collection. A query can be optionally provided to count
	     * a subset of entities in a collection or omitted to count all the entities
	     * in a collection. A promise will be returned that will be resolved with the count
	     * or rejected with an error.
	     *
	     * @param   {Query}                 [query]                                   Query to count a subset of entities.
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @param   {Number}                [options.ttl]                             Time to live for data retrieved
	     *                                                                            from the cache.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'count',
	    value: function count(query) {
	      var _this4 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      _log.Log.debug('Counting the number of entities in the ' + this.name + ' collection.', query);

	      options = (0, _assign2.default)({
	        force: false
	      }, options);

	      if (query && !(query instanceof _query.Query)) {
	        return _babybird2.default.reject(new _errors.KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));
	      }

	      var promise = _babybird2.default.resolve().then(function () {
	        var request = new _local.LocalRequest({
	          method: _enums.HttpMethod.GET,
	          url: _url2.default.format({
	            protocol: _this4.client.protocol,
	            host: _this4.client.host,
	            pathname: _this4._pathname + '/_count'
	          }),
	          properties: options.properties,
	          query: query,
	          timeout: options.timeout,
	          client: _this4.client
	        });
	        return request.execute();
	      }).then(function (response) {
	        var result = {
	          cache: response.data
	        };

	        result.networkPromise = _this4.syncCount().then(function (count) {
	          if (count > 0) {
	            return _this4.push().then(function () {
	              return _this4.syncCount();
	            });
	          }

	          return count;
	        }).then(function (count) {
	          if (count > 0) {
	            throw new _errors.KinveyError('Unable to load data from the network. There are ' + count + ' entities that need ' + 'to be synced before data is loaded from the network.');
	          }

	          return _get(Object.getPrototypeOf(CacheStore.prototype), 'count', _this4).call(_this4, query, options);
	        });

	        return result;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Counted the number of entities in the ' + _this4.name + ' collection.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to count the number of entities in the ' + _this4.name + ' collection.', err);
	      });

	      return promise;
	    }

	    /**
	     * Retrieves a single entity in a collection by id. A promise will be returned that will
	     * be resolved with the entity or rejected with an error.
	     *
	     * @param   {string}                id                                        Document Id
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @param   {Number}                [options.ttl]                             Time to live for data retrieved
	     *                                                                            from the cache.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'findById',
	    value: function findById(id) {
	      var _this5 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (!id) {
	        _log.Log.warn('No id was provided to retrieve an entity.', id);
	        return _babybird2.default.resolve(null);
	      }

	      _log.Log.debug('Retrieving the entity in the ' + this.name + ' collection with id = ' + id + '.');

	      options = (0, _assign2.default)({
	        force: false,
	        useDeltaFetch: true
	      }, options);

	      var promise = _babybird2.default.resolve().then(function () {
	        var request = new _local.LocalRequest({
	          method: _enums.HttpMethod.GET,
	          url: _url2.default.format({
	            protocol: _this5.client.protocol,
	            host: _this5.client.host,
	            pathname: _this5._pathname + '/' + id
	          }),
	          properties: options.properties,
	          timeout: options.timeout,
	          client: _this5.client
	        });
	        return request.execute();
	      }).then(function (response) {
	        var result = {
	          cache: response.data
	        };

	        result.networkPromise = _this5.syncCount().then(function (count) {
	          if (count > 0) {
	            return _this5.push().then(function () {
	              return _this5.syncCount();
	            });
	          }

	          return count;
	        }).then(function (count) {
	          if (count > 0) {
	            throw new _errors.KinveyError('Unable to load data from the network. There are ' + count + ' entities that need ' + 'to be synced before data is loaded from the network.');
	          }

	          if (options.useDeltaFetch) {
	            var request = new _deltafetch.DeltaFetchRequest({
	              method: _enums.HttpMethod.GET,
	              authType: _enums.AuthType.Default,
	              url: _url2.default.format({
	                protocol: _this5.client.protocol,
	                host: _this5.client.host,
	                pathname: _this5._pathname + '/' + id
	              }),
	              properties: options.properties,
	              timeout: options.timeout,
	              client: _this5.client
	            });
	            return request.execute().then(function (response) {
	              return response.data;
	            });
	          }

	          return _get(Object.getPrototypeOf(CacheStore.prototype), 'findById', _this5).call(_this5, id, options);
	        }).then(function (data) {
	          return _this5._cache(data);
	        }).catch(function (error) {
	          if (error instanceof _errors.NotFoundError) {
	            var request = new _local.LocalRequest({
	              method: _enums.HttpMethod.DELETE,
	              authType: _enums.AuthType.Default,
	              url: _url2.default.format({
	                protocol: _this5.client.protocol,
	                host: _this5.client.host,
	                pathname: _this5._pathname + '/' + id
	              }),
	              properties: options.properties,
	              timeout: options.timeout,
	              client: _this5.client
	            });
	            return request.execute().then(function () {
	              throw error;
	            });
	          }

	          throw error;
	        });

	        return result;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Retrieved the entity in the ' + _this5.name + ' collection with id = ' + id + '.', response);
	      }).catch(function (error) {
	        _log.Log.error('Failed to retrieve the entity in the ' + _this5.name + ' collection with id = ' + id + '.', error);
	      });

	      return promise;
	    }

	    /**
	     * Save a entity or an array of entities to a collection. A promise will be returned that
	     * will be resolved with the saved entity/entities or rejected with an error.
	     *
	     * @param   {Object|Array}          entities                                  Entity or entities to save.
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @param   {Number}                [options.ttl]                             Time to live for data saved
	     *                                                                            in the cache.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'save',
	    value: function save(entity) {
	      var _this6 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (!entity) {
	        _log.Log.warn('No entity was provided to be saved.', entity);
	        return _babybird2.default.resolve(null);
	      }

	      _log.Log.debug('Saving the entity(s) to the ' + this.name + ' collection.', entity);

	      var promise = _babybird2.default.resolve().then(function () {
	        var request = new _local.LocalRequest({
	          method: _enums.HttpMethod.POST,
	          url: _url2.default.format({
	            protocol: _this6.client.protocol,
	            host: _this6.client.host,
	            pathname: _this6._pathname
	          }),
	          properties: options.properties,
	          data: entity,
	          timeout: options.timeout,
	          client: _this6.client
	        });

	        if (entity[idAttribute]) {
	          request.method = _enums.HttpMethod.PUT;
	          request.url = _url2.default.format({
	            protocol: _this6.client.protocol,
	            host: _this6.client.host,
	            pathname: _this6._pathname + '/' + entity[idAttribute]
	          });
	        }

	        return request.execute();
	      }).then(function (response) {
	        var promise = _this6._sync(response.data, options).then(function () {
	          var data = (0, _isArray2.default)(response.data) ? response.data : [response.data];
	          var ids = Object.keys((0, _keyBy2.default)(data, idAttribute));
	          var query = new _query.Query().contains(idAttribute, ids);
	          return _this6.push(query, options);
	        }).then(function (pushResult) {
	          var success = pushResult.success;
	          var entities = (0, _map2.default)(success, function (successItem) {
	            return successItem.entity;
	          });
	          return !(0, _isArray2.default)(entity) && entities.length === 1 ? entities[0] : entities;
	        });
	        return promise;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Saved the entity(s) to the ' + _this6.name + ' collection.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to save the entity(s) to the ' + _this6.name + ' collection.', err);
	      });

	      return promise;
	    }

	    /**
	     * Remove entities in a collection. A query can be optionally provided to remove
	     * a subset of entities in a collection or omitted to remove all entities in a
	     * collection. A promise will be returned that will be resolved with a count of the
	     * number of entities removed or rejected with an error.
	     *
	     * @param   {Query}                 [query]                                   Query
	     * @param   {Object}                options                                   Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'remove',
	    value: function remove(query) {
	      var _this7 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      _log.Log.debug('Removing the entities in the ' + this.name + ' collection.', query);

	      if (query && !(query instanceof _query.Query)) {
	        return _babybird2.default.reject(new _errors.KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));
	      }

	      var promise = _babybird2.default.resolve().then(function () {
	        var request = new _local.LocalRequest({
	          method: _enums.HttpMethod.DELETE,
	          url: _url2.default.format({
	            protocol: _this7.client.protocol,
	            host: _this7.client.host,
	            pathname: _this7._pathname
	          }),
	          properties: options.properties,
	          query: query,
	          timeout: options.timeout,
	          client: _this7.client
	        });
	        return request.execute();
	      }).then(function (response) {
	        var promise = _this7._sync(response.data.entities, options).then(function () {
	          var query = new _query.Query().contains(idAttribute, []);
	          return _this7.push(query, options);
	        }).then(function () {
	          return response.data;
	        });
	        return promise;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Removed the entities in the ' + _this7.name + ' collection.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to remove the entities in the ' + _this7.name + ' collection.', err);
	      });

	      return promise;
	    }

	    /**
	     * Remove an entity in a collection. A promise will be returned that will be
	     * resolved with a count of the number of entities removed or rejected with an error.
	     *
	     * @param   {string}                id                                        Document Id
	     * @param   {Object}                options                                   Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'removeById',
	    value: function removeById(id) {
	      var _this8 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (!id) {
	        _log.Log.warn('No id was provided to be removed.', id);
	        return _babybird2.default.resolve(null);
	      }

	      _log.Log.debug('Removing an entity in the ' + this.name + ' collection with id = ' + id + '.');

	      var promise = _babybird2.default.resolve().then(function () {
	        var request = new _local.LocalRequest({
	          method: _enums.HttpMethod.DELETE,
	          url: _url2.default.format({
	            protocol: _this8.client.protocol,
	            host: _this8.client.host,
	            pathname: _this8._pathname + '/' + id
	          }),
	          properties: options.properties,
	          authType: _enums.AuthType.Default,
	          timeout: options.timeout,
	          client: _this8.client
	        });
	        return request.execute();
	      }).then(function (response) {
	        var promise = _this8._sync(response.data.entities, options).then(function () {
	          var query = new _query.Query().contains(idAttribute, [id]);
	          return _this8.push(query, options);
	        }).then(function () {
	          return response.data;
	        });
	        return promise;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Removed the entity in the ' + _this8.name + ' collection with id = ' + id + '.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to remove the entity in the ' + _this8.name + ' collection with id = ' + id + '.', err);
	      });

	      return promise;
	    }

	    /**
	     * Push sync items for a collection to the network. A promise will be returned that will be
	     * resolved with the result of the push or rejected with an error.
	     *
	     * @param   {Query}                 [query]                                   Query to push a subset of items.
	     * @param   {Object}                options                                   Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     *
	     * @example
	     * var store = Kinvey.DataStore.getInstance('books');
	     * store.push().then(function(result) {
	     *   ...
	     * }).catch(function(err) {
	     *   ...
	     * });
	     */

	  }, {
	    key: 'push',
	    value: function push(query) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (!this.isSyncEnabled()) {
	        return _babybird2.default.reject(new _errors.KinveyError('Sync is disabled.'));
	      }

	      if (!(query instanceof _query.Query)) {
	        query = new _query.Query((0, _result2.default)(query, 'toJSON', query));
	      }

	      query.contains(idAttribute, [this.name]);
	      return this.client.syncManager.execute(query, options);
	    }

	    /**
	     * Pull items for a collection from the network to your local cache. A promise will be
	     * returned that will be resolved with the result of the pull or rejected with an error.
	     *
	     * @param   {Query}                 [query]                                   Query to pull a subset of items.
	     * @param   {Object}                options                                   Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     *
	     * @example
	     * var store = Kinvey.Store.getInstance('books');
	     * store.pull().then(function(result) {
	     *   ...
	     * }).catch(function(err) {
	     *   ...
	     * });
	     */

	  }, {
	    key: 'pull',
	    value: function pull(query) {
	      var _this9 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      var promise = this.syncCount(null, options).then(function (count) {
	        if (count > 0) {
	          throw new _errors.KinveyError('Unable to pull data. You must push the pending sync items first.', 'Call store.push() to push the pending sync items before you pull new data.');
	        }

	        return _this9.find(query, options);
	      }).then(function (result) {
	        return result.networkPromise;
	      });
	      return promise;
	    }

	    /**
	     * Sync items for a collection. This will push pending sync items first and then
	     * pull items from the network into your local cache. A promise will be
	     * returned that will be resolved with the result of the pull or rejected with an error.
	     *
	     * @param   {Query}                 [query]                                   Query to pull a subset of items.
	     * @param   {Object}                options                                   Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     *
	     * @example
	     * var store = Kinvey.Store.getInstance('books');
	     * store.sync().then(function(result) {
	     *   ...
	     * }).catch(function(err) {
	     *   ...
	     * });
	     */

	  }, {
	    key: 'sync',
	    value: function sync(query) {
	      var _this10 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      var promise = this.push(null, options).then(function (pushResponse) {
	        var promise = _this10.pull(query, options).then(function (pullResponse) {
	          var result = {
	            push: pushResponse,
	            pull: pullResponse
	          };
	          return result;
	        });
	        return promise;
	      });
	      return promise;
	    }

	    /**
	     * Count the number of entities waiting to be pushed to the network. A promise will be
	     * returned with the count of entities or rejected with an error.
	     *
	     * @param   {Query}                 [query]                                   Query to count a subset of entities.
	     * @param   {Object}                options                                   Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @param   {Number}                [options.ttl]                             Time to live for data retrieved
	     *                                                                            from the local cache.
	     * @return  {Promise}                                                         Promise
	     *
	     * @example
	     * var store = Kinvey.Store.getInstance('books');
	     * store.syncCount().then(function(count) {
	     *   ...
	     * }).catch(function(err) {
	     *   ...
	     * });
	     */

	  }, {
	    key: 'syncCount',
	    value: function syncCount(query) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (!(query instanceof _query.Query)) {
	        query = new _query.Query((0, _result2.default)(query, 'toJSON', query));
	      }

	      query.contains(idAttribute, [this.name]);
	      return this.client.syncManager.count(query, options);
	    }

	    /**
	     * Add or update entities stored in the cache. A promise will be returned with the entities
	     * or rejected with an error.
	     *
	     * @param   {Object|Array}          entities                                  Entity(s) to add or update in the cache.
	     * @param   {Object}                options                                   Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: '_cache',
	    value: function _cache(entities) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      var request = new _local.LocalRequest({
	        method: _enums.HttpMethod.PUT,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname
	        }),
	        properties: options.properties,
	        data: entities,
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });
	      return promise;
	    }

	    /**
	     * Add entities to be pushed. A promise will be returned with null or rejected with an error.
	     *
	     * @param   {Object|Array}          entities                                  Entity(s) to add to the sync table.
	     * @param   {Object}                options                                   Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: '_sync',
	    value: function _sync(entities) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (!this.isSyncEnabled()) {
	        return _babybird2.default.resolve(null);
	      }

	      return this.client.syncManager.notify(this.name, entities, options);
	    }
	  }]);

	  return CacheStore;
	}(_networkstore.NetworkStore);

	exports.CacheStore = CacheStore;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.NetworkStore = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _aggregation = __webpack_require__(13);

	var _enums = __webpack_require__(128);

	var _errors = __webpack_require__(7);

	var _client = __webpack_require__(126);

	var _network = __webpack_require__(226);

	var _query = __webpack_require__(14);

	var _log = __webpack_require__(199);

	var _qs = __webpack_require__(210);

	var _qs2 = _interopRequireDefault(_qs);

	var _url = __webpack_require__(214);

	var _url2 = _interopRequireDefault(_url);

	var _assign = __webpack_require__(114);

	var _assign2 = _interopRequireDefault(_assign);

	var _isString = __webpack_require__(36);

	var _isString2 = _interopRequireDefault(_isString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var appdataNamespace = process.env.KINVEY_DATASTORE_NAMESPACE || 'appdata';
	var idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';

	/**
	 * The NetworkStore class is used to find, save, update, remove, count and group enitities
	 * in a collection on the network.
	 */

	var NetworkStore = exports.NetworkStore = function () {
	  /**
	   * Creates a new instance of the NetworkStore class.
	   *
	   * @param   {string}  name   Name of the collection
	   *
	   * @throws  {KinveyError}   If the name provided is not a string.
	   */

	  function NetworkStore(name) {
	    _classCallCheck(this, NetworkStore);

	    if (name && !(0, _isString2.default)(name)) {
	      throw new _errors.KinveyError('Name must be a string.');
	    }

	    /**
	     * @type {string}
	     */
	    this.name = name;

	    /**
	     * @private
	     * @type {Client}
	     */
	    this.client = _client.Client.sharedInstance();
	  }

	  /**
	   * The pathname for the store.
	   *
	   * @return  {string}                Pathname
	   */


	  _createClass(NetworkStore, [{
	    key: 'find',


	    /**
	     * Finds all entities in a collection. A query can be optionally provided to return
	     * a subset of all entities in a collection or omitted to return all entities in
	     * a collection. The number of entities returned will adhere to the limits specified
	     * at http://devcenter.kinvey.com/rest/guides/datastore#queryrestrictions. A
	     * promise will be returned that will be resolved with the entities or rejected with
	     * an error.
	     *
	     * @param   {Query}                 [query]                                   Query used to filter result.
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     */
	    value: function find(query) {
	      var _this = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      _log.Log.debug('Retrieving the entities in the ' + this.name + ' collection.', query);

	      options = (0, _assign2.default)({
	        properties: null,
	        timeout: undefined,
	        handler: function handler() {}
	      }, options);
	      options.flags = _qs2.default.parse(options.flags);

	      if (query && !(query instanceof _query.Query)) {
	        return _babybird2.default.reject(new _errors.KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));
	      }

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.GET,
	        authType: _enums.AuthType.Default,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname
	        }),
	        properties: options.properties,
	        query: query,
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Retrieved the entities in the ' + _this.name + ' collection.', response);
	      }).catch(function (error) {
	        _log.Log.error('Failed to retrieve the entities in the ' + _this.name + ' collection.', error);
	      });

	      return promise;
	    }

	    /**
	     * Groups entities in a collection. An aggregation can be optionally provided to group
	     * a subset of entities in a collection or omitted to group all the entities
	     * in a collection. A promise will be returned that will be resolved with the result
	     * or rejected with an error.
	     *
	     * @param   {Aggregation}           aggregation                               Aggregation used to group entities.
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'group',
	    value: function group(aggregation) {
	      var _this2 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      _log.Log.debug('Grouping the entities in the ' + this.name + ' collection.', aggregation, options);

	      options = (0, _assign2.default)({
	        properties: null,
	        timeout: undefined,
	        useDeltaFetch: true,
	        handler: function handler() {}
	      }, options);

	      if (!(aggregation instanceof _aggregation.Aggregation)) {
	        return _babybird2.default.reject(new _errors.KinveyError('Invalid aggregation. ' + 'It must be an instance of the Kinvey.Aggregation class.'));
	      }

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.GET,
	        authType: _enums.AuthType.Default,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname + '/_group'
	        }),
	        properties: options.properties,
	        data: aggregation.toJSON(),
	        timeout: options.timeout
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Grouped the entities in the ' + _this2.name + ' collection.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to group the entities in the ' + _this2.name + ' collection.', err);
	      });

	      return promise;
	    }

	    /**
	     * Counts entities in a collection. A query can be optionally provided to count
	     * a subset of entities in a collection or omitted to count all the entities
	     * in a collection. A promise will be returned that will be resolved with the count
	     * or rejected with an error.
	     *
	     * @param   {Query}                 [query]                                   Query to count a subset of entities.
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'count',
	    value: function count(query) {
	      var _this3 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      _log.Log.debug('Counting the number of entities in the ' + this.name + ' collection.', query);

	      options = (0, _assign2.default)({
	        properties: null,
	        timeout: undefined,
	        useDeltaFetch: true,
	        handler: function handler() {}
	      }, options);

	      if (query && !(query instanceof _query.Query)) {
	        return _babybird2.default.reject(new _errors.KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));
	      }

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.GET,
	        authType: _enums.AuthType.Default,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname + '/_count'
	        }),
	        properties: options.properties,
	        query: query,
	        timeout: options.timeout
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Counted the number of entities in the ' + _this3.name + ' collection.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to count the number of entities in the ' + _this3.name + ' collection.', err);
	      });

	      return promise;
	    }

	    /**
	     * Retrieves a single entity in a collection by id. A promise will be returned that will
	     * be resolved with the entity or rejected with an error.
	     *
	     * @param   {string}                id                                        Document Id
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'findById',
	    value: function findById(id) {
	      var _this4 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (!id) {
	        _log.Log.warn('No id was provided to retrieve an entity.', id);
	        return _babybird2.default.resolve(null);
	      }

	      _log.Log.debug('Retrieving the entity in the ' + this.name + ' collection with id = ' + id + '.');

	      options = (0, _assign2.default)({
	        properties: null,
	        timeout: undefined,
	        handler: function handler() {}
	      }, options);

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.GET,
	        authType: _enums.AuthType.Default,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname + '/' + id
	        }),
	        properties: options.properties,
	        timeout: options.timeout
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Retrieved the entity in the ' + _this4.name + ' collection with id = ' + id + '.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to retrieve the entity in the ' + _this4.name + ' collection with id = ' + id + '.', err);
	      });

	      return promise;
	    }

	    /**
	     * Save a entity or an array of entities to a collection. A promise will be returned that
	     * will be resolved with the saved entity/entities or rejected with an error.
	     *
	     * @param   {Object|Array}          doc                                       Document or entities to save.
	     * @param   {Object}                options                                   Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'save',
	    value: function save(entity) {
	      var _this5 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (!entity) {
	        _log.Log.warn('No entity was provided to be saved.', entity);
	        return _babybird2.default.resolve(null);
	      }

	      _log.Log.debug('Saving the entity(s) to the ' + this.name + ' collection.', entity);

	      options = (0, _assign2.default)({
	        properties: null,
	        timeout: undefined,
	        handler: function handler() {}
	      }, options);

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.POST,
	        authType: _enums.AuthType.Default,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname
	        }),
	        properties: options.properties,
	        data: entity,
	        timeout: options.timeout,
	        client: this.client
	      });

	      if (entity[idAttribute]) {
	        request.method = _enums.HttpMethod.PUT;
	        request.url = _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname + '/' + entity[idAttribute]
	        });
	      }

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Saved the entity(s) to the ' + _this5.name + ' collection.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to save the entity(s) to the ' + _this5.name + ' collection.', err);
	      });

	      return promise;
	    }

	    /**
	     * Remove entities in a collection. A query can be optionally provided to remove
	     * a subset of entities in a collection or omitted to remove all entities in a
	     * collection. A promise will be returned that will be resolved with a count of the
	     * number of entities removed or rejected with an error.
	     *
	     * @param   {Query}                 [query]                                   Query
	     * @param   {Object}                options                                   Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'remove',
	    value: function remove(query) {
	      var _this6 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      _log.Log.debug('Removing the entities in the ' + this.name + ' collection.', query);

	      options = (0, _assign2.default)({
	        properties: null,
	        timeout: undefined,
	        handler: function handler() {}
	      }, options);

	      if (query && !(query instanceof _query.Query)) {
	        return _babybird2.default.reject(new _errors.KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));
	      }

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.DELETE,
	        authType: _enums.AuthType.Default,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname
	        }),
	        properties: options.properties,
	        query: query,
	        timeout: options.timeout
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Removed the entities in the ' + _this6.name + ' collection.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to remove the entities in the ' + _this6.name + ' collection.', err);
	      });

	      return promise;
	    }

	    /**
	     * Remove an entity in a collection. A promise will be returned that will be
	     * resolved with a count of the number of entities removed or rejected with an error.
	     *
	     * @param   {string}                id                                        Document Id
	     * @param   {Object}                options                                   Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @return  {Promise}                                                         Promise
	     */

	  }, {
	    key: 'removeById',
	    value: function removeById(id) {
	      var _this7 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (!id) {
	        _log.Log.warn('No id was provided to be removed.', id);
	        return _babybird2.default.resolve(null);
	      }

	      _log.Log.debug('Removing an entity in the ' + this.name + ' collection with id = ' + id + '.');

	      options = (0, _assign2.default)({
	        properties: null,
	        timeout: undefined,
	        handler: function handler() {}
	      }, options);

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.DELETE,
	        authType: _enums.AuthType.Default,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname + '/' + id
	        }),
	        properties: options.properties,
	        timeout: options.timeout
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });

	      promise.then(function (response) {
	        _log.Log.info('Removed the entity in the ' + _this7.name + ' collection with id = ' + id + '.', response);
	      }).catch(function (err) {
	        _log.Log.error('Failed to remove the entity in the ' + _this7.name + ' collection with id = ' + id + '.', err);
	      });

	      return promise;
	    }
	  }, {
	    key: '_pathname',
	    get: function get() {
	      var pathname = '/' + appdataNamespace + '/' + this.client.appKey;

	      if (this.name) {
	        pathname = pathname + '/' + this.name;
	      }

	      return pathname;
	    }
	  }]);

	  return NetworkStore;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DeltaFetchRequest = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _request = __webpack_require__(132);

	var _local = __webpack_require__(131);

	var _network = __webpack_require__(226);

	var _response = __webpack_require__(225);

	var _enums = __webpack_require__(128);

	var _errors = __webpack_require__(7);

	var _query3 = __webpack_require__(14);

	var _keyBy = __webpack_require__(148);

	var _keyBy2 = _interopRequireDefault(_keyBy);

	var _reduce = __webpack_require__(201);

	var _reduce2 = _interopRequireDefault(_reduce);

	var _result = __webpack_require__(125);

	var _result2 = _interopRequireDefault(_result);

	var _values = __webpack_require__(186);

	var _values2 = _interopRequireDefault(_values);

	var _forEach = __webpack_require__(16);

	var _forEach2 = _interopRequireDefault(_forEach);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';
	var kmdAttribute = process.env.KINVEY_KMD_ATTRIBUTE || '_kmd';
	var lmtAttribute = process.env.KINVEY_LMT_ATTRIBUTE || 'lmt';
	var maxIdsPerRequest = process.env.KINVEY_MAX_IDS || 200;

	/**
	 * @private
	 */

	var DeltaFetchRequest = exports.DeltaFetchRequest = function (_KinveyRequest) {
	  _inherits(DeltaFetchRequest, _KinveyRequest);

	  function DeltaFetchRequest() {
	    _classCallCheck(this, DeltaFetchRequest);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(DeltaFetchRequest).apply(this, arguments));
	  }

	  _createClass(DeltaFetchRequest, [{
	    key: 'execute',
	    value: function execute() {
	      var _this2 = this;

	      var promise = _get(Object.getPrototypeOf(DeltaFetchRequest.prototype), 'execute', this).call(this).then(function () {
	        if (_this2.method !== _enums.HttpMethod.GET) {
	          throw new Error('Invalid http method. Http GET requests are only supported by DeltaFetchRequests.');
	        }

	        var localRequest = new _local.LocalRequest({
	          method: _enums.HttpMethod.GET,
	          url: _this2.url,
	          headers: _this2.headers,
	          query: _this2.query,
	          timeout: _this2.timeout,
	          client: _this2.client
	        });
	        return localRequest.execute();
	      }).catch(function (error) {
	        if (error instanceof _errors.NotFoundError) {
	          return new _response.Response({
	            statusCode: _enums.StatusCode.Ok,
	            data: []
	          });
	        }

	        throw error;
	      }).then(function (cacheResponse) {
	        if (cacheResponse.data.length > 0) {
	          var _ret = function () {
	            var cacheDocuments = (0, _keyBy2.default)(cacheResponse.data, idAttribute);
	            var query = new _query3.Query((0, _result2.default)(_this2.query, 'toJSON', _this2.query));
	            query.fields([idAttribute, kmdAttribute]);
	            var networkRequest = new _network.NetworkRequest({
	              method: _enums.HttpMethod.GET,
	              url: _this2.url,
	              headers: _this2.headers,
	              auth: _this2.auth,
	              query: query,
	              timeout: _this2.timeout,
	              client: _this2.client
	            });

	            return {
	              v: networkRequest.execute().then(function (networkResponse) {
	                var networkDocuments = (0, _keyBy2.default)(networkResponse.data, idAttribute);
	                var deltaSet = networkDocuments;
	                var cacheDocumentIds = Object.keys(cacheDocuments);

	                (0, _forEach2.default)(cacheDocumentIds, function (id) {
	                  var cacheDocument = cacheDocuments[id];
	                  var networkDocument = networkDocuments[id];

	                  if (networkDocument) {
	                    if (networkDocument[kmdAttribute] && cacheDocument[kmdAttribute] && networkDocument[kmdAttribute][lmtAttribute] === cacheDocument[kmdAttribute][lmtAttribute]) {
	                      delete deltaSet[id];
	                    } else {
	                      delete cacheDocuments[id];
	                    }
	                  } else {
	                    delete cacheDocuments[id];
	                  }
	                });

	                var deltaSetIds = Object.keys(deltaSet);
	                var promises = [];
	                var i = 0;

	                while (i < deltaSetIds.length) {
	                  var _query = new _query3.Query((0, _result2.default)(_this2.query, 'toJSON', _this2.query));
	                  var ids = deltaSetIds.slice(i, deltaSetIds.length > maxIdsPerRequest + i ? maxIdsPerRequest : deltaSetIds.length);
	                  _query.contains(idAttribute, ids);
	                  var _networkRequest = new _network.NetworkRequest({
	                    method: _enums.HttpMethod.GET,
	                    url: _this2.url,
	                    headers: _this2.headers,
	                    auth: _this2.auth,
	                    query: _query,
	                    timeout: _this2.timeout,
	                    client: _this2.client
	                  });

	                  var _promise = _networkRequest.execute();
	                  promises.push(_promise);
	                  i += maxIdsPerRequest;
	                }

	                return _babybird2.default.all(promises).then(function (responses) {
	                  var initialResponse = new _response.Response({
	                    statusCode: _enums.StatusCode.Ok,
	                    data: []
	                  });
	                  return (0, _reduce2.default)(responses, function (result, response) {
	                    if (response.isSuccess()) {
	                      result.addHeaders(response.headers);
	                      result.data = result.data.concat(response.data);
	                    }

	                    return result;
	                  }, initialResponse);
	                }).then(function (response) {
	                  response.data = response.data.concat((0, _values2.default)(cacheDocuments));

	                  if (_this2.query) {
	                    var _query2 = new _query3.Query((0, _result2.default)(_this2.query, 'toJSON', _this2.query));
	                    _query2.skip(0).limit(0);
	                    response.data = _query2._process(response.data);
	                  }

	                  return response;
	                });
	              })
	            };
	          }();

	          if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	        }

	        var networkRequest = new _network.NetworkRequest({
	          method: _enums.HttpMethod.GET,
	          url: _this2.url,
	          headers: _this2.headers,
	          auth: _this2.auth,
	          query: _this2.query,
	          timeout: _this2.timeout,
	          client: _this2.client
	        });
	        return networkRequest.execute();
	      });

	      return promise;
	    }
	  }]);

	  return DeltaFetchRequest;
	}(_request.KinveyRequest);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	var baseDifference = __webpack_require__(248),
	    baseFlatten = __webpack_require__(257),
	    baseIteratee = __webpack_require__(40),
	    isArrayLikeObject = __webpack_require__(29),
	    last = __webpack_require__(259),
	    rest = __webpack_require__(119);

	/**
	 * This method is like `_.difference` except that it accepts `iteratee` which
	 * is invoked for each element of `array` and `values` to generate the criterion
	 * by which they're compared. Result values are chosen from the first array.
	 * The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {...Array} [values] The values to exclude.
	 * @param {Array|Function|Object|string} [iteratee=_.identity]
	 *  The iteratee invoked per element.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);
	 * // => [3.1, 1.3]
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	 * // => [{ 'x': 2 }]
	 */
	var differenceBy = rest(function(array, values) {
	  var iteratee = last(values);
	  if (isArrayLikeObject(iteratee)) {
	    iteratee = undefined;
	  }
	  return isArrayLikeObject(array)
	    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), baseIteratee(iteratee))
	    : [];
	});

	module.exports = differenceBy;


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(249),
	    arrayIncludes = __webpack_require__(251),
	    arrayIncludesWith = __webpack_require__(254),
	    arrayMap = __webpack_require__(96),
	    baseUnary = __webpack_require__(255),
	    cacheHas = __webpack_require__(256);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of methods like `_.difference` without support
	 * for excluding multiple arrays or iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Array} values The values to exclude.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of filtered values.
	 */
	function baseDifference(array, values, iteratee, comparator) {
	  var index = -1,
	      includes = arrayIncludes,
	      isCommon = true,
	      length = array.length,
	      result = [],
	      valuesLength = values.length;

	  if (!length) {
	    return result;
	  }
	  if (iteratee) {
	    values = arrayMap(values, baseUnary(iteratee));
	  }
	  if (comparator) {
	    includes = arrayIncludesWith;
	    isCommon = false;
	  }
	  else if (values.length >= LARGE_ARRAY_SIZE) {
	    includes = cacheHas;
	    isCommon = false;
	    values = new SetCache(values);
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    if (isCommon && computed === computed) {
	      var valuesIndex = valuesLength;
	      while (valuesIndex--) {
	        if (values[valuesIndex] === computed) {
	          continue outer;
	        }
	      }
	      result.push(value);
	    }
	    else if (!includes(values, computed, comparator)) {
	      result.push(value);
	    }
	  }
	  return result;
	}

	module.exports = baseDifference;


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(54),
	    cachePush = __webpack_require__(250);

	/**
	 *
	 * Creates a set cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values ? values.length : 0;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.push(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache.prototype.push = cachePush;

	module.exports = SetCache;


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(69);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the set cache.
	 *
	 * @private
	 * @name push
	 * @memberOf SetCache
	 * @param {*} value The value to cache.
	 */
	function cachePush(value) {
	  var map = this.__data__;
	  if (isKeyable(value)) {
	    var data = map.__data__,
	        hash = typeof value == 'string' ? data.string : data.hash;

	    hash[value] = HASH_UNDEFINED;
	  }
	  else {
	    map.set(value, HASH_UNDEFINED);
	  }
	}

	module.exports = cachePush;


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(252);

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
	  return !!array.length && baseIndexOf(array, value, 0) > -1;
	}

	module.exports = arrayIncludes;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	var indexOfNaN = __webpack_require__(253);

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  if (value !== value) {
	    return indexOfNaN(array, fromIndex);
	  }
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseIndexOf;


/***/ },
/* 253 */
/***/ function(module, exports) {

	/**
	 * Gets the index at which the first occurrence of `NaN` is found in `array`.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	 */
	function indexOfNaN(array, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 0 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    var other = array[index];
	    if (other !== other) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = indexOfNaN;


/***/ },
/* 254 */
/***/ function(module, exports) {

	/**
	 * This function is like `arrayIncludes` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} target The value to search for.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludesWith(array, value, comparator) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arrayIncludesWith;


/***/ },
/* 255 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.unary` without support for storing wrapper metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	module.exports = baseUnary;


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(69);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Checks if `value` is in `cache`.
	 *
	 * @private
	 * @param {Object} cache The set cache to search.
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function cacheHas(cache, value) {
	  var map = cache.__data__;
	  if (isKeyable(value)) {
	    var data = map.__data__,
	        hash = typeof value == 'string' ? data.string : data.hash;

	    return hash[value] === HASH_UNDEFINED;
	  }
	  return map.has(value);
	}

	module.exports = cacheHas;


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(164),
	    isFlattenable = __webpack_require__(258);

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;

	  predicate || (predicate = isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	module.exports = baseFlatten;


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	var isArguments = __webpack_require__(28),
	    isArray = __webpack_require__(35),
	    isArrayLikeObject = __webpack_require__(29);

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	  return isArrayLikeObject(value) && (isArray(value) || isArguments(value));
	}

	module.exports = isFlattenable;


/***/ },
/* 259 */
/***/ function(module, exports) {

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array ? array.length : 0;
	  return length ? array[length - 1] : undefined;
	}

	module.exports = last;


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.UserStore = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _errors = __webpack_require__(7);

	var _networkstore = __webpack_require__(245);

	var _enums = __webpack_require__(128);

	var _network = __webpack_require__(226);

	var _url = __webpack_require__(214);

	var _url2 = _interopRequireDefault(_url);

	var _isArray = __webpack_require__(35);

	var _isArray2 = _interopRequireDefault(_isArray);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var usersNamespace = process.env.KINVEY_USERS_NAMESPACE || 'user';
	var rpcNamespace = process.env.KINVEY_RPC_NAMESPACE || 'rpc';
	var idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';
	var socialIdentityAttribute = process.env.KINVEY_SOCIAL_IDENTITY_ATTRIBUTE || '_socialIdentity';

	var UserStore = exports.UserStore = function (_NetworkStore) {
	  _inherits(UserStore, _NetworkStore);

	  function UserStore() {
	    _classCallCheck(this, UserStore);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(UserStore).apply(this, arguments));
	  }

	  _createClass(UserStore, [{
	    key: 'save',
	    value: function save(user) {
	      var _this2 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      var promise = _babybird2.default.resolve().then(function () {
	        if (!user) {
	          throw new _errors.KinveyError('No user was provided to be updated.');
	        }

	        if ((0, _isArray2.default)(user)) {
	          throw new _errors.KinveyError('Please only update one user at a time.', user);
	        }

	        if (!user[idAttribute]) {
	          throw new _errors.KinveyError('User must have an _id.');
	        }

	        if (options._identity) {
	          var socialIdentity = user[socialIdentityAttribute];
	          if (socialIdentity) {
	            for (var identity in socialIdentity) {
	              if (socialIdentity.hasOwnProperty(identity)) {
	                if (socialIdentity[identity] && options._identity !== identity) {
	                  delete socialIdentity[identity];
	                }
	              }
	            }
	          }
	        }

	        return _get(Object.getPrototypeOf(UserStore.prototype), 'save', _this2).call(_this2, user, options);
	      });

	      return promise;
	    }
	  }, {
	    key: 'exists',
	    value: function exists(username, options) {
	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.POST,
	        authType: _enums.AuthType.App,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: '/' + rpcNamespace + '/' + this.client.appKey + '/check-username-exists'
	        }),
	        properties: options.properties,
	        data: { username: username },
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data.usernameExists;
	      });
	      return promise;
	    }
	  }, {
	    key: 'restore',
	    value: function restore(id) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.POST,
	        authType: _enums.AuthType.Master,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname + '/id'
	        }),
	        properties: options.properties,
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });
	      return promise;
	    }
	  }, {
	    key: '_pathname',

	    /**
	     * The pathname for the store.
	     *
	     * @return  {string}   Pathname
	     */
	    get: function get() {
	      return '/' + usersNamespace + '/' + this.client.appKey;
	    }
	  }]);

	  return UserStore;
	}(_networkstore.NetworkStore);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.FileStore = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _networkstore = __webpack_require__(245);

	var _network = __webpack_require__(226);

	var _enums = __webpack_require__(128);

	var _errors = __webpack_require__(7);

	var _url = __webpack_require__(214);

	var _url2 = _interopRequireDefault(_url);

	var _assign = __webpack_require__(114);

	var _assign2 = _interopRequireDefault(_assign);

	var _map = __webpack_require__(197);

	var _map2 = _interopRequireDefault(_map);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var filesNamespace = process.env.KINVEY_FILES_NAMESPACE || 'blob';
	var idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';

	/**
	 * The FilesStore class is used to find, save, update, remove, count and group files.
	 */

	var FileStore = exports.FileStore = function (_NetworkStore) {
	  _inherits(FileStore, _NetworkStore);

	  function FileStore() {
	    _classCallCheck(this, FileStore);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(FileStore).apply(this, arguments));
	  }

	  _createClass(FileStore, [{
	    key: 'find',


	    /**
	     * Finds all files. A query can be optionally provided to return
	     * a subset of all the files for your application or omitted to return all the files.
	     * The number of files returned will adhere to the limits specified
	     * at http://devcenter.kinvey.com/rest/guides/datastore#queryrestrictions. A
	     * promise will be returned that will be resolved with the files or rejected with
	     * an error.
	     *
	     * @param   {Query}                 [query]                                   Query used to filter result.
	     * @param   {Object}                [options]                                 Options
	     * @param   {Properties}            [options.properties]                      Custom properties to send with
	     *                                                                            the request.
	     * @param   {Number}                [options.timeout]                         Timeout for the request.
	     * @param   {Boolean}               [options.tls]                             Use Transport Layer Security
	     * @param   {Boolean}               [options.download]                        Download the files
	     * @return  {Promise}                                                         Promise
	     *
	     * @example
	     * var filesStore = new Kinvey.FilesStore();
	     * var query = new Kinvey.Query();
	     * query.equalTo('location', 'Boston');
	     * files.find(query, {
	     *   tls: true, // Use transport layer security
	     *   ttl: 60 * 60 * 24, // 1 day in seconds
	     *   download: true // download the files
	     * }).then(function(files) {
	     *   ...
	     * }).catch(function(err) {
	     *   ...
	     * });
	     */
	    value: function find(query) {
	      var _this2 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      options = (0, _assign2.default)({
	        download: false,
	        tls: false
	      }, options);

	      options.flags = {
	        tls: options.tls === true,
	        ttl_in_seconds: options.ttl
	      };

	      var promise = _get(Object.getPrototypeOf(FileStore.prototype), 'find', this).call(this, query, options).then(function (files) {
	        if (options.download === true) {
	          var promises = (0, _map2.default)(files, function (file) {
	            return _this2.downloadByUrl(file._downloadURL, options);
	          });
	          return _babybird2.default.all(promises);
	        }

	        return files;
	      });

	      return promise;
	    }
	  }, {
	    key: 'findById',
	    value: function findById(id, options) {
	      return this.download(id, options);
	    }

	    /**
	     * Download a file. A promise will be returned that will be resolved with the file or rejected with
	     * an error.
	     *
	     * @param   {string}        name                                          Name
	     * @param   {Object}        [options]                                     Options
	     * @param   {Boolean}       [options.tls]                                 Use Transport Layer Security
	     * @param   {Number}        [options.ttl]                                 Time To Live (in seconds)
	     * @param   {Boolean}       [options.stream]                              Stream the file
	     * @param   {DataPolicy}    [options.dataPolicy=DataPolicy.NetworkFirst]    Data policy
	     * @param   {AuthType}      [options.authType=AuthType.Default]           Auth type
	     * @return  {Promise}                                                     Promise
	     *
	     * @example
	     * var files = new Kinvey.Files();
	     * files.download('BostonTeaParty.png', {
	     *   tls: true, // Use transport layer security
	     *   ttl: 60 * 60 * 24, // 1 day in seconds
	     *   stream: true // stream the file
	     * }).then(function(file) {
	     *   ...
	     * }).catch(function(err) {
	     *   ...
	     * });
	     */

	  }, {
	    key: 'download',
	    value: function download(name) {
	      var _this3 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      options = (0, _assign2.default)({
	        stream: false,
	        tls: false
	      }, options);

	      options.flags = {
	        tls: options.tls === true,
	        ttl_in_seconds: options.ttl
	      };

	      var promise = _get(Object.getPrototypeOf(FileStore.prototype), 'findById', this).call(this, name, options).then(function (file) {
	        if (options.stream === true) {
	          return file;
	        }

	        return _this3.downloadByUrl(file._downloadURL, options);
	      });

	      return promise;
	    }
	  }, {
	    key: 'downloadByUrl',
	    value: function downloadByUrl(url) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      var promise = _babybird2.default.resolve().then(function () {
	        var request = new _network.NetworkRequest({
	          method: _enums.HttpMethod.GET,
	          url: url,
	          timeout: options.timeout
	        });
	        request.setHeader('Accept', options.mimeType || 'application-octet-stream');
	        request.removeHeader('Content-Type');
	        request.removeHeader('X-Kinvey-Api-Version');
	        return request.execute();
	      }).then(function (response) {
	        return response.data;
	      });

	      return promise;
	    }

	    /**
	     * Stream a file. A promise will be returned that will be resolved with the file or rejected with
	     * an error.
	     *
	     * @param   {string}        name                                          File name
	     * @param   {Object}        [options]                                     Options
	     * @param   {Boolean}       [options.tls]                                 Use Transport Layer Security
	     * @param   {Number}        [options.ttl]                                 Time To Live (in seconds)
	     * @param   {DataPolicy}    [options.dataPolicy=DataPolicy.NetworkFirst]    Data policy
	     * @param   {AuthType}      [options.authType=AuthType.Default]           Auth type
	     * @return  {Promise}                                                     Promise
	     *
	     * @example
	     * var files = new Kinvey.Files();
	     * files.stream('BostonTeaParty.png', {
	     *   tls: true, // Use transport layer security
	     *   ttl: 60 * 60 * 24, // 1 day in seconds
	     * }).then(function(file) {
	     *   ...
	     * }).catch(function(err) {
	     *   ...
	     * });
	     */

	  }, {
	    key: 'stream',
	    value: function stream(name) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      options.stream = true;
	      return this.download(name, options);
	    }
	  }, {
	    key: 'upload',
	    value: function upload(file) {
	      var metadata = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	      metadata._filename = metadata._filename || file._filename || file.name;
	      metadata.size = metadata.size || file.size || file.length;
	      metadata.mimeType = metadata.mimeType || file.mimeType || file.type || 'application/octet-stream';

	      options = (0, _assign2.default)({
	        properties: null,
	        timeout: undefined,
	        public: false,
	        handler: function handler() {}
	      }, options);

	      if (options.public) {
	        metadata._public = true;
	      }

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.POST,
	        headers: {
	          'X-Kinvey-Content-Type': metadata.mimeType
	        },
	        authType: _enums.AuthType.Default,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname
	        }),
	        properties: options.properties,
	        timeout: options.timeout,
	        data: metadata,
	        client: this.client
	      });

	      if (metadata[idAttribute]) {
	        request.method = _enums.HttpMethod.PUT;
	        request.url = _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname + '/' + metadata._id
	        });
	      }

	      var promise = request.execute().then(function (response) {
	        var uploadUrl = response.data._uploadURL;
	        var headers = response.data._requiredHeaders || {};
	        headers['Content-Type'] = metadata.mimeType;
	        headers['Content-Length'] = metadata.size;

	        // Delete fields from the response
	        delete response.data._expiresAt;
	        delete response.data._requiredHeaders;
	        delete response.data._uploadURL;

	        // Upload the file
	        var request = new _network.NetworkRequest({
	          method: _enums.HttpMethod.PUT,
	          url: uploadUrl,
	          data: file
	        });
	        request.clearHeaders();
	        request.addHeaders(headers);

	        return request.execute().then(function (uploadResponse) {
	          if (uploadResponse.isSuccess()) {
	            response.data._data = file;
	            return response.data;
	          }

	          throw uploadResponse.error;
	        });
	      });

	      return promise;
	    }
	  }, {
	    key: 'save',
	    value: function save() {
	      return _babybird2.default.reject(new _errors.KinveyError('Please use `upload()` to save files.'));
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	      return _babybird2.default.reject(new _errors.KinveyError('Please use `upload()` to update files.'));
	    }
	  }, {
	    key: '_pathname',

	    /**
	     * The pathname for the store.
	     *
	     * @return  {string}                Pathname
	     */
	    get: function get() {
	      return '/' + filesNamespace + '/' + this.client.appKey;
	    }
	  }]);

	  return FileStore;
	}(_networkstore.NetworkStore);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.User = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _client = __webpack_require__(126);

	var _query = __webpack_require__(14);

	var _acl = __webpack_require__(263);

	var _metadata = __webpack_require__(129);

	var _errors = __webpack_require__(7);

	var _mic = __webpack_require__(264);

	var _enums = __webpack_require__(128);

	var _datastore = __webpack_require__(242);

	var _network = __webpack_require__(226);

	var _url = __webpack_require__(214);

	var _url2 = _interopRequireDefault(_url);

	var _assign = __webpack_require__(114);

	var _assign2 = _interopRequireDefault(_assign);

	var _result = __webpack_require__(125);

	var _result2 = _interopRequireDefault(_result);

	var _isObject = __webpack_require__(12);

	var _isObject2 = _interopRequireDefault(_isObject);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var appdataNamespace = process.env.KINVEY_DATASTORE_NAMESPACE || 'appdata';
	var usersNamespace = process.env.KINVEY_USERS_NAMESPACE || 'user';
	var rpcNamespace = process.env.KINVEY_RPC_NAMESPACE || 'rpc';
	var idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';
	var kmdAttribute = process.env.KINVEY_KMD_ATTRIBUTE || '_kmd';
	var socialIdentityAttribute = process.env.KINVEY_SOCIAL_IDENTITY_ATTRIBUTE || '_socialIdentity';
	var usernameAttribute = process.env.KINVEY_USERNAME_ATTRIBUTE || 'username';
	var emailAttribute = process.env.KINVEY_EMAIL_ATTRIBUTE || 'email';
	var supportedIdentities = ['facebook', 'google', 'linkedIn'];
	var hello = void 0;

	if (typeof window !== 'undefined') {
	  hello = __webpack_require__(267);
	}

	/**
	 * The User class is used to represent a single user on the Kinvey platform.
	 * Use the user class to manage the active user lifecycle and perform user operations.
	 */

	var User = exports.User = function () {
	  /**
	   * Create a new instance of a User.
	   *
	   * @param  {Object}   [data={}]    Data for the user.
	   * @return {User}                  User
	   *
	   * @example
	   * var user = new User();
	   */

	  function User() {
	    var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, User);

	    /**
	     * The users data.
	     *
	     * @type {Object}
	     */
	    this.data = data;

	    /**
	     * @private
	     * The client used by this user.
	     *
	     * @type {Client}
	     */
	    this.client = _client.Client.sharedInstance();
	  }

	  /**
	   * The _id for the user.
	   *
	   * @return {?string} _id
	   *
	   * @example
	   * var _id = user._id;
	   */


	  _createClass(User, [{
	    key: 'setAsActiveUser',


	    /**
	     * Set this user as the active user.
	     *
	     * @return {Promise<User>}  The active user.
	     *
	     * @example
	     * var promise = user.setAsActiveUser();
	     * promise.then(function(activeUser) {
	     *   ...
	     * }).catch(function(error) {
	     *   ...
	     * });
	     */
	    value: function setAsActiveUser() {
	      return User.setActiveUser(this, this.client);
	    }

	    /**
	     * Checks if this user is the active user.
	     *
	     * @return {Promise<Boolean>} True or false if this user is the active user.
	     *
	     * @example
	     * var promise = user.isActiveUser();
	     * promise.then(function(isActiveUser) {
	     *   ...
	     * }).catch(function(error) {
	     *   ...
	     * });
	     */

	  }, {
	    key: 'isActive',
	    value: function isActive() {
	      var activeUser = User.getActiveUser(this.client);

	      if (activeUser && activeUser._id === this._id) {
	        return true;
	      }

	      return false;
	    }
	  }, {
	    key: 'login',


	    /**
	     * Login using a username or password.
	     *
	     * @param  {string|Object}      usernameOrData    Username or an object with username
	     *                                                and password properties.
	     * @param  {string}             [password]        Users password.
	     * @param  {Object}             [options={}]      Options
	     * @return {Promise<User>}                        The logged in user.
	     *
	     * @example
	     * var promise = user.login('username', 'password');
	     * promise.then(function(user) {
	     *   ...
	     * }).catch(function(error) {
	     *   ...
	     * });
	     */
	    value: function login(usernameOrData, password) {
	      var _this = this;

	      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	      if (!(0, _isObject2.default)(usernameOrData)) {
	        usernameOrData = {
	          username: usernameOrData,
	          password: password
	        };
	      }

	      if (!usernameOrData._socialIdentity) {
	        if (usernameOrData.username) {
	          usernameOrData.username = String(usernameOrData.username).trim();
	        }

	        if (usernameOrData.password) {
	          usernameOrData.password = String(usernameOrData.password).trim();
	        }
	      }

	      var isActiveUser = this.isActive();
	      if (isActiveUser) {
	        return _babybird2.default.reject(new _errors.ActiveUserError('This user is already the active user.'));
	      }

	      var activeUser = User.getActiveUser(this.client);
	      if (activeUser) {
	        return _babybird2.default.reject(new _errors.ActiveUserError('An active user already exists. ' + 'Please logout the active user before you login.'));
	      }

	      if ((!usernameOrData.username || usernameOrData.username === '' || !usernameOrData.password || usernameOrData.password === '') && !usernameOrData[socialIdentityAttribute]) {
	        return _babybird2.default.reject(new _errors.KinveyError('Username and/or password missing. ' + 'Please provide both a username and password to login.'));
	      }

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.POST,
	        authType: _enums.AuthType.App,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: this._pathname + '/login'
	        }),
	        data: usernameOrData,
	        properties: options.properties,
	        timeout: options.timeout
	      });

	      var promise = request.execute().then(function (response) {
	        _this.data = response.data;
	        return _this.setAsActiveUser();
	      });

	      return promise;
	    }
	  }, {
	    key: 'loginWithIdentity',
	    value: function loginWithIdentity(identity, token, options) {
	      var data = { _socialIdentity: {} };
	      data._socialIdentity[identity] = token;
	      return this.login(data, options);
	    }
	  }, {
	    key: 'loginWithMIC',


	    /* eslint-disable max-len */
	    /**
	     * Login using Mobile Identity Connect.
	     *
	     * @param  {string}                 redirectUri                                                         The redirect uri used
	     *                                                                                                      for MIC logins.
	     * @param  {AuthorizationGrant}     [authorizationGrant=AuthoizationGrant.AuthorizationCodeLoginPage]   MIC authorization grant to use.
	     * @param  {Object}                 [options={}]                                                        Options
	     * @return {Promise<User>}                                                                              The logged in user.
	     *
	     * @example
	     * var promise = user.loginWithMIC('http://example.com');
	     * promise.then(function(user) {
	     *   ...
	     * }).catch(function(error) {
	     *   ...
	     * });
	     */
	    /* eslint-enable max-len */
	    value: function loginWithMIC(redirectUri, authorizationGrant) {
	      var _this2 = this;

	      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	      var mic = new _mic.MobileIdentityConnect(this.client);
	      return mic.login(redirectUri, authorizationGrant, options).then(function (token) {
	        options.redirectUri = redirectUri;
	        options.micClient = (0, _result2.default)(mic.client, 'toJSON', mic.client);
	        return _this2.connect(_mic.MobileIdentityConnect.identity, token, options);
	      });
	    }

	    /**
	     * Logout the user. If the user was the active user then the active user will be set to null.
	     *
	     * @param  {Object}         [options={}]    Options
	     * @return {Promise<User>}                  The logged out user.
	     *
	     * @example
	     * var promise = user.logout();
	     * promise.then(function(user) {
	     *   ...
	     * }).catch(function(error) {
	     *   ...
	     * });
	     */

	  }, {
	    key: 'logout',
	    value: function logout() {
	      var _this3 = this;

	      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      var isActive = this.isActive();

	      if (!isActive) {
	        return _babybird2.default.resolve();
	      }

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.POST,
	        authType: _enums.AuthType.Session,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: '/' + usersNamespace + '/' + this.client.appKey + '/_logout'
	        }),
	        properties: options.properties,
	        timeout: options.timeout
	      });

	      var promise = request.execute().catch(function () {
	        return null;
	      }).then(function () {
	        var isActive = _this3.isActive();
	        if (isActive) {
	          return User.setActiveUser(null, _this3.client);
	        }

	        return null;
	      }).then(function () {
	        return _this3;
	      });

	      return promise;
	    }

	    /**
	     * @private
	     * Returns true or false if identity connect is supported.
	     *
	     * @return {Boolean}  True or false if identity connect is supported.
	     *
	     * @example
	     * var isIdentitySupported = user.isIdentitySupported('identity');
	     */

	  }, {
	    key: 'connectWithIdentity',


	    /* eslint-disable max-len */
	    /**
	     * Connect using an identity (Facebook, Google, LinkedIn etc.).
	     *
	     * @param  {SocialIdentity|string}         identity                                Identity used to connect the user.
	     * @param  {Object}                        [options={}]                            Options
	     * @param  {string}                        [options.collectionName='Identities']   Collection name to use to lookup credentials
	     *                                                                                 for the identity.
	     * @return {Promise<User>}                                                         The connected user.
	     *
	     * @example
	     * var promise = user.connectWithIdentity(SocialIdentity.Facebook);
	     * promise.then(function(user) {
	     *   ...
	     * }).catch(function(error) {
	     *   ...
	     * });
	     */
	    /* eslint-enable max-len */
	    value: function connectWithIdentity(identity) {
	      var _this4 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      options = (0, _assign2.default)({
	        collectionName: 'identities'
	      }, options);

	      var promise = _babybird2.default.resolve().then(function () {
	        if (!identity) {
	          throw new _errors.KinveyError('An identity is required to connect the user.');
	        }

	        if (!User.isIdentitySupported(identity)) {
	          throw new _errors.KinveyError('Identity ' + identity + ' is not supported on this platform.');
	        }

	        var query = new _query.Query().equalTo('identity', identity);
	        var request = new _network.NetworkRequest({
	          method: _enums.HttpMethod.GET,
	          authType: _enums.AuthType.None,
	          url: _url2.default.format({
	            protocol: _this4.client.protocol,
	            host: _this4.client.host,
	            pathname: '/' + appdataNamespace + '/' + _this4.client.appKey + '/' + options.collectionName
	          }),
	          query: query,
	          properties: options.properties,
	          timeout: options.timeout
	        });
	        return request.execute();
	      }).then(function (response) {
	        if (response.data.length === 1) {
	          var helloSettings = {};
	          helloSettings[identity] = response.data[0].key || response.data[0].appId || response.data[0].clientId;
	          hello.init(helloSettings);
	          return hello(identity).login();
	        }

	        throw new _errors.KinveyError('Unsupported identity.');
	      }).then(function () {
	        var authResponse = hello(identity).getAuthResponse();
	        return _this4.connect(identity, authResponse, options);
	      });

	      return promise;
	    }

	    /**
	     * @private
	     *
	     * Connects with the provided accessToken and identity.
	     *
	     * @param  {SocialIdentity|string}         identity      Identity used to connect the user.
	     * @param  {string}                        accessToken   Access token for the identity.
	     * @param  {number}                        [expiresIn]   Time in seconds for how long the access token is valid.
	     * @param  {Object}                        [options={}]  Options
	     * @return {Promise<User>}                               The connected user.
	     *
	     * @example
	     * var token = {
	     *   access_token: 'access_token',
	     *   refresh_token: 'refresh_token',
	     *   expires_in: 3600
	     * };
	     * var promise = user.connect(SocialIdentity.Facebook, token);
	     * promise.then(function(user) {
	     *   ...
	     * }).catch(function(error) {
	     *   ...
	     * });
	     */

	  }, {
	    key: 'connect',
	    value: function connect(identity, token) {
	      var _this5 = this;

	      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	      var data = this.data;
	      var socialIdentity = data[socialIdentityAttribute] || {};
	      socialIdentity[identity] = token;
	      data[socialIdentityAttribute] = socialIdentity;
	      this.data = data;

	      var promise = _babybird2.default.resolve().then(function () {
	        var isActive = _this5.isActive();

	        if (isActive) {
	          options._identity = identity;
	          return _this5.update(data, options);
	        }

	        return _this5.login(data, null, options);
	      }).catch(function (err) {
	        if (err instanceof _errors.NotFoundError) {
	          return _this5.signup(data, options).then(function () {
	            return _this5.connect(identity, token, options);
	          });
	        }

	        throw err;
	      }).then(function () {
	        _this5.client.socialIdentity = {
	          identity: identity,
	          token: _this5._socialIdentity[identity],
	          redirectUri: options.redirectUri,
	          client: options.micClient
	        };
	        return _this5;
	      });

	      return promise;
	    }
	  }, {
	    key: 'disconnect',
	    value: function disconnect(identity) {
	      var _this6 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      var data = this.data;
	      var socialIdentity = data[socialIdentityAttribute] || {};
	      delete socialIdentity[identity];
	      data[socialIdentityAttribute] = socialIdentity;
	      this.data = data;

	      var promise = _babybird2.default.resolve().then(function () {
	        if (!_this6._id) {
	          return _this6;
	        }

	        return _this6.update(data, options);
	      }).then(function () {
	        var socialIdentity = _this6.client.socialIdentity;

	        if (socialIdentity.identity === identity) {
	          _this6.client.socialIdentity = null;
	        }

	        return _this6;
	      });

	      return promise;
	    }
	  }, {
	    key: 'signup',


	    /**
	     * Sign up. If options.state is set to true then the user
	     * will be set as the active user after succesfully signing up the
	     * user.
	     *
	     * @param  {User|Object}    data                    Users data.
	     * @param  {Object}         [options={}]            Options
	     * @param  {Boolean}        [options.state=true]    If set to true, the user will be
	     *                                                  set as the active user after successfully
	     *                                                  being signed up.
	     * @return {Promise<User>}                          The signed up user.
	     *
	     * @example
	     * var promise = user.signup({
	     *   username: 'admin',
	     *   password: 'admin'
	     * });
	     * promise.then(function(user) {
	     *   ...
	     * }).catch(function(error) {
	     *   ...
	     * });
	     */
	    value: function signup(data) {
	      var _this7 = this;

	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      options = (0, _assign2.default)({
	        state: true
	      }, options);

	      var promise = _babybird2.default.resolve().then(function () {
	        if (options.state === true) {
	          var activeUser = User.getActiveUser(_this7.client);
	          if (activeUser) {
	            throw new _errors.ActiveUserError('An active user already exists. ' + 'Please logout the active user before you login.');
	          }
	        }
	      }).then(function () {
	        var request = new _network.NetworkRequest({
	          method: _enums.HttpMethod.POST,
	          authType: _enums.AuthType.App,
	          url: _url2.default.format({
	            protocol: _this7.client.protocol,
	            host: _this7.client.host,
	            pathname: '/' + usersNamespace + '/' + _this7.client.appKey
	          }),
	          data: (0, _result2.default)(data, 'toJSON', data),
	          properties: options.properties,
	          timeout: options.timeout
	        });
	        return request.execute();
	      }).then(function (response) {
	        _this7.data = response.data;

	        if (options.state === true) {
	          return _this7.setAsActiveUser();
	        }

	        return _this7;
	      });

	      return promise;
	    }
	  }, {
	    key: 'signupWithIdentity',
	    value: function signupWithIdentity(identity, tokens, options) {
	      var data = { _socialIdentity: {} };
	      data._socialIdentity[identity] = tokens;
	      return this.signup(data, options);
	    }
	  }, {
	    key: 'update',
	    value: function update(data, options) {
	      var _this8 = this;

	      var userStore = _datastore.DataStore.getInstance(null, _datastore.DataStoreType.User);
	      return userStore.save(data, options).then(function (data) {
	        _this8.data = data;

	        if (_this8.isActive()) {
	          return _this8.setAsActiveUser();
	        }

	        return _this8;
	      });
	    }
	  }, {
	    key: 'me',
	    value: function me() {
	      var _this9 = this;

	      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.GET,
	        authType: _enums.AuthType.Session,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: '/' + usersNamespace + '/' + this.client.appKey + '/_me'
	        }),
	        properties: options.properties,
	        timeout: options.timeout
	      });

	      var promise = request.execute().then(function (response) {
	        _this9.data = response.data;

	        if (!_this9.authtoken) {
	          var activeUser = User.getActiveUser(_this9.client);

	          if (activeUser) {
	            _this9.authtoken = activeUser.authtoken;
	          }
	        }

	        return _this9.setAsActiveUser();
	      });

	      return promise;
	    }
	  }, {
	    key: 'verifyEmail',
	    value: function verifyEmail() {
	      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.POST,
	        authType: _enums.AuthType.App,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: '/' + rpcNamespace + '/' + this.client.appKey + '/' + this.username + '/user-email-verification-initiate'
	        }),
	        properties: options.properties,
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });
	      return promise;
	    }
	  }, {
	    key: 'forgotUsername',
	    value: function forgotUsername() {
	      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.POST,
	        authType: _enums.AuthType.App,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: '/' + rpcNamespace + '/' + this.client.appKey + '/user-forgot-username'
	        }),
	        properties: options.properties,
	        data: { email: this.email },
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });
	      return promise;
	    }
	  }, {
	    key: 'resetPassword',
	    value: function resetPassword() {
	      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.POST,
	        authType: _enums.AuthType.App,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: '/' + rpcNamespace + '/' + this.client.appKey + '/' + this.username + '/user-password-reset-initiate'
	        }),
	        properties: options.properties,
	        timeout: options.timeout,
	        client: this.client
	      });

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });
	      return promise;
	    }

	    // refreshAuthToken(options = {}) {
	    //   const socialIdentity = this.data[socialIdentityAttribute];
	    //   const identity = socialIdentity.activeIdentity;
	    //   const token = socialIdentity[identity];
	    //   let promise;

	    //   switch (identity) {
	    //     case MobileIdentityConnect.identity:
	    //       const mic = new MobileIdentityConnect(this.client);
	    //       promise = mic.refresh(token, options);
	    //       break;
	    //     default:
	    //       promise = Promise.reject(new KinveyError(`Unable to refresh the auth token because ` +
	    //         `the ${identity} identity is not supported.`));
	    //   }

	    //   return promise.then(token => {
	    //     return this.connect(identity, token, options);
	    //   });
	    // }

	  }, {
	    key: 'toJSON',
	    value: function toJSON() {
	      return this.data;
	    }
	  }, {
	    key: '_id',
	    get: function get() {
	      return this.data[idAttribute];
	    }

	    /**
	     * The _acl for the user.
	     *
	     * @return {Acl} _acl
	     *
	     * @example
	     * var _acl = user._acl;
	     */

	  }, {
	    key: '_acl',
	    get: function get() {
	      return new _acl.Acl(this.data);
	    }

	    /**
	     * The metadata for the user.
	     *
	     * @return {Metadata} metadata
	     *
	     * @example
	     * var metadata = user.metadata;
	     */

	  }, {
	    key: 'metadata',
	    get: function get() {
	      return new _metadata.Metadata(this.data);
	    },
	    set: function set(metadata) {
	      this.data[kmdAttribute] = (0, _result2.default)(metadata, 'toJSON', metadata);
	    }

	    /**
	     * The _kmd for the user.
	     *
	     * @return {Metadata} _kmd
	     *
	     * @example
	     * var _kmd = user._kmd;
	     */

	  }, {
	    key: '_kmd',
	    get: function get() {
	      return this.metadata;
	    },
	    set: function set(kmd) {
	      this.metadata = kmd;
	    }
	  }, {
	    key: '_socialIdentity',
	    get: function get() {
	      return this.data[socialIdentityAttribute];
	    }

	    /**
	     * The auth token for the user.
	     *
	     * @return {?string} Auth token
	     *
	     * @example
	     * var authtoken = user.authtoken;
	     */

	  }, {
	    key: 'authtoken',
	    get: function get() {
	      return this.metadata.authtoken;
	    }

	    /**
	     * Set the auth token for the user.
	     *
	     * @param  {?string} authtoken Auth token
	     *
	     * @example
	     * user.authtoken = 'authtoken';
	     */
	    ,
	    set: function set(authtoken) {
	      var metadata = this.metadata;
	      metadata.authtoken = authtoken;
	      this.metadata = metadata;
	    }

	    /**
	     * The username for the user.
	     *
	     * @return {?string} Username
	     *
	     * @example
	     * var username = user.username;
	     */

	  }, {
	    key: 'username',
	    get: function get() {
	      return this.data[usernameAttribute];
	    }

	    /**
	     * The email for the user.
	     *
	     * @return {?string} Email
	     *
	     * @example
	     * var email = user.email;
	     */

	  }, {
	    key: 'email',
	    get: function get() {
	      return this.data[emailAttribute];
	    }
	  }, {
	    key: '_pathname',
	    get: function get() {
	      return '/' + usersNamespace + '/' + this.client.appKey;
	    }

	    /**
	     * Gets the active user. You can optionally provide a client
	     * to use to lookup the active user.
	     *
	     * @param  {Client}           [client=Client.sharedInstance()]   Client to use to set the active user.
	     * @return {Promise<User>}                                       The active user on the client. The
	     *                                                               active user could be null if one does
	     *                                                               not exist.
	     *
	     * @example
	     * var _id = user._id;
	     */

	  }], [{
	    key: 'getActiveUser',
	    value: function getActiveUser() {
	      var client = arguments.length <= 0 || arguments[0] === undefined ? _client.Client.sharedInstance() : arguments[0];

	      var data = client.user;
	      var user = null;

	      if (data) {
	        user = new User(data);
	        user.client = client;
	      }

	      return user;
	    }

	    /**
	     * Sets the active user. You can optionally provide a client to
	     * set the active user on. Only one active user per client is
	     * allowed.
	     *
	     * @param  {?(User|Object)}      [user]                               User to set as the active user.
	     * @param  {Client}              [client=Client.sharedInstance()]     The client to use to set the active user on.
	     * @return {Promise<User>}                                            The active user on the client. The active user
	     *                                                                    could be null if one does not exist.
	     *
	     * @example
	     * var user = new User();
	     * var promise = User.setActiveUser(user);
	     * promise.then(function(activeUser) {
	     *   ...
	     * }).catch(function(error) {
	     *   ...
	     * });
	     */

	  }, {
	    key: 'setActiveUser',
	    value: function setActiveUser(user) {
	      var client = arguments.length <= 1 || arguments[1] === undefined ? _client.Client.sharedInstance() : arguments[1];

	      var data = (0, _result2.default)(user, 'toJSON', user);
	      client.user = data;
	      return User.getActiveUser(client);
	    }
	  }, {
	    key: 'login',
	    value: function login(usernameOrData, password, options) {
	      var user = new User();
	      return user.login(usernameOrData, password, options);
	    }
	  }, {
	    key: 'loginWithIdentity',
	    value: function loginWithIdentity(identity, tokens, options) {
	      var user = new User();
	      return user.loginWithIdentity(identity, tokens, options);
	    }
	  }, {
	    key: 'loginWithMIC',
	    value: function loginWithMIC(redirectUri, authorizationGrant, options) {
	      var user = new User();
	      return user.loginWithMIC(redirectUri, authorizationGrant, options);
	    }
	  }, {
	    key: 'isIdentitySupported',
	    value: function isIdentitySupported(identity) {
	      return hello && supportedIdentities.indexOf(identity) !== -1;
	    }

	    /**
	     * Connect using Facebook.
	     *
	     * @param  {Object}         [options={}]  Options
	     * @return {Promise<User>}                The connected user.
	     *
	     * @example
	     * var promise = user.connectWithFacebook();
	     * promise.then(function(user) {
	     *   ...
	     * }).catch(function(error) {
	     *   ...
	     * });
	     */

	  }, {
	    key: 'connectWithFacebook',
	    value: function connectWithFacebook() {
	      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      return User.connectWithIdentity(_enums.SocialIdentity.Facebook, options);
	    }

	    /**
	     * Connect using Google.
	     *
	     * @param  {Object}         [options={}]  Options
	     * @return {Promise<User>}                The connected user.
	     *
	     * @example
	     * var promise = user.connectWithGoogle();
	     * promise.then(function(user) {
	     *   ...
	     * }).catch(function(error) {
	     *   ...
	     * });
	     */

	  }, {
	    key: 'connectWithGoogle',
	    value: function connectWithGoogle() {
	      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      return User.connectWithIdentity(_enums.SocialIdentity.Google, options);
	    }

	    /**
	     * Connect using LinkedIn.
	     *
	     * @param  {Object}         [options={}]  Options
	     * @return {Promise<User>}                The connected user.
	     *
	     * @example
	     * var promise = user.connectWithLinkedIn();
	     * promise.then(function(user) {
	     *   ...
	     * }).catch(function(error) {
	     *   ...
	     * });
	     */

	  }, {
	    key: 'connectWithLinkedIn',
	    value: function connectWithLinkedIn() {
	      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      return User.connectWithIdentity(_enums.SocialIdentity.LinkedIn, options);
	    }
	  }, {
	    key: 'connectWithIdentity',
	    value: function connectWithIdentity(identity, options) {
	      var user = new User();
	      return user.connectWithIdentity(identity, options);
	    }
	  }, {
	    key: 'signup',
	    value: function signup(data, options) {
	      var user = new User();
	      return user.signup(data, options);
	    }
	  }, {
	    key: 'signupWithIdentity',
	    value: function signupWithIdentity(identity, tokens, options) {
	      var user = new User();
	      return user.signupWithIdentity(identity, tokens, options);
	    }
	  }]);

	  return User;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Acl = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _errors = __webpack_require__(7);

	var _isPlainObject = __webpack_require__(130);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var aclAttribute = process.env.KINVEY_ACL_ATTRIBUTE || '_acl';

	/**
	 * Wrapper for reading and setting permissions on an entity level.
	 *
	 * @example
	 * var entity = { _acl: {} };
	 * var acl = new Kinvey.Acl(entity);
	 */

	var Acl = exports.Acl = function () {
	  function Acl() {
	    var entity = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, Acl);

	    if (!(0, _isPlainObject2.default)(entity)) {
	      throw new _errors.KinveyError('entity argument must be an object');
	    }

	    /**
	     * The kmd properties.
	     *
	     * @private
	     * @type {Object}
	     */
	    this.acl = entity[aclAttribute];
	  }

	  _createClass(Acl, [{
	    key: 'addReader',
	    value: function addReader(user) {
	      var r = this.acl.r || [];

	      if (r.indexOf(user) === -1) {
	        r.push(user);
	      }

	      this.acl.r = r;
	      return this;
	    }
	  }, {
	    key: 'addReaderGroup',
	    value: function addReaderGroup(group) {
	      var groups = this.acl.groups || {};
	      var r = groups.r || [];

	      if (r.indexOf(group) === -1) {
	        r.push(group);
	      }

	      groups.r = r;
	      this.acl.groups = groups;
	      return this;
	    }
	  }, {
	    key: 'addWriter',
	    value: function addWriter(user) {
	      var w = this.acl.w || [];

	      if (w.indexOf(user) === -1) {
	        w.push(user);
	      }

	      this.acl.w = w;
	      return this;
	    }
	  }, {
	    key: 'addWriterGroup',
	    value: function addWriterGroup(group) {
	      var groups = this.acl.groups || {};
	      var w = groups.w || [];

	      if (w.indexOf(group) === -1) {
	        w.push(group);
	      }

	      groups.w = w;
	      this.acl.groups = groups;
	      return this;
	    }
	  }, {
	    key: 'isGloballyReadable',
	    value: function isGloballyReadable() {
	      return this.acl.gr || false;
	    }
	  }, {
	    key: 'isGloballyWritable',
	    value: function isGloballyWritable() {
	      return this.acl.gw || false;
	    }
	  }, {
	    key: 'removeReader',
	    value: function removeReader(user) {
	      var r = this.acl.r || [];
	      var pos = r.indexOf(user);

	      if (pos !== -1) {
	        r.splice(pos, 1);
	      }

	      this.acl.r = r;
	      return this;
	    }
	  }, {
	    key: 'removeReaderGroup',
	    value: function removeReaderGroup(group) {
	      var groups = this.acl.groups || {};
	      var r = groups.r || [];
	      var pos = r.indexOf(group);

	      if (pos !== -1) {
	        r.splice(pos, 1);
	      }

	      groups.r = r;
	      this.acl.groups = groups;
	      return this;
	    }
	  }, {
	    key: 'removeWriter',
	    value: function removeWriter(user) {
	      var w = this.acl.w || [];
	      var pos = w.indexOf(user);

	      if (pos !== -1) {
	        w.splice(pos, 1);
	      }

	      this.acl.w = w;
	      return this;
	    }
	  }, {
	    key: 'removeWriterGroup',
	    value: function removeWriterGroup(group) {
	      var groups = this.acl.groups || {};
	      var w = groups.w || [];
	      var pos = w.indexOf(group);

	      if (pos !== -1) {
	        w.splice(pos, 1);
	      }

	      groups.w = w;
	      this.acl.groups = groups;
	      return this;
	    }
	  }, {
	    key: 'toJSON',
	    value: function toJSON() {
	      return this.acl;
	    }
	  }, {
	    key: 'creator',
	    get: function get() {
	      return this.acl.creator;
	    }
	  }, {
	    key: 'readers',
	    get: function get() {
	      return this.acl.r || [];
	    }
	  }, {
	    key: 'writers',
	    get: function get() {
	      return this.acl.w || [];
	    }
	  }, {
	    key: 'readerGroups',
	    get: function get() {
	      return this.acl.groups ? this.acl.groups.r : [];
	    }
	  }, {
	    key: 'writerGroups',
	    get: function get() {
	      return this.acl.groups ? this.acl.groups.w : [];
	    }
	  }, {
	    key: 'globallyReadable',
	    set: function set(gr) {
	      this.acl.gr = gr || false;
	    }
	  }, {
	    key: 'globallyWritable',
	    set: function set(gw) {
	      this.acl.gw = gw || false;
	    }
	  }]);

	  return Acl;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MobileIdentityConnect = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _babybird = __webpack_require__(3);

	var _babybird2 = _interopRequireDefault(_babybird);

	var _enums = __webpack_require__(128);

	var _errors = __webpack_require__(7);

	var _network = __webpack_require__(226);

	var _client = __webpack_require__(126);

	var _popup = __webpack_require__(265);

	var _path = __webpack_require__(266);

	var _path2 = _interopRequireDefault(_path);

	var _url = __webpack_require__(214);

	var _url2 = _interopRequireDefault(_url);

	var _isString = __webpack_require__(36);

	var _isString2 = _interopRequireDefault(_isString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var authPathname = process.env.KINVEY_MIC_AUTH_PATHNAME || '/oauth/auth';
	var tokenPathname = process.env.KINVEY_MIC_TOKEN_PATHNAME || '/oauth/token';

	/**
	 * @private
	 */

	var MobileIdentityConnect = exports.MobileIdentityConnect = function () {
	  function MobileIdentityConnect() {
	    var client = arguments.length <= 0 || arguments[0] === undefined ? _client.Client.sharedInstance() : arguments[0];

	    _classCallCheck(this, MobileIdentityConnect);

	    this.client = new _client.Client({
	      protocol: process.env.KINVEY_MIC_PROTOCOL || 'https:',
	      host: process.env.KINVEY_MIC_HOST || 'auth.kinvey.com',
	      appKey: client.appKey,
	      appSecret: client.appSecret,
	      masterSecret: client.masterSecret,
	      encryptionKey: client.encryptionKey
	    });
	  }

	  _createClass(MobileIdentityConnect, [{
	    key: 'login',
	    value: function login(redirectUri) {
	      var _this = this;

	      var authorizationGrant = arguments.length <= 1 || arguments[1] === undefined ? _enums.AuthorizationGrant.AuthorizationCodeLoginPage : arguments[1];
	      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	      var clientId = this.client.appKey;

	      var promise = _babybird2.default.resolve().then(function () {
	        if (authorizationGrant === _enums.AuthorizationGrant.AuthorizationCodeLoginPage) {
	          // Step 1: Request a code
	          return _this.requestCodeWithPopup(clientId, redirectUri, options);
	        } else if (authorizationGrant === _enums.AuthorizationGrant.AuthorizationCodeAPI) {
	          // Step 1a: Request a temp login url
	          return _this.requestTempLoginUrl(clientId, redirectUri, options).then(function (url) {
	            return _this.requestCodeWithUrl(url, clientId, redirectUri, options);
	          }); // Step 1b: Request a code
	        }

	        throw new _errors.KinveyError('The authorization grant ' + authorizationGrant + ' is unsupported. ' + 'Please use a supported authorization grant.');
	      }).then(function (code) {
	        return _this.requestToken(code, clientId, redirectUri, options);
	      }); // Step 3: Request a token

	      return promise;
	    }
	  }, {
	    key: 'requestTempLoginUrl',
	    value: function requestTempLoginUrl(clientId, redirectUri) {
	      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	      var pathname = '/';

	      if (options.version) {
	        var version = options.version;

	        if (!(0, _isString2.default)(version)) {
	          version = String(version);
	        }

	        pathname = _path2.default.join(pathname, version.indexOf('v') === 0 ? version : 'v' + version);
	      }

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.POST,
	        headers: {
	          'Content-Type': 'application/x-www-form-urlencoded'
	        },
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: _path2.default.join(pathname, authPathname)
	        }),
	        properties: options.properties,
	        data: {
	          client_id: clientId,
	          redirect_uri: redirectUri,
	          response_type: 'code'
	        }
	      });
	      return request.execute().then(function (response) {
	        return response.data.temp_login_uri;
	      });
	    }
	  }, {
	    key: 'requestCodeWithPopup',
	    value: function requestCodeWithPopup(clientId, redirectUri) {
	      var _this2 = this;

	      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	      var promise = _babybird2.default.resolve().then(function () {
	        var pathname = '/';

	        if (options.version) {
	          var version = options.version;

	          if (!(0, _isString2.default)(version)) {
	            version = String(version);
	          }

	          pathname = _path2.default.join(pathname, version.indexOf('v') === 0 ? version : 'v' + version);
	        }

	        var popup = new _popup.Popup();
	        return popup.open(_url2.default.format({
	          protocol: _this2.client.protocol,
	          host: _this2.client.host,
	          pathname: _path2.default.join(pathname, authPathname),
	          query: {
	            client_id: clientId,
	            redirect_uri: redirectUri,
	            response_type: 'code'
	          }
	        }));
	      }).then(function (popup) {
	        var promise = new _babybird2.default(function (resolve, reject) {
	          var redirected = false;

	          function loadHandler(loadedUrl) {
	            if (loadedUrl.indexOf(redirectUri) === 0) {
	              redirected = true;
	              popup.removeAllListeners();
	              popup.close();
	              resolve(_url2.default.parse(loadedUrl, true).query.code);
	            }
	          }

	          function closeHandler() {
	            popup.removeAllListeners();

	            if (!redirected) {
	              reject(new Error('Login has been cancelled.'));
	            }
	          }

	          popup.on('loaded', loadHandler);
	          popup.on('closed', closeHandler);
	        });
	        return promise;
	      });

	      return promise;
	    }
	  }, {
	    key: 'requestCodeWithUrl',
	    value: function requestCodeWithUrl(loginUrl, clientId, redirectUri) {
	      var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

	      var promise = _babybird2.default.resolve().then(function () {
	        var request = new _network.NetworkRequest({
	          method: _enums.HttpMethod.POST,
	          headers: {
	            'Content-Type': 'application/x-www-form-urlencoded'
	          },
	          url: loginUrl,
	          properties: options.properties,
	          data: {
	            client_id: clientId,
	            redirect_uri: redirectUri,
	            response_type: 'code',
	            username: options.username,
	            password: options.password
	          },
	          followRedirect: false
	        });
	        return request.execute();
	      }).then(function (response) {
	        var location = response.getHeader('location');

	        if (location) {
	          return _url2.default.parse(location, true).query.code;
	        }

	        throw new _errors.KinveyError('Unable to authorize user with username ' + options.username + '.');
	      });

	      return promise;
	    }
	  }, {
	    key: 'requestToken',
	    value: function requestToken(code, clientId, redirectUri) {
	      var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

	      var request = new _network.NetworkRequest({
	        method: _enums.HttpMethod.POST,
	        headers: {
	          'Content-Type': 'application/x-www-form-urlencoded'
	        },
	        authType: _enums.AuthType.App,
	        url: _url2.default.format({
	          protocol: this.client.protocol,
	          host: this.client.host,
	          pathname: tokenPathname
	        }),
	        properties: options.properties,
	        data: {
	          grant_type: 'authorization_code',
	          client_id: clientId,
	          redirect_uri: redirectUri,
	          code: code
	        }
	      });
	      request.automaticallyRefreshAuthToken = false;

	      var promise = request.execute().then(function (response) {
	        return response.data;
	      });
	      return promise;
	    }

	    // refresh(token, options) {
	    //   const clientId = this.client.appKey;
	    //   return this.refreshToken(clientId, token, options);
	    // }

	    // refreshToken(clientId, token, options = {}) {
	    //   const request = new NetworkRequest({
	    //     method: HttpMethod.POST,
	    //     headers: {
	    //       'Content-Type': 'application/x-www-form-urlencoded'
	    //     },
	    //     authType: AuthType.App,
	    //     url: url.format({
	    //       protocol: this.client.protocol,
	    //       host: this.client.host,
	    //       pathname: tokenPathname
	    //     }),
	    //     properties: options.properties,
	    //     data: {
	    //       grant_type: 'refresh_token',
	    //       client_id: clientId,
	    //       redirect_uri: token.redirect_uri,
	    //       refresh_token: token.refresh_token
	    //     }
	    //   });
	    //   request.automaticallyRefreshAuthToken = false;

	    //   const promise = request.execute().then(response => {
	    //     return response.data;
	    //   });

	    //   return promise;
	    // }

	  }], [{
	    key: 'identity',
	    get: function get() {
	      return process.env.KINVEY_MIC_IDENTITY || 'kinveyAuth';
	    }
	  }]);

	  return MobileIdentityConnect;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 265 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @private
	 */

	var Popup = exports.Popup = function () {
	  function Popup() {
	    _classCallCheck(this, Popup);
	  }

	  _createClass(Popup, [{
	    key: 'open',
	    value: function open() {
	      var _this = this;

	      var url = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];

	      var promise = new Promise(function (resolve, reject) {
	        _this.popup = global.open(url, '_blank', 'toolbar=no,location=no');

	        if (_this.popup) {
	          _this.interval = setInterval(function () {
	            if (_this.popup.closed) {
	              _this.closeHandler();
	            } else {
	              try {
	                _this.loadHandler({
	                  url: _this.popup.location.href
	                });
	              } catch (e) {
	                // catch any errors due to cross domain issues
	              }
	            }
	          }, 100);
	        } else {
	          return reject(new Error('The popup was blocked.'));
	        }

	        return resolve(_this);
	      });

	      return promise;
	    }
	  }, {
	    key: 'close',
	    value: function close() {
	      var _this2 = this;

	      var promise = new Promise(function (resolve) {
	        if (_this2.popup) {
	          _this2.popup.close();
	        }
	        resolve();
	      });
	      return promise;
	    }
	  }, {
	    key: 'loadHandler',
	    value: function loadHandler(event) {
	      this.emit('loaded', event.url);
	    }
	  }, {
	    key: 'clickHandler',
	    value: function clickHandler() {
	      this.close();
	    }
	  }, {
	    key: 'closeHandler',
	    value: function closeHandler() {
	      clearTimeout(this.interval);
	      this.emit('closed');
	    }
	  }]);

	  return Popup;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, setImmediate) {/*! hellojs v1.12.0 | (c) 2012-2016 Andrew Dodson | MIT https://adodson.com/hello.js/LICENSE */
	// ES5 Object.create
	if (!Object.create) {

		// Shim, Object create
		// A shim for Object.create(), it adds a prototype to a new object
		Object.create = (function() {

			function F() {}

			return function(o) {

				if (arguments.length != 1) {
					throw new Error('Object.create implementation only accepts one parameter.');
				}

				F.prototype = o;
				return new F();
			};

		})();

	}

	// ES5 Object.keys
	if (!Object.keys) {
		Object.keys = function(o, k, r) {
			r = [];
			for (k in o) {
				if (r.hasOwnProperty.call(o, k))
					r.push(k);
			}

			return r;
		};
	}

	// ES5 [].indexOf
	if (!Array.prototype.indexOf) {
		Array.prototype.indexOf = function(s) {

			for (var j = 0; j < this.length; j++) {
				if (this[j] === s) {
					return j;
				}
			}

			return -1;
		};
	}

	// ES5 [].forEach
	if (!Array.prototype.forEach) {
		Array.prototype.forEach = function(fun/*, thisArg*/) {

			if (this === void 0 || this === null) {
				throw new TypeError();
			}

			var t = Object(this);
			var len = t.length >>> 0;
			if (typeof fun !== 'function') {
				throw new TypeError();
			}

			var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
			for (var i = 0; i < len; i++) {
				if (i in t) {
					fun.call(thisArg, t[i], i, t);
				}
			}

			return this;
		};
	}

	// ES5 [].filter
	if (!Array.prototype.filter) {
		Array.prototype.filter = function(fun, thisArg) {

			var a = [];
			this.forEach(function(val, i, t) {
				if (fun.call(thisArg || void 0, val, i, t)) {
					a.push(val);
				}
			});

			return a;
		};
	}

	// Production steps of ECMA-262, Edition 5, 15.4.4.19
	// Reference: http://es5.github.io/#x15.4.4.19
	if (!Array.prototype.map) {

		Array.prototype.map = function(fun, thisArg) {

			var a = [];
			this.forEach(function(val, i, t) {
				a.push(fun.call(thisArg || void 0, val, i, t));
			});

			return a;
		};
	}

	// ES5 isArray
	if (!Array.isArray) {

		// Function Array.isArray
		Array.isArray = function(o) {
			return Object.prototype.toString.call(o) === '[object Array]';
		};

	}

	// Test for location.assign
	if (typeof window === 'object' && typeof window.location === 'object' && !window.location.assign) {

		window.location.assign = function(url) {
			window.location = url;
		};

	}

	// Test for Function.bind
	if (!Function.prototype.bind) {

		// MDN
		// Polyfill IE8, does not support native Function.bind
		Function.prototype.bind = function(b) {

			if (typeof this !== 'function') {
				throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
			}

			function C() {}

			var a = [].slice;
			var f = a.call(arguments, 1);
			var _this = this;
			var D = function() {
				return _this.apply(this instanceof C ? this : b || window, f.concat(a.call(arguments)));
			};

			C.prototype = this.prototype;
			D.prototype = new C();

			return D;
		};

	}

	/**
	 * @hello.js
	 *
	 * HelloJS is a client side Javascript SDK for making OAuth2 logins and subsequent REST calls.
	 *
	 * @author Andrew Dodson
	 * @website https://adodson.com/hello.js/
	 *
	 * @copyright Andrew Dodson, 2012 - 2015
	 * @license MIT: You are free to use and modify this code for any use, on the condition that this copyright notice remains.
	 */

	var hello = function(name) {
		return hello.use(name);
	};

	hello.utils = {

		// Extend the first object with the properties and methods of the second
		extend: function(r /*, a[, b[, ...]] */) {

			// Get the arguments as an array but ommit the initial item
			Array.prototype.slice.call(arguments, 1).forEach(function(a) {
				if (Array.isArray(r) && Array.isArray(a)) {
					Array.prototype.push.apply(r, a);
				}
				else if (r instanceof Object && a instanceof Object && r !== a) {
					for (var x in a) {
						r[x] = hello.utils.extend(r[x], a[x]);
					}
				}
				else {

					if (Array.isArray(a)) {
						// Clone it
						a = a.slice(0);
					}

					r = a;
				}
			});

			return r;
		}
	};

	// Core library
	hello.utils.extend(hello, {

		settings: {

			// OAuth2 authentication defaults
			redirect_uri: window.location.href.split('#')[0],
			response_type: 'token',
			display: 'popup',
			state: '',

			// OAuth1 shim
			// The path to the OAuth1 server for signing user requests
			// Want to recreate your own? Checkout https://github.com/MrSwitch/node-oauth-shim
			oauth_proxy: 'https://auth-server.herokuapp.com/proxy',

			// API timeout in milliseconds
			timeout: 20000,

			// Popup Options
			popup: {
				resizable: 1,
				scrollbars: 1,
				width: 500,
				height: 550
			},

			// Default scope
			// Many services require atleast a profile scope,
			// HelloJS automatially includes the value of provider.scope_map.basic
			// If that's not required it can be removed via hello.settings.scope.length = 0;
			scope: ['basic'],

			// Scope Maps
			// This is the default module scope, these are the defaults which each service is mapped too.
			// By including them here it prevents the scope from being applied accidentally
			scope_map: {
				basic: ''
			},

			// Default service / network
			default_service: null,

			// Force authentication
			// When hello.login is fired.
			// (null): ignore current session expiry and continue with login
			// (true): ignore current session expiry and continue with login, ask for user to reauthenticate
			// (false): if the current session looks good for the request scopes return the current session.
			force: null,

			// Page URL
			// When 'display=page' this property defines where the users page should end up after redirect_uri
			// Ths could be problematic if the redirect_uri is indeed the final place,
			// Typically this circumvents the problem of the redirect_url being a dumb relay page.
			page_uri: window.location.href
		},

		// Service configuration objects
		services: {},

		// Use
		// Define a new instance of the HelloJS library with a default service
		use: function(service) {

			// Create self, which inherits from its parent
			var self = Object.create(this);

			// Inherit the prototype from its parent
			self.settings = Object.create(this.settings);

			// Define the default service
			if (service) {
				self.settings.default_service = service;
			}

			// Create an instance of Events
			self.utils.Event.call(self);

			return self;
		},

		// Initialize
		// Define the client_ids for the endpoint services
		// @param object o, contains a key value pair, service => clientId
		// @param object opts, contains a key value pair of options used for defining the authentication defaults
		// @param number timeout, timeout in seconds
		init: function(services, options) {

			var utils = this.utils;

			if (!services) {
				return this.services;
			}

			// Define provider credentials
			// Reformat the ID field
			for (var x in services) {if (services.hasOwnProperty(x)) {
				if (typeof (services[x]) !== 'object') {
					services[x] = {id: services[x]};
				}
			}}

			// Merge services if there already exists some
			utils.extend(this.services, services);

			// Update the default settings with this one.
			if (options) {
				utils.extend(this.settings, options);

				// Do this immediatly incase the browser changes the current path.
				if ('redirect_uri' in options) {
					this.settings.redirect_uri = utils.url(options.redirect_uri).href;
				}
			}

			return this;
		},

		// Login
		// Using the endpoint
		// @param network stringify       name to connect to
		// @param options object    (optional)  {display mode, is either none|popup(default)|page, scope: email,birthday,publish, .. }
		// @param callback  function  (optional)  fired on signin
		login: function() {

			// Create an object which inherits its parent as the prototype and constructs a new event chain.
			var _this = this;
			var utils = _this.utils;
			var error = utils.error;
			var promise = utils.Promise();

			// Get parameters
			var p = utils.args({network: 's', options: 'o', callback: 'f'}, arguments);

			// Local vars
			var url;

			// Get all the custom options and store to be appended to the querystring
			var qs = utils.diffKey(p.options, _this.settings);

			// Merge/override options with app defaults
			var opts = p.options = utils.merge(_this.settings, p.options || {});

			// Merge/override options with app defaults
			opts.popup = utils.merge(_this.settings.popup, p.options.popup || {});

			// Network
			p.network = p.network || _this.settings.default_service;

			// Bind callback to both reject and fulfill states
			promise.proxy.then(p.callback, p.callback);

			// Trigger an event on the global listener
			function emit(s, value) {
				hello.emit(s, value);
			}

			promise.proxy.then(emit.bind(this, 'auth.login auth'), emit.bind(this, 'auth.failed auth'));

			// Is our service valid?
			if (typeof (p.network) !== 'string' || !(p.network in _this.services)) {
				// Trigger the default login.
				// Ahh we dont have one.
				return promise.reject(error('invalid_network', 'The provided network was not recognized'));
			}

			var provider = _this.services[p.network];

			// Create a global listener to capture events triggered out of scope
			var callbackId = utils.globalEvent(function(str) {

				// The responseHandler returns a string, lets save this locally
				var obj;

				if (str) {
					obj = JSON.parse(str);
				}
				else {
					obj = error('cancelled', 'The authentication was not completed');
				}

				// Handle these response using the local
				// Trigger on the parent
				if (!obj.error) {

					// Save on the parent window the new credentials
					// This fixes an IE10 bug i think... atleast it does for me.
					utils.store(obj.network, obj);

					// Fulfill a successful login
					promise.fulfill({
						network: obj.network,
						authResponse: obj
					});
				}
				else {
					// Reject a successful login
					promise.reject(obj);
				}
			});

			var redirectUri = utils.url(opts.redirect_uri).href;

			// May be a space-delimited list of multiple, complementary types
			var responseType = provider.oauth.response_type || opts.response_type;

			// Fallback to token if the module hasn't defined a grant url
			if (/\bcode\b/.test(responseType) && !provider.oauth.grant) {
				responseType = responseType.replace(/\bcode\b/, 'token');
			}

			// Query string parameters, we may pass our own arguments to form the querystring
			p.qs = utils.merge(qs, {
				client_id: encodeURIComponent(provider.id),
				response_type: encodeURIComponent(responseType),
				redirect_uri: encodeURIComponent(redirectUri),
				display: opts.display,
				state: {
					client_id: provider.id,
					network: p.network,
					display: opts.display,
					callback: callbackId,
					state: opts.state,
					redirect_uri: redirectUri
				}
			});

			// Get current session for merging scopes, and for quick auth response
			var session = utils.store(p.network);

			// Scopes (authentication permisions)
			// Ensure this is a string - IE has a problem moving Arrays between windows
			// Append the setup scope
			var SCOPE_SPLIT = /[,\s]+/;

			// Include default scope settings (cloned).
			var scope = _this.settings.scope ? [_this.settings.scope.toString()] : [];

			// Extend the providers scope list with the default
			var scopeMap = utils.merge(_this.settings.scope_map, provider.scope || {});

			// Add user defined scopes...
			if (opts.scope) {
				scope.push(opts.scope.toString());
			}

			// Append scopes from a previous session.
			// This helps keep app credentials constant,
			// Avoiding having to keep tabs on what scopes are authorized
			if (session && 'scope' in session && session.scope instanceof String) {
				scope.push(session.scope);
			}

			// Join and Split again
			scope = scope.join(',').split(SCOPE_SPLIT);

			// Format remove duplicates and empty values
			scope = utils.unique(scope).filter(filterEmpty);

			// Save the the scopes to the state with the names that they were requested with.
			p.qs.state.scope = scope.join(',');

			// Map scopes to the providers naming convention
			scope = scope.map(function(item) {
				// Does this have a mapping?
				return (item in scopeMap) ? scopeMap[item] : item;
			});

			// Stringify and Arrayify so that double mapped scopes are given the chance to be formatted
			scope = scope.join(',').split(SCOPE_SPLIT);

			// Again...
			// Format remove duplicates and empty values
			scope = utils.unique(scope).filter(filterEmpty);

			// Join with the expected scope delimiter into a string
			p.qs.scope = scope.join(provider.scope_delim || ',');

			// Is the user already signed in with the appropriate scopes, valid access_token?
			if (opts.force === false) {

				if (session && 'access_token' in session && session.access_token && 'expires' in session && session.expires > ((new Date()).getTime() / 1e3)) {
					// What is different about the scopes in the session vs the scopes in the new login?
					var diff = utils.diff((session.scope || '').split(SCOPE_SPLIT), (p.qs.state.scope || '').split(SCOPE_SPLIT));
					if (diff.length === 0) {

						// OK trigger the callback
						promise.fulfill({
							unchanged: true,
							network: p.network,
							authResponse: session
						});

						// Nothing has changed
						return promise;
					}
				}
			}

			// Page URL
			if (opts.display === 'page' && opts.page_uri) {
				// Add a page location, place to endup after session has authenticated
				p.qs.state.page_uri = utils.url(opts.page_uri).href;
			}

			// Bespoke
			// Override login querystrings from auth_options
			if ('login' in provider && typeof (provider.login) === 'function') {
				// Format the paramaters according to the providers formatting function
				provider.login(p);
			}

			// Add OAuth to state
			// Where the service is going to take advantage of the oauth_proxy
			if (!/\btoken\b/.test(responseType) ||
			parseInt(provider.oauth.version, 10) < 2 ||
			(opts.display === 'none' && provider.oauth.grant && session && session.refresh_token)) {

				// Add the oauth endpoints
				p.qs.state.oauth = provider.oauth;

				// Add the proxy url
				p.qs.state.oauth_proxy = opts.oauth_proxy;

			}

			// Convert state to a string
			p.qs.state = encodeURIComponent(JSON.stringify(p.qs.state));

			// URL
			if (parseInt(provider.oauth.version, 10) === 1) {

				// Turn the request to the OAuth Proxy for 3-legged auth
				url = utils.qs(opts.oauth_proxy, p.qs, encodeFunction);
			}

			// Refresh token
			else if (opts.display === 'none' && provider.oauth.grant && session && session.refresh_token) {

				// Add the refresh_token to the request
				p.qs.refresh_token = session.refresh_token;

				// Define the request path
				url = utils.qs(opts.oauth_proxy, p.qs, encodeFunction);
			}
			else {
				url = utils.qs(provider.oauth.auth, p.qs, encodeFunction);
			}

			// Broadcast this event as an auth:init
			emit('auth.init', p);

			// Execute
			// Trigger how we want self displayed
			if (opts.display === 'none') {
				// Sign-in in the background, iframe
				utils.iframe(url, redirectUri);
			}

			// Triggering popup?
			else if (opts.display === 'popup') {

				var popup = utils.popup(url, redirectUri, opts.popup);

				var timer = setInterval(function() {
					if (!popup || popup.closed) {
						clearInterval(timer);
						if (!promise.state) {

							var response = error('cancelled', 'Login has been cancelled');

							if (!popup) {
								response = error('blocked', 'Popup was blocked');
							}

							response.network = p.network;

							promise.reject(response);
						}
					}
				}, 100);
			}

			else {
				window.location = url;
			}

			return promise.proxy;

			function encodeFunction(s) {return s;}

			function filterEmpty(s) {return !!s;}
		},

		// Remove any data associated with a given service
		// @param string name of the service
		// @param function callback
		logout: function() {

			var _this = this;
			var utils = _this.utils;
			var error = utils.error;

			// Create a new promise
			var promise = utils.Promise();

			var p = utils.args({name:'s', options: 'o', callback: 'f'}, arguments);

			p.options = p.options || {};

			// Add callback to events
			promise.proxy.then(p.callback, p.callback);

			// Trigger an event on the global listener
			function emit(s, value) {
				hello.emit(s, value);
			}

			promise.proxy.then(emit.bind(this, 'auth.logout auth'), emit.bind(this, 'error'));

			// Network
			p.name = p.name || this.settings.default_service;
			p.authResponse = utils.store(p.name);

			if (p.name && !(p.name in _this.services)) {

				promise.reject(error('invalid_network', 'The network was unrecognized'));

			}
			else if (p.name && p.authResponse) {

				// Define the callback
				var callback = function(opts) {

					// Remove from the store
					utils.store(p.name, null);

					// Emit events by default
					promise.fulfill(hello.utils.merge({network:p.name}, opts || {}));
				};

				// Run an async operation to remove the users session
				var _opts = {};
				if (p.options.force) {
					var logout = _this.services[p.name].logout;
					if (logout) {
						// Convert logout to URL string,
						// If no string is returned, then this function will handle the logout async style
						if (typeof (logout) === 'function') {
							logout = logout(callback, p);
						}

						// If logout is a string then assume URL and open in iframe.
						if (typeof (logout) === 'string') {
							utils.iframe(logout);
							_opts.force = null;
							_opts.message = 'Logout success on providers site was indeterminate';
						}
						else if (logout === undefined) {
							// The callback function will handle the response.
							return promise.proxy;
						}
					}
				}

				// Remove local credentials
				callback(_opts);
			}
			else {
				promise.reject(error('invalid_session', 'There was no session to remove'));
			}

			return promise.proxy;
		},

		// Returns all the sessions that are subscribed too
		// @param string optional, name of the service to get information about.
		getAuthResponse: function(service) {

			// If the service doesn't exist
			service = service || this.settings.default_service;

			if (!service || !(service in this.services)) {
				return null;
			}

			return this.utils.store(service) || null;
		},

		// Events: placeholder for the events
		events: {}
	});

	// Core utilities
	hello.utils.extend(hello.utils, {

		// Error
		error: function(code, message) {
			return {
				error: {
					code: code,
					message: message
				}
			};
		},

		// Append the querystring to a url
		// @param string url
		// @param object parameters
		qs: function(url, params, formatFunction) {

			if (params) {

				// Set default formatting function
				formatFunction = formatFunction || encodeURIComponent;

				// Override the items in the URL which already exist
				for (var x in params) {
					var str = '([\\?\\&])' + x + '=[^\\&]*';
					var reg = new RegExp(str);
					if (url.match(reg)) {
						url = url.replace(reg, '$1' + x + '=' + formatFunction(params[x]));
						delete params[x];
					}
				}
			}

			if (!this.isEmpty(params)) {
				return url + (url.indexOf('?') > -1 ? '&' : '?') + this.param(params, formatFunction);
			}

			return url;
		},

		// Param
		// Explode/encode the parameters of an URL string/object
		// @param string s, string to decode
		param: function(s, formatFunction) {
			var b;
			var a = {};
			var m;

			if (typeof (s) === 'string') {

				formatFunction = formatFunction || decodeURIComponent;

				m = s.replace(/^[\#\?]/, '').match(/([^=\/\&]+)=([^\&]+)/g);
				if (m) {
					for (var i = 0; i < m.length; i++) {
						b = m[i].match(/([^=]+)=(.*)/);
						a[b[1]] = formatFunction(b[2]);
					}
				}

				return a;
			}
			else {

				formatFunction = formatFunction || encodeURIComponent;

				var o = s;

				a = [];

				for (var x in o) {if (o.hasOwnProperty(x)) {
					if (o.hasOwnProperty(x)) {
						a.push([x, o[x] === '?' ? '?' : formatFunction(o[x])].join('='));
					}
				}}

				return a.join('&');
			}
		},

		// Local storage facade
		store: (function() {

			var a = ['localStorage', 'sessionStorage'];
			var i = -1;
			var prefix = 'test';

			// Set LocalStorage
			var localStorage;

			while (a[++i]) {
				try {
					// In Chrome with cookies blocked, calling localStorage throws an error
					localStorage = window[a[i]];
					localStorage.setItem(prefix + i, i);
					localStorage.removeItem(prefix + i);
					break;
				}
				catch (e) {
					localStorage = null;
				}
			}

			if (!localStorage) {

				var cache = null;

				localStorage = {
					getItem: function(prop) {
						prop = prop + '=';
						var m = document.cookie.split(';');
						for (var i = 0; i < m.length; i++) {
							var _m = m[i].replace(/(^\s+|\s+$)/, '');
							if (_m && _m.indexOf(prop) === 0) {
								return _m.substr(prop.length);
							}
						}

						return cache;
					},

					setItem: function(prop, value) {
						cache = value;
						document.cookie = prop + '=' + value;
					}
				};

				// Fill the cache up
				cache = localStorage.getItem('hello');
			}

			function get() {
				var json = {};
				try {
					json = JSON.parse(localStorage.getItem('hello')) || {};
				}
				catch (e) {}

				return json;
			}

			function set(json) {
				localStorage.setItem('hello', JSON.stringify(json));
			}

			// Check if the browser support local storage
			return function(name, value, days) {

				// Local storage
				var json = get();

				if (name && value === undefined) {
					return json[name] || null;
				}
				else if (name && value === null) {
					try {
						delete json[name];
					}
					catch (e) {
						json[name] = null;
					}
				}
				else if (name) {
					json[name] = value;
				}
				else {
					return json;
				}

				set(json);

				return json || null;
			};

		})(),

		// Create and Append new DOM elements
		// @param node string
		// @param attr object literal
		// @param dom/string
		append: function(node, attr, target) {

			var n = typeof (node) === 'string' ? document.createElement(node) : node;

			if (typeof (attr) === 'object') {
				if ('tagName' in attr) {
					target = attr;
				}
				else {
					for (var x in attr) {if (attr.hasOwnProperty(x)) {
						if (typeof (attr[x]) === 'object') {
							for (var y in attr[x]) {if (attr[x].hasOwnProperty(y)) {
								n[x][y] = attr[x][y];
							}}
						}
						else if (x === 'html') {
							n.innerHTML = attr[x];
						}

						// IE doesn't like us setting methods with setAttribute
						else if (!/^on/.test(x)) {
							n.setAttribute(x, attr[x]);
						}
						else {
							n[x] = attr[x];
						}
					}}
				}
			}

			if (target === 'body') {
				(function self() {
					if (document.body) {
						document.body.appendChild(n);
					}
					else {
						setTimeout(self, 16);
					}
				})();
			}
			else if (typeof (target) === 'object') {
				target.appendChild(n);
			}
			else if (typeof (target) === 'string') {
				document.getElementsByTagName(target)[0].appendChild(n);
			}

			return n;
		},

		// An easy way to create a hidden iframe
		// @param string src
		iframe: function(src) {
			this.append('iframe', {src: src, style: {position:'absolute', left: '-1000px', bottom: 0, height: '1px', width: '1px'}}, 'body');
		},

		// Recursive merge two objects into one, second parameter overides the first
		// @param a array
		merge: function(/* Args: a, b, c, .. n */) {
			var args = Array.prototype.slice.call(arguments);
			args.unshift({});
			return this.extend.apply(null, args);
		},

		// Makes it easier to assign parameters, where some are optional
		// @param o object
		// @param a arguments
		args: function(o, args) {

			var p = {};
			var i = 0;
			var t = null;
			var x = null;

			// 'x' is the first key in the list of object parameters
			for (x in o) {if (o.hasOwnProperty(x)) {
				break;
			}}

			// Passing in hash object of arguments?
			// Where the first argument can't be an object
			if ((args.length === 1) && (typeof (args[0]) === 'object') && o[x] != 'o!') {

				// Could this object still belong to a property?
				// Check the object keys if they match any of the property keys
				for (x in args[0]) {if (o.hasOwnProperty(x)) {
					// Does this key exist in the property list?
					if (x in o) {
						// Yes this key does exist so its most likely this function has been invoked with an object parameter
						// Return first argument as the hash of all arguments
						return args[0];
					}
				}}
			}

			// Else loop through and account for the missing ones.
			for (x in o) {if (o.hasOwnProperty(x)) {

				t = typeof (args[i]);

				if ((typeof (o[x]) === 'function' && o[x].test(args[i])) || (typeof (o[x]) === 'string' && (
				(o[x].indexOf('s') > -1 && t === 'string') ||
				(o[x].indexOf('o') > -1 && t === 'object') ||
				(o[x].indexOf('i') > -1 && t === 'number') ||
				(o[x].indexOf('a') > -1 && t === 'object') ||
				(o[x].indexOf('f') > -1 && t === 'function')
				))
				) {
					p[x] = args[i++];
				}

				else if (typeof (o[x]) === 'string' && o[x].indexOf('!') > -1) {
					return false;
				}
			}}

			return p;
		},

		// Returns a URL instance
		url: function(path) {

			// If the path is empty
			if (!path) {
				return window.location;
			}

			// Chrome and FireFox support new URL() to extract URL objects
			else if (window.URL && URL instanceof Function && URL.length !== 0) {
				return new URL(path, window.location);
			}

			// Ugly shim, it works!
			else {
				var a = document.createElement('a');
				a.href = path;
				return a.cloneNode(false);
			}
		},

		diff: function(a, b) {
			return b.filter(function(item) {
				return a.indexOf(item) === -1;
			});
		},

		// Get the different hash of properties unique to `a`, and not in `b`
		diffKey: function(a, b) {
			if (a || !b) {
				var r = {};
				for (var x in a) {
					// Does the property not exist?
					if (!(x in b)) {
						r[x] = a[x];
					}
				}

				return r;
			}

			return a;
		},

		// Unique
		// Remove duplicate and null values from an array
		// @param a array
		unique: function(a) {
			if (!Array.isArray(a)) { return []; }

			return a.filter(function(item, index) {
				// Is this the first location of item
				return a.indexOf(item) === index;
			});
		},

		isEmpty: function(obj) {

			// Scalar
			if (!obj)
				return true;

			// Array
			if (Array.isArray(obj)) {
				return !obj.length;
			}
			else if (typeof (obj) === 'object') {
				// Object
				for (var key in obj) {
					if (obj.hasOwnProperty(key)) {
						return false;
					}
				}
			}

			return true;
		},

		//jscs:disable

		/*!
		 **  Thenable -- Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
		 **  Copyright (c) 2013-2014 Ralf S. Engelschall <http://engelschall.com>
		 **  Licensed under The MIT License <http://opensource.org/licenses/MIT>
		 **  Source-Code distributed on <http://github.com/rse/thenable>
		 */
		Promise: (function(){
			/*  promise states [Promises/A+ 2.1]  */
			var STATE_PENDING   = 0;                                         /*  [Promises/A+ 2.1.1]  */
			var STATE_FULFILLED = 1;                                         /*  [Promises/A+ 2.1.2]  */
			var STATE_REJECTED  = 2;                                         /*  [Promises/A+ 2.1.3]  */

			/*  promise object constructor  */
			var api = function (executor) {
				/*  optionally support non-constructor/plain-function call  */
				if (!(this instanceof api))
					return new api(executor);

				/*  initialize object  */
				this.id           = "Thenable/1.0.6";
				this.state        = STATE_PENDING; /*  initial state  */
				this.fulfillValue = undefined;     /*  initial value  */     /*  [Promises/A+ 1.3, 2.1.2.2]  */
				this.rejectReason = undefined;     /*  initial reason */     /*  [Promises/A+ 1.5, 2.1.3.2]  */
				this.onFulfilled  = [];            /*  initial handlers  */
				this.onRejected   = [];            /*  initial handlers  */

				/*  provide optional information-hiding proxy  */
				this.proxy = {
					then: this.then.bind(this)
				};

				/*  support optional executor function  */
				if (typeof executor === "function")
					executor.call(this, this.fulfill.bind(this), this.reject.bind(this));
			};

			/*  promise API methods  */
			api.prototype = {
				/*  promise resolving methods  */
				fulfill: function (value) { return deliver(this, STATE_FULFILLED, "fulfillValue", value); },
				reject:  function (value) { return deliver(this, STATE_REJECTED,  "rejectReason", value); },

				/*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
				then: function (onFulfilled, onRejected) {
					var curr = this;
					var next = new api();                                    /*  [Promises/A+ 2.2.7]  */
					curr.onFulfilled.push(
						resolver(onFulfilled, next, "fulfill"));             /*  [Promises/A+ 2.2.2/2.2.6]  */
					curr.onRejected.push(
						resolver(onRejected,  next, "reject" ));             /*  [Promises/A+ 2.2.3/2.2.6]  */
					execute(curr);
					return next.proxy;                                       /*  [Promises/A+ 2.2.7, 3.3]  */
				}
			};

			/*  deliver an action  */
			var deliver = function (curr, state, name, value) {
				if (curr.state === STATE_PENDING) {
					curr.state = state;                                      /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */
					curr[name] = value;                                      /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */
					execute(curr);
				}
				return curr;
			};

			/*  execute all handlers  */
			var execute = function (curr) {
				if (curr.state === STATE_FULFILLED)
					execute_handlers(curr, "onFulfilled", curr.fulfillValue);
				else if (curr.state === STATE_REJECTED)
					execute_handlers(curr, "onRejected",  curr.rejectReason);
			};

			/*  execute particular set of handlers  */
			var execute_handlers = function (curr, name, value) {
				/* global process: true */
				/* global setImmediate: true */
				/* global setTimeout: true */

				/*  short-circuit processing  */
				if (curr[name].length === 0)
					return;

				/*  iterate over all handlers, exactly once  */
				var handlers = curr[name];
				curr[name] = [];                                             /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */
				var func = function () {
					for (var i = 0; i < handlers.length; i++)
						handlers[i](value);                                  /*  [Promises/A+ 2.2.5]  */
				};

				/*  execute procedure asynchronously  */                     /*  [Promises/A+ 2.2.4, 3.1]  */
				if (typeof process === "object" && typeof process.nextTick === "function")
					process.nextTick(func);
				else if (typeof setImmediate === "function")
					setImmediate(func);
				else
					setTimeout(func, 0);
			};

			/*  generate a resolver function  */
			var resolver = function (cb, next, method) {
				return function (value) {
					if (typeof cb !== "function")                            /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */
						next[method].call(next, value);                      /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */
					else {
						var result;
						try { result = cb(value); }                          /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */
						catch (e) {
							next.reject(e);                                  /*  [Promises/A+ 2.2.7.2]  */
							return;
						}
						resolve(next, result);                               /*  [Promises/A+ 2.2.7.1]  */
					}
				};
			};

			/*  "Promise Resolution Procedure"  */                           /*  [Promises/A+ 2.3]  */
			var resolve = function (promise, x) {
				/*  sanity check arguments  */                               /*  [Promises/A+ 2.3.1]  */
				if (promise === x || promise.proxy === x) {
					promise.reject(new TypeError("cannot resolve promise with itself"));
					return;
				}

				/*  surgically check for a "then" method
					(mainly to just call the "getter" of "then" only once)  */
				var then;
				if ((typeof x === "object" && x !== null) || typeof x === "function") {
					try { then = x.then; }                                   /*  [Promises/A+ 2.3.3.1, 3.5]  */
					catch (e) {
						promise.reject(e);                                   /*  [Promises/A+ 2.3.3.2]  */
						return;
					}
				}

				/*  handle own Thenables    [Promises/A+ 2.3.2]
					and similar "thenables" [Promises/A+ 2.3.3]  */
				if (typeof then === "function") {
					var resolved = false;
					try {
						/*  call retrieved "then" method */                  /*  [Promises/A+ 2.3.3.3]  */
						then.call(x,
							/*  resolvePromise  */                           /*  [Promises/A+ 2.3.3.3.1]  */
							function (y) {
								if (resolved) return; resolved = true;       /*  [Promises/A+ 2.3.3.3.3]  */
								if (y === x)                                 /*  [Promises/A+ 3.6]  */
									promise.reject(new TypeError("circular thenable chain"));
								else
									resolve(promise, y);
							},

							/*  rejectPromise  */                            /*  [Promises/A+ 2.3.3.3.2]  */
							function (r) {
								if (resolved) return; resolved = true;       /*  [Promises/A+ 2.3.3.3.3]  */
								promise.reject(r);
							}
						);
					}
					catch (e) {
						if (!resolved)                                       /*  [Promises/A+ 2.3.3.3.3]  */
							promise.reject(e);                               /*  [Promises/A+ 2.3.3.3.4]  */
					}
					return;
				}

				/*  handle other values  */
				promise.fulfill(x);                                          /*  [Promises/A+ 2.3.4, 2.3.3.4]  */
			};

			/*  export API  */
			return api;
		})(),

		//jscs:enable

		// Event
		// A contructor superclass for adding event menthods, on, off, emit.
		Event: function() {

			var separator = /[\s\,]+/;

			// If this doesn't support getPrototype then we can't get prototype.events of the parent
			// So lets get the current instance events, and add those to a parent property
			this.parent = {
				events: this.events,
				findEvents: this.findEvents,
				parent: this.parent,
				utils: this.utils
			};

			this.events = {};

			// On, subscribe to events
			// @param evt   string
			// @param callback  function
			this.on = function(evt, callback) {

				if (callback && typeof (callback) === 'function') {
					var a = evt.split(separator);
					for (var i = 0; i < a.length; i++) {

						// Has this event already been fired on this instance?
						this.events[a[i]] = [callback].concat(this.events[a[i]] || []);
					}
				}

				return this;
			};

			// Off, unsubscribe to events
			// @param evt   string
			// @param callback  function
			this.off = function(evt, callback) {

				this.findEvents(evt, function(name, index) {
					if (!callback || this.events[name][index] === callback) {
						this.events[name][index] = null;
					}
				});

				return this;
			};

			// Emit
			// Triggers any subscribed events
			this.emit = function(evt /*, data, ... */) {

				// Get arguments as an Array, knock off the first one
				var args = Array.prototype.slice.call(arguments, 1);
				args.push(evt);

				// Handler
				var handler = function(name, index) {

					// Replace the last property with the event name
					args[args.length - 1] = (name === '*' ? evt : name);

					// Trigger
					this.events[name][index].apply(this, args);
				};

				// Find the callbacks which match the condition and call
				var _this = this;
				while (_this && _this.findEvents) {

					// Find events which match
					_this.findEvents(evt + ',*', handler);
					_this = _this.parent;
				}

				return this;
			};

			//
			// Easy functions
			this.emitAfter = function() {
				var _this = this;
				var args = arguments;
				setTimeout(function() {
					_this.emit.apply(_this, args);
				}, 0);

				return this;
			};

			this.findEvents = function(evt, callback) {

				var a = evt.split(separator);

				for (var name in this.events) {if (this.events.hasOwnProperty(name)) {

					if (a.indexOf(name) > -1) {

						for (var i = 0; i < this.events[name].length; i++) {

							// Does the event handler exist?
							if (this.events[name][i]) {
								// Emit on the local instance of this
								callback.call(this, name, i);
							}
						}
					}
				}}
			};

			return this;
		},

		// Global Events
		// Attach the callback to the window object
		// Return its unique reference
		globalEvent: function(callback, guid) {
			// If the guid has not been supplied then create a new one.
			guid = guid || '_hellojs_' + parseInt(Math.random() * 1e12, 10).toString(36);

			// Define the callback function
			window[guid] = function() {
				// Trigger the callback
				try {
					if (callback.apply(this, arguments)) {
						delete window[guid];
					}
				}
				catch (e) {
					console.error(e);
				}
			};

			return guid;
		},

		// Trigger a clientside popup
		// This has been augmented to support PhoneGap
		popup: function(url, redirectUri, options) {

			var documentElement = document.documentElement;

			// Multi Screen Popup Positioning (http://stackoverflow.com/a/16861050)
			// Credit: http://www.xtf.dk/2011/08/center-new-popup-window-even-on.html
			// Fixes dual-screen position                         Most browsers      Firefox

			if (options.height) {
				var dualScreenTop = window.screenTop !== undefined ? window.screenTop : screen.top;
				var height = screen.height || window.innerHeight || documentElement.clientHeight;
				options.top = parseInt((height - options.height) / 2, 10) + dualScreenTop;
			}

			if (options.width) {
				var dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : screen.left;
				var width = screen.width || window.innerWidth || documentElement.clientWidth;
				options.left = parseInt((width - options.width) / 2, 10) + dualScreenLeft;
			}

			// Convert options into an array
			var optionsArray = [];
			Object.keys(options).forEach(function(name) {
				var value = options[name];
				optionsArray.push(name + (value !== null ? '=' + value : ''));
			});

			// Call the open() function with the initial path
			//
			// OAuth redirect, fixes URI fragments from being lost in Safari
			// (URI Fragments within 302 Location URI are lost over HTTPS)
			// Loading the redirect.html before triggering the OAuth Flow seems to fix it.
			//
			// Firefox  decodes URL fragments when calling location.hash.
			//  - This is bad if the value contains break points which are escaped
			//  - Hence the url must be encoded twice as it contains breakpoints.
			if (navigator.userAgent.indexOf('Safari') !== -1 && navigator.userAgent.indexOf('Chrome') === -1) {
				url = redirectUri + '#oauth_redirect=' + encodeURIComponent(encodeURIComponent(url));
			}

			var popup = window.open(
				url,
				'_blank',
				optionsArray.join(',')
			);

			if (popup && popup.focus) {
				popup.focus();
			}

			return popup;
		},

		// OAuth and API response handler
		responseHandler: function(window, parent) {

			var _this = this;
			var p;
			var location = window.location;

			// Is this an auth relay message which needs to call the proxy?
			p = _this.param(location.search);

			// OAuth2 or OAuth1 server response?
			if (p && p.state && (p.code || p.oauth_token)) {

				var state = JSON.parse(p.state);

				// Add this path as the redirect_uri
				p.redirect_uri = state.redirect_uri || location.href.replace(/[\?\#].*$/, '');

				// Redirect to the host
				var path = state.oauth_proxy + '?' + _this.param(p);

				location.assign(path);

				return;
			}

			// Save session, from redirected authentication
			// #access_token has come in?
			//
			// FACEBOOK is returning auth errors within as a query_string... thats a stickler for consistency.
			// SoundCloud is the state in the querystring and the token in the hashtag, so we'll mix the two together

			p = _this.merge(_this.param(location.search || ''), _this.param(location.hash || ''));

			// If p.state
			if (p && 'state' in p) {

				// Remove any addition information
				// E.g. p.state = 'facebook.page';
				try {
					var a = JSON.parse(p.state);
					_this.extend(p, a);
				}
				catch (e) {
					console.error('Could not decode state parameter');
				}

				// Access_token?
				if (('access_token' in p && p.access_token) && p.network) {

					if (!p.expires_in || parseInt(p.expires_in, 10) === 0) {
						// If p.expires_in is unset, set to 0
						p.expires_in = 0;
					}

					p.expires_in = parseInt(p.expires_in, 10);
					p.expires = ((new Date()).getTime() / 1e3) + (p.expires_in || (60 * 60 * 24 * 365));

					// Lets use the "state" to assign it to one of our networks
					authCallback(p, window, parent);
				}

				// Error=?
				// &error_description=?
				// &state=?
				else if (('error' in p && p.error) && p.network) {

					p.error = {
						code: p.error,
						message: p.error_message || p.error_description
					};

					// Let the state handler handle it
					authCallback(p, window, parent);
				}

				// API call, or a cancelled login
				// Result is serialized JSON string
				else if (p.callback && p.callback in parent) {

					// Trigger a function in the parent
					var res = 'result' in p && p.result ? JSON.parse(p.result) : false;

					// Trigger the callback on the parent
					parent[p.callback](res);
					closeWindow();
				}

				// If this page is still open
				if (p.page_uri) {
					location.assign(p.page_uri);
				}
			}

			// OAuth redirect, fixes URI fragments from being lost in Safari
			// (URI Fragments within 302 Location URI are lost over HTTPS)
			// Loading the redirect.html before triggering the OAuth Flow seems to fix it.
			else if ('oauth_redirect' in p) {

				location.assign(decodeURIComponent(p.oauth_redirect));
				return;
			}

			// Trigger a callback to authenticate
			function authCallback(obj, window, parent) {

				var cb = obj.callback;
				var network = obj.network;

				// Trigger the callback on the parent
				_this.store(network, obj);

				// If this is a page request it has no parent or opener window to handle callbacks
				if (('display' in obj) && obj.display === 'page') {
					return;
				}

				// Remove from session object
				if (parent && cb && cb in parent) {

					try {
						delete obj.callback;
					}
					catch (e) {}

					// Update store
					_this.store(network, obj);

					// Call the globalEvent function on the parent
					// It's safer to pass back a string to the parent,
					// Rather than an object/array (better for IE8)
					var str = JSON.stringify(obj);

					try {
						parent[cb](str);
					}
					catch (e) {
						// Error thrown whilst executing parent callback
					}
				}

				closeWindow();
			}

			function closeWindow() {

				if (window.frameElement) {
					// Inside an iframe, remove from parent
					parent.document.body.removeChild(window.frameElement);
				}
				else {
					// Close this current window
					try {
						window.close();
					}
					catch (e) {}

					// IOS bug wont let us close a popup if still loading
					if (window.addEventListener) {
						window.addEventListener('load', function() {
							window.close();
						});
					}
				}

			}
		}
	});

	// Events
	// Extend the hello object with its own event instance
	hello.utils.Event.call(hello);

	///////////////////////////////////
	// Monitoring session state
	// Check for session changes
	///////////////////////////////////

	(function(hello) {

		// Monitor for a change in state and fire
		var oldSessions = {};

		// Hash of expired tokens
		var expired = {};

		// Listen to other triggers to Auth events, use these to update this
		hello.on('auth.login, auth.logout', function(auth) {
			if (auth && typeof (auth) === 'object' && auth.network) {
				oldSessions[auth.network] = hello.utils.store(auth.network) || {};
			}
		});

		(function self() {

			var CURRENT_TIME = ((new Date()).getTime() / 1e3);
			var emit = function(eventName) {
				hello.emit('auth.' + eventName, {
					network: name,
					authResponse: session
				});
			};

			// Loop through the services
			for (var name in hello.services) {if (hello.services.hasOwnProperty(name)) {

				if (!hello.services[name].id) {
					// We haven't attached an ID so dont listen.
					continue;
				}

				// Get session
				var session = hello.utils.store(name) || {};
				var provider = hello.services[name];
				var oldSess = oldSessions[name] || {};

				// Listen for globalEvents that did not get triggered from the child
				if (session && 'callback' in session) {

					// To do remove from session object...
					var cb = session.callback;
					try {
						delete session.callback;
					}
					catch (e) {}

					// Update store
					// Removing the callback
					hello.utils.store(name, session);

					// Emit global events
					try {
						window[cb](session);
					}
					catch (e) {}
				}

				// Refresh token
				if (session && ('expires' in session) && session.expires < CURRENT_TIME) {

					// If auto refresh is possible
					// Either the browser supports
					var refresh = provider.refresh || session.refresh_token;

					// Has the refresh been run recently?
					if (refresh && (!(name in expired) || expired[name] < CURRENT_TIME)) {
						// Try to resignin
						hello.emit('notice', name + ' has expired trying to resignin');
						hello.login(name, {display: 'none', force: false});

						// Update expired, every 10 minutes
						expired[name] = CURRENT_TIME + 600;
					}

					// Does this provider not support refresh
					else if (!refresh && !(name in expired)) {
						// Label the event
						emit('expired');
						expired[name] = true;
					}

					// If session has expired then we dont want to store its value until it can be established that its been updated
					continue;
				}

				// Has session changed?
				else if (oldSess.access_token === session.access_token &&
				oldSess.expires === session.expires) {
					continue;
				}

				// Access_token has been removed
				else if (!session.access_token && oldSess.access_token) {
					emit('logout');
				}

				// Access_token has been created
				else if (session.access_token && !oldSess.access_token) {
					emit('login');
				}

				// Access_token has been updated
				else if (session.expires !== oldSess.expires) {
					emit('update');
				}

				// Updated stored session
				oldSessions[name] = session;

				// Remove the expired flags
				if (name in expired) {
					delete expired[name];
				}
			}}

			// Check error events
			setTimeout(self, 1000);
		})();

	})(hello);

	// EOF CORE lib
	//////////////////////////////////

	/////////////////////////////////////////
	// API
	// @param path    string
	// @param query   object (optional)
	// @param method  string (optional)
	// @param data    object (optional)
	// @param timeout integer (optional)
	// @param callback  function (optional)

	hello.api = function() {

		// Shorthand
		var _this = this;
		var utils = _this.utils;
		var error = utils.error;

		// Construct a new Promise object
		var promise = utils.Promise();

		// Arguments
		var p = utils.args({path: 's!', query: 'o', method: 's', data: 'o', timeout: 'i', callback: 'f'}, arguments);

		// Method
		p.method = (p.method || 'get').toLowerCase();

		// Headers
		p.headers = p.headers || {};

		// Query
		p.query = p.query || {};

		// If get, put all parameters into query
		if (p.method === 'get' || p.method === 'delete') {
			utils.extend(p.query, p.data);
			p.data = {};
		}

		var data = p.data = p.data || {};

		// Completed event callback
		promise.then(p.callback, p.callback);

		// Remove the network from path, e.g. facebook:/me/friends
		// Results in { network : facebook, path : me/friends }
		if (!p.path) {
			return promise.reject(error('invalid_path', 'Missing the path parameter from the request'));
		}

		p.path = p.path.replace(/^\/+/, '');
		var a = (p.path.split(/[\/\:]/, 2) || [])[0].toLowerCase();

		if (a in _this.services) {
			p.network = a;
			var reg = new RegExp('^' + a + ':?\/?');
			p.path = p.path.replace(reg, '');
		}

		// Network & Provider
		// Define the network that this request is made for
		p.network = _this.settings.default_service = p.network || _this.settings.default_service;
		var o = _this.services[p.network];

		// INVALID
		// Is there no service by the given network name?
		if (!o) {
			return promise.reject(error('invalid_network', 'Could not match the service requested: ' + p.network));
		}

		// PATH
		// As long as the path isn't flagged as unavaiable, e.g. path == false

		if (!(!(p.method in o) || !(p.path in o[p.method]) || o[p.method][p.path] !== false)) {
			return promise.reject(error('invalid_path', 'The provided path is not available on the selected network'));
		}

		// PROXY
		// OAuth1 calls always need a proxy

		if (!p.oauth_proxy) {
			p.oauth_proxy = _this.settings.oauth_proxy;
		}

		if (!('proxy' in p)) {
			p.proxy = p.oauth_proxy && o.oauth && parseInt(o.oauth.version, 10) === 1;
		}

		// TIMEOUT
		// Adopt timeout from global settings by default

		if (!('timeout' in p)) {
			p.timeout = _this.settings.timeout;
		}

		// Format response
		// Whether to run the raw response through post processing.
		if (!('formatResponse' in p)) {
			p.formatResponse = true;
		}

		// Get the current session
		// Append the access_token to the query
		p.authResponse = _this.getAuthResponse(p.network);
		if (p.authResponse && p.authResponse.access_token) {
			p.query.access_token = p.authResponse.access_token;
		}

		var url = p.path;
		var m;

		// Store the query as options
		// This is used to populate the request object before the data is augmented by the prewrap handlers.
		p.options = utils.clone(p.query);

		// Clone the data object
		// Prevent this script overwriting the data of the incoming object.
		// Ensure that everytime we run an iteration the callbacks haven't removed some data
		p.data = utils.clone(data);

		// URL Mapping
		// Is there a map for the given URL?
		var actions = o[{'delete': 'del'}[p.method] || p.method] || {};

		// Extrapolate the QueryString
		// Provide a clean path
		// Move the querystring into the data
		if (p.method === 'get') {

			var query = url.split(/[\?#]/)[1];
			if (query) {
				utils.extend(p.query, utils.param(query));

				// Remove the query part from the URL
				url = url.replace(/\?.*?(#|$)/, '$1');
			}
		}

		// Is the hash fragment defined
		if ((m = url.match(/#(.+)/, ''))) {
			url = url.split('#')[0];
			p.path = m[1];
		}
		else if (url in actions) {
			p.path = url;
			url = actions[url];
		}
		else if ('default' in actions) {
			url = actions['default'];
		}

		// Redirect Handler
		// This defines for the Form+Iframe+Hash hack where to return the results too.
		p.redirect_uri = _this.settings.redirect_uri;

		// Define FormatHandler
		// The request can be procesed in a multitude of ways
		// Here's the options - depending on the browser and endpoint
		p.xhr = o.xhr;
		p.jsonp = o.jsonp;
		p.form = o.form;

		// Make request
		if (typeof (url) === 'function') {
			// Does self have its own callback?
			url(p, getPath);
		}
		else {
			// Else the URL is a string
			getPath(url);
		}

		return promise.proxy;

		// If url needs a base
		// Wrap everything in
		function getPath(url) {

			// Format the string if it needs it
			url = url.replace(/\@\{([a-z\_\-]+)(\|.*?)?\}/gi, function(m, key, defaults) {
				var val = defaults ? defaults.replace(/^\|/, '') : '';
				if (key in p.query) {
					val = p.query[key];
					delete p.query[key];
				}
				else if (p.data && key in p.data) {
					val = p.data[key];
					delete p.data[key];
				}
				else if (!defaults) {
					promise.reject(error('missing_attribute', 'The attribute ' + key + ' is missing from the request'));
				}

				return val;
			});

			// Add base
			if (!url.match(/^https?:\/\//)) {
				url = o.base + url;
			}

			// Define the request URL
			p.url = url;

			// Make the HTTP request with the curated request object
			// CALLBACK HANDLER
			// @ response object
			// @ statusCode integer if available
			utils.request(p, function(r, headers) {

				// Is this a raw response?
				if (!p.formatResponse) {
					// Bad request? error statusCode or otherwise contains an error response vis JSONP?
					if (typeof headers === 'object' ? (headers.statusCode >= 400) : (typeof r === 'object' && 'error' in r)) {
						promise.reject(r);
					}
					else {
						promise.fulfill(r);
					}

					return;
				}

				// Should this be an object
				if (r === true) {
					r = {success:true};
				}
				else if (!r) {
					r = {};
				}

				// The delete callback needs a better response
				if (p.method === 'delete') {
					r = (!r || utils.isEmpty(r)) ? {success:true} : r;
				}

				// FORMAT RESPONSE?
				// Does self request have a corresponding formatter
				if (o.wrap && ((p.path in o.wrap) || ('default' in o.wrap))) {
					var wrap = (p.path in o.wrap ? p.path : 'default');
					var time = (new Date()).getTime();

					// FORMAT RESPONSE
					var b = o.wrap[wrap](r, headers, p);

					// Has the response been utterly overwritten?
					// Typically self augments the existing object.. but for those rare occassions
					if (b) {
						r = b;
					}
				}

				// Is there a next_page defined in the response?
				if (r && 'paging' in r && r.paging.next) {

					// Add the relative path if it is missing from the paging/next path
					if (r.paging.next[0] === '?') {
						r.paging.next = p.path + r.paging.next;
					}

					// The relative path has been defined, lets markup the handler in the HashFragment
					else {
						r.paging.next += '#' + p.path;
					}
				}

				// Dispatch to listeners
				// Emit events which pertain to the formatted response
				if (!r || 'error' in r) {
					promise.reject(r);
				}
				else {
					promise.fulfill(r);
				}
			});
		}
	};

	// API utilities
	hello.utils.extend(hello.utils, {

		// Make an HTTP request
		request: function(p, callback) {

			var _this = this;
			var error = _this.error;

			// This has to go through a POST request
			if (!_this.isEmpty(p.data) && !('FileList' in window) && _this.hasBinary(p.data)) {

				// Disable XHR and JSONP
				p.xhr = false;
				p.jsonp = false;
			}

			// Check if the browser and service support CORS
			var cors = this.request_cors(function() {
				// If it does then run this...
				return ((p.xhr === undefined) || (p.xhr && (typeof (p.xhr) !== 'function' || p.xhr(p, p.query))));
			});

			if (cors) {

				formatUrl(p, function(url) {

					var x = _this.xhr(p.method, url, p.headers, p.data, callback);
					x.onprogress = p.onprogress || null;

					// Windows Phone does not support xhr.upload, see #74
					// Feature detect
					if (x.upload && p.onuploadprogress) {
						x.upload.onprogress = p.onuploadprogress;
					}

				});

				return;
			}

			// Clone the query object
			// Each request modifies the query object and needs to be tared after each one.
			var _query = p.query;

			p.query = _this.clone(p.query);

			// Assign a new callbackID
			p.callbackID = _this.globalEvent();

			// JSONP
			if (p.jsonp !== false) {

				// Clone the query object
				p.query.callback = p.callbackID;

				// If the JSONP is a function then run it
				if (typeof (p.jsonp) === 'function') {
					p.jsonp(p, p.query);
				}

				// Lets use JSONP if the method is 'get'
				if (p.method === 'get') {

					formatUrl(p, function(url) {
						_this.jsonp(url, callback, p.callbackID, p.timeout);
					});

					return;
				}
				else {
					// It's not compatible reset query
					p.query = _query;
				}

			}

			// Otherwise we're on to the old school, iframe hacks and JSONP
			if (p.form !== false) {

				// Add some additional query parameters to the URL
				// We're pretty stuffed if the endpoint doesn't like these
				p.query.redirect_uri = p.redirect_uri;
				p.query.state = JSON.stringify({callback:p.callbackID});

				var opts;

				if (typeof (p.form) === 'function') {

					// Format the request
					opts = p.form(p, p.query);
				}

				if (p.method === 'post' && opts !== false) {

					formatUrl(p, function(url) {
						_this.post(url, p.data, opts, callback, p.callbackID, p.timeout);
					});

					return;
				}
			}

			// None of the methods were successful throw an error
			callback(error('invalid_request', 'There was no mechanism for handling this request'));

			return;

			// Format URL
			// Constructs the request URL, optionally wraps the URL through a call to a proxy server
			// Returns the formatted URL
			function formatUrl(p, callback) {

				// Are we signing the request?
				var sign;

				// OAuth1
				// Remove the token from the query before signing
				if (p.authResponse && p.authResponse.oauth && parseInt(p.authResponse.oauth.version, 10) === 1) {

					// OAUTH SIGNING PROXY
					sign = p.query.access_token;

					// Remove the access_token
					delete p.query.access_token;

					// Enfore use of Proxy
					p.proxy = true;
				}

				// POST body to querystring
				if (p.data && (p.method === 'get' || p.method === 'delete')) {
					// Attach the p.data to the querystring.
					_this.extend(p.query, p.data);
					p.data = null;
				}

				// Construct the path
				var path = _this.qs(p.url, p.query);

				// Proxy the request through a server
				// Used for signing OAuth1
				// And circumventing services without Access-Control Headers
				if (p.proxy) {
					// Use the proxy as a path
					path = _this.qs(p.oauth_proxy, {
						path: path,
						access_token: sign || '',

						// This will prompt the request to be signed as though it is OAuth1
						then: p.proxy_response_type || (p.method.toLowerCase() === 'get' ? 'redirect' : 'proxy'),
						method: p.method.toLowerCase(),
						suppress_response_codes: true
					});
				}

				callback(path);
			}
		},

		// Test whether the browser supports the CORS response
		request_cors: function(callback) {
			return 'withCredentials' in new XMLHttpRequest() && callback();
		},

		// Return the type of DOM object
		domInstance: function(type, data) {
			var test = 'HTML' + (type || '').replace(
				/^[a-z]/,
				function(m) {
					return m.toUpperCase();
				}

			) + 'Element';

			if (!data) {
				return false;
			}

			if (window[test]) {
				return data instanceof window[test];
			}
			else if (window.Element) {
				return data instanceof window.Element && (!type || (data.tagName && data.tagName.toLowerCase() === type));
			}
			else {
				return (!(data instanceof Object || data instanceof Array || data instanceof String || data instanceof Number) && data.tagName && data.tagName.toLowerCase() === type);
			}
		},

		// Create a clone of an object
		clone: function(obj) {
			// Does not clone DOM elements, nor Binary data, e.g. Blobs, Filelists
			if (obj === null || typeof (obj) !== 'object' || obj instanceof Date || 'nodeName' in obj || this.isBinary(obj) || (typeof FormData === 'function' && obj instanceof FormData)) {
				return obj;
			}

			if (Array.isArray(obj)) {
				// Clone each item in the array
				return obj.map(this.clone.bind(this));
			}

			// But does clone everything else.
			var clone = {};
			for (var x in obj) {
				clone[x] = this.clone(obj[x]);
			}

			return clone;
		},

		// XHR: uses CORS to make requests
		xhr: function(method, url, headers, data, callback) {

			var r = new XMLHttpRequest();
			var error = this.error;

			// Binary?
			var binary = false;
			if (method === 'blob') {
				binary = method;
				method = 'GET';
			}

			method = method.toUpperCase();

			// Xhr.responseType 'json' is not supported in any of the vendors yet.
			r.onload = function(e) {
				var json = r.response;
				try {
					json = JSON.parse(r.responseText);
				}
				catch (_e) {
					if (r.status === 401) {
						json = error('access_denied', r.statusText);
					}
				}

				var headers = headersToJSON(r.getAllResponseHeaders());
				headers.statusCode = r.status;

				callback(json || (method === 'GET' ? error('empty_response', 'Could not get resource') : {}), headers);
			};

			r.onerror = function(e) {
				var json = r.responseText;
				try {
					json = JSON.parse(r.responseText);
				}
				catch (_e) {}

				callback(json || error('access_denied', 'Could not get resource'));
			};

			var x;

			// Should we add the query to the URL?
			if (method === 'GET' || method === 'DELETE') {
				data = null;
			}
			else if (data && typeof (data) !== 'string' && !(data instanceof FormData) && !(data instanceof File) && !(data instanceof Blob)) {
				// Loop through and add formData
				var f = new FormData();
				for (x in data) if (data.hasOwnProperty(x)) {
					if (data[x] instanceof HTMLInputElement) {
						if ('files' in data[x] && data[x].files.length > 0) {
							f.append(x, data[x].files[0]);
						}
					}
					else if (data[x] instanceof Blob) {
						f.append(x, data[x], data.name);
					}
					else {
						f.append(x, data[x]);
					}
				}

				data = f;
			}

			// Open the path, async
			r.open(method, url, true);

			if (binary) {
				if ('responseType' in r) {
					r.responseType = binary;
				}
				else {
					r.overrideMimeType('text/plain; charset=x-user-defined');
				}
			}

			// Set any bespoke headers
			if (headers) {
				for (x in headers) {
					r.setRequestHeader(x, headers[x]);
				}
			}

			r.send(data);

			return r;

			// Headers are returned as a string
			function headersToJSON(s) {
				var r = {};
				var reg = /([a-z\-]+):\s?(.*);?/gi;
				var m;
				while ((m = reg.exec(s))) {
					r[m[1]] = m[2];
				}

				return r;
			}
		},

		// JSONP
		// Injects a script tag into the DOM to be executed and appends a callback function to the window object
		// @param string/function pathFunc either a string of the URL or a callback function pathFunc(querystringhash, continueFunc);
		// @param function callback a function to call on completion;
		jsonp: function(url, callback, callbackID, timeout) {

			var _this = this;
			var error = _this.error;

			// Change the name of the callback
			var bool = 0;
			var head = document.getElementsByTagName('head')[0];
			var operaFix;
			var result = error('server_error', 'server_error');
			var cb = function() {
				if (!(bool++)) {
					window.setTimeout(function() {
						callback(result);
						head.removeChild(script);
					}, 0);
				}

			};

			// Add callback to the window object
			callbackID = _this.globalEvent(function(json) {
				result = json;
				return true;

				// Mark callback as done
			}, callbackID);

			// The URL is a function for some cases and as such
			// Determine its value with a callback containing the new parameters of this function.
			url = url.replace(new RegExp('=\\?(&|$)'), '=' + callbackID + '$1');

			// Build script tag
			var script = _this.append('script', {
				id: callbackID,
				name: callbackID,
				src: url,
				async: true,
				onload: cb,
				onerror: cb,
				onreadystatechange: function() {
					if (/loaded|complete/i.test(this.readyState)) {
						cb();
					}
				}
			});

			// Opera fix error
			// Problem: If an error occurs with script loading Opera fails to trigger the script.onerror handler we specified
			//
			// Fix:
			// By setting the request to synchronous we can trigger the error handler when all else fails.
			// This action will be ignored if we've already called the callback handler "cb" with a successful onload event
			if (window.navigator.userAgent.toLowerCase().indexOf('opera') > -1) {
				operaFix = _this.append('script', {
					text: 'document.getElementById(\'' + callbackID + '\').onerror();'
				});
				script.async = false;
			}

			// Add timeout
			if (timeout) {
				window.setTimeout(function() {
					result = error('timeout', 'timeout');
					cb();
				}, timeout);
			}

			// TODO: add fix for IE,
			// However: unable recreate the bug of firing off the onreadystatechange before the script content has been executed and the value of "result" has been defined.
			// Inject script tag into the head element
			head.appendChild(script);

			// Append Opera Fix to run after our script
			if (operaFix) {
				head.appendChild(operaFix);
			}
		},

		// Post
		// Send information to a remote location using the post mechanism
		// @param string uri path
		// @param object data, key value data to send
		// @param function callback, function to execute in response
		post: function(url, data, options, callback, callbackID, timeout) {

			var _this = this;
			var error = _this.error;
			var doc = document;

			// This hack needs a form
			var form = null;
			var reenableAfterSubmit = [];
			var newform;
			var i = 0;
			var x = null;
			var bool = 0;
			var cb = function(r) {
				if (!(bool++)) {
					callback(r);
				}
			};

			// What is the name of the callback to contain
			// We'll also use this to name the iframe
			_this.globalEvent(cb, callbackID);

			// Build the iframe window
			var win;
			try {
				// IE7 hack, only lets us define the name here, not later.
				win = doc.createElement('<iframe name="' + callbackID + '">');
			}
			catch (e) {
				win = doc.createElement('iframe');
			}

			win.name = callbackID;
			win.id = callbackID;
			win.style.display = 'none';

			// Override callback mechanism. Triggger a response onload/onerror
			if (options && options.callbackonload) {
				// Onload is being fired twice
				win.onload = function() {
					cb({
						response: 'posted',
						message: 'Content was posted'
					});
				};
			}

			if (timeout) {
				setTimeout(function() {
					cb(error('timeout', 'The post operation timed out'));
				}, timeout);
			}

			doc.body.appendChild(win);

			// If we are just posting a single item
			if (_this.domInstance('form', data)) {
				// Get the parent form
				form = data.form;

				// Loop through and disable all of its siblings
				for (i = 0; i < form.elements.length; i++) {
					if (form.elements[i] !== data) {
						form.elements[i].setAttribute('disabled', true);
					}
				}

				// Move the focus to the form
				data = form;
			}

			// Posting a form
			if (_this.domInstance('form', data)) {
				// This is a form element
				form = data;

				// Does this form need to be a multipart form?
				for (i = 0; i < form.elements.length; i++) {
					if (!form.elements[i].disabled && form.elements[i].type === 'file') {
						form.encoding = form.enctype = 'multipart/form-data';
						form.elements[i].setAttribute('name', 'file');
					}
				}
			}
			else {
				// Its not a form element,
				// Therefore it must be a JSON object of Key=>Value or Key=>Element
				// If anyone of those values are a input type=file we shall shall insert its siblings into the form for which it belongs.
				for (x in data) if (data.hasOwnProperty(x)) {
					// Is this an input Element?
					if (_this.domInstance('input', data[x]) && data[x].type === 'file') {
						form = data[x].form;
						form.encoding = form.enctype = 'multipart/form-data';
					}
				}

				// Do If there is no defined form element, lets create one.
				if (!form) {
					// Build form
					form = doc.createElement('form');
					doc.body.appendChild(form);
					newform = form;
				}

				var input;

				// Add elements to the form if they dont exist
				for (x in data) if (data.hasOwnProperty(x)) {

					// Is this an element?
					var el = (_this.domInstance('input', data[x]) || _this.domInstance('textArea', data[x]) || _this.domInstance('select', data[x]));

					// Is this not an input element, or one that exists outside the form.
					if (!el || data[x].form !== form) {

						// Does an element have the same name?
						var inputs = form.elements[x];
						if (input) {
							// Remove it.
							if (!(inputs instanceof NodeList)) {
								inputs = [inputs];
							}

							for (i = 0; i < inputs.length; i++) {
								inputs[i].parentNode.removeChild(inputs[i]);
							}

						}

						// Create an input element
						input = doc.createElement('input');
						input.setAttribute('type', 'hidden');
						input.setAttribute('name', x);

						// Does it have a value attribute?
						if (el) {
							input.value = data[x].value;
						}
						else if (_this.domInstance(null, data[x])) {
							input.value = data[x].innerHTML || data[x].innerText;
						}
						else {
							input.value = data[x];
						}

						form.appendChild(input);
					}

					// It is an element, which exists within the form, but the name is wrong
					else if (el && data[x].name !== x) {
						data[x].setAttribute('name', x);
						data[x].name = x;
					}
				}

				// Disable elements from within the form if they weren't specified
				for (i = 0; i < form.elements.length; i++) {

					input = form.elements[i];

					// Does the same name and value exist in the parent
					if (!(input.name in data) && input.getAttribute('disabled') !== true) {
						// Disable
						input.setAttribute('disabled', true);

						// Add re-enable to callback
						reenableAfterSubmit.push(input);
					}
				}
			}

			// Set the target of the form
			form.setAttribute('method', 'POST');
			form.setAttribute('target', callbackID);
			form.target = callbackID;

			// Update the form URL
			form.setAttribute('action', url);

			// Submit the form
			// Some reason this needs to be offset from the current window execution
			setTimeout(function() {
				form.submit();

				setTimeout(function() {
					try {
						// Remove the iframe from the page.
						//win.parentNode.removeChild(win);
						// Remove the form
						if (newform) {
							newform.parentNode.removeChild(newform);
						}
					}
					catch (e) {
						try {
							console.error('HelloJS: could not remove iframe');
						}
						catch (ee) {}
					}

					// Reenable the disabled form
					for (var i = 0; i < reenableAfterSubmit.length; i++) {
						if (reenableAfterSubmit[i]) {
							reenableAfterSubmit[i].setAttribute('disabled', false);
							reenableAfterSubmit[i].disabled = false;
						}
					}
				}, 0);
			}, 100);
		},

		// Some of the providers require that only multipart is used with non-binary forms.
		// This function checks whether the form contains binary data
		hasBinary: function(data) {
			for (var x in data) if (data.hasOwnProperty(x)) {
				if (this.isBinary(data[x])) {
					return true;
				}
			}

			return false;
		},

		// Determines if a variable Either Is or like a FormInput has the value of a Blob

		isBinary: function(data) {

			return data instanceof Object && (
			(this.domInstance('input', data) && data.type === 'file') ||
			('FileList' in window && data instanceof window.FileList) ||
			('File' in window && data instanceof window.File) ||
			('Blob' in window && data instanceof window.Blob));

		},

		// Convert Data-URI to Blob string
		toBlob: function(dataURI) {
			var reg = /^data\:([^;,]+(\;charset=[^;,]+)?)(\;base64)?,/i;
			var m = dataURI.match(reg);
			if (!m) {
				return dataURI;
			}

			var binary = atob(dataURI.replace(reg, ''));
			var array = [];
			for (var i = 0; i < binary.length; i++) {
				array.push(binary.charCodeAt(i));
			}

			return new Blob([new Uint8Array(array)], {type: m[1]});
		}

	});

	// EXTRA: Convert FormElement to JSON for POSTing
	// Wrappers to add additional functionality to existing functions
	(function(hello) {

		// Copy original function
		var api = hello.api;
		var utils = hello.utils;

		utils.extend(utils, {

			// DataToJSON
			// This takes a FormElement|NodeList|InputElement|MixedObjects and convers the data object to JSON.
			dataToJSON: function(p) {

				var _this = this;
				var w = window;
				var data = p.data;

				// Is data a form object
				if (_this.domInstance('form', data)) {
					data = _this.nodeListToJSON(data.elements);
				}
				else if ('NodeList' in w && data instanceof NodeList) {
					data = _this.nodeListToJSON(data);
				}
				else if (_this.domInstance('input', data)) {
					data = _this.nodeListToJSON([data]);
				}

				// Is data a blob, File, FileList?
				if (('File' in w && data instanceof w.File) ||
					('Blob' in w && data instanceof w.Blob) ||
					('FileList' in w && data instanceof w.FileList)) {
					data = {file: data};
				}

				// Loop through data if it's not form data it must now be a JSON object
				if (!('FormData' in w && data instanceof w.FormData)) {

					for (var x in data) if (data.hasOwnProperty(x)) {

						if ('FileList' in w && data[x] instanceof w.FileList) {
							if (data[x].length === 1) {
								data[x] = data[x][0];
							}
						}
						else if (_this.domInstance('input', data[x]) && data[x].type === 'file') {
							continue;
						}
						else if (_this.domInstance('input', data[x]) ||
							_this.domInstance('select', data[x]) ||
							_this.domInstance('textArea', data[x])) {
							data[x] = data[x].value;
						}
						else if (_this.domInstance(null, data[x])) {
							data[x] = data[x].innerHTML || data[x].innerText;
						}
					}
				}

				p.data = data;
				return data;
			},

			// NodeListToJSON
			// Given a list of elements extrapolate their values and return as a json object
			nodeListToJSON: function(nodelist) {

				var json = {};

				// Create a data string
				for (var i = 0; i < nodelist.length; i++) {

					var input = nodelist[i];

					// If the name of the input is empty or diabled, dont add it.
					if (input.disabled || !input.name) {
						continue;
					}

					// Is this a file, does the browser not support 'files' and 'FormData'?
					if (input.type === 'file') {
						json[input.name] = input;
					}
					else {
						json[input.name] = input.value || input.innerHTML;
					}
				}

				return json;
			}
		});

		// Replace it
		hello.api = function() {

			// Get arguments
			var p = utils.args({path: 's!', method: 's', data:'o', timeout: 'i', callback: 'f'}, arguments);

			// Change for into a data object
			if (p.data) {
				utils.dataToJSON(p);
			}

			return api.call(this, p);
		};

	})(hello);

	/////////////////////////////////////
	//
	// Save any access token that is in the current page URL
	// Handle any response solicited through iframe hash tag following an API request
	//
	/////////////////////////////////////

	hello.utils.responseHandler(window, window.opener || window.parent);

	// Script to support ChromeApps
	// This overides the hello.utils.popup method to support chrome.identity.launchWebAuthFlow
	// See https://developer.chrome.com/apps/app_identity#non

	// Is this a chrome app?

	if (typeof chrome === 'object' && typeof chrome.identity === 'object' && chrome.identity.launchWebAuthFlow) {

		(function() {

			// Swap the popup method
			hello.utils.popup = function(url) {

				return _open(url, true);

			};

			// Swap the hidden iframe method
			hello.utils.iframe = function(url) {

				_open(url, false);

			};

			// Swap the request_cors method
			hello.utils.request_cors = function(callback) {

				callback();

				// Always run as CORS

				return true;
			};

			// Swap the storage method
			var _cache = {};
			chrome.storage.local.get('hello', function(r) {
				// Update the cache
				_cache = r.hello || {};
			});

			hello.utils.store = function(name, value) {

				// Get all
				if (arguments.length === 0) {
					return _cache;
				}

				// Get
				if (arguments.length === 1) {
					return _cache[name] || null;
				}

				// Set
				if (value) {
					_cache[name] = value;
					chrome.storage.local.set({hello: _cache});
					return value;
				}

				// Delete
				if (value === null) {
					delete _cache[name];
					chrome.storage.local.set({hello: _cache});
					return null;
				}
			};

			// Open function
			function _open(url, interactive) {

				// Launch
				var ref = {
					closed: false
				};

				// Launch the webAuthFlow
				chrome.identity.launchWebAuthFlow({
					url: url,
					interactive: interactive
				}, function(responseUrl) {

					// Did the user cancel this prematurely
					if (responseUrl === undefined) {
						ref.closed = true;
						return;
					}

					// Split appart the URL
					var a = hello.utils.url(responseUrl);

					// The location can be augmented in to a location object like so...
					// We dont have window operations on the popup so lets create some
					var _popup = {
						location: {

							// Change the location of the popup
							assign: function(url) {

								// If there is a secondary reassign
								// In the case of OAuth1
								// Trigger this in non-interactive mode.
								_open(url, false);
							},

							search: a.search,
							hash: a.hash,
							href: a.href
						},
						close: function() {}
					};

					// Then this URL contains information which HelloJS must process
					// URL string
					// Window - any action such as window relocation goes here
					// Opener - the parent window which opened this, aka this script

					hello.utils.responseHandler(_popup, window);
				});

				// Return the reference
				return ref;
			}

		})();
	}

	// Phonegap override for hello.phonegap.js
	(function() {

		// Is this a phonegap implementation?
		if (!(/^file:\/{3}[^\/]/.test(window.location.href) && window.cordova)) {
			// Cordova is not included.
			return;
		}

		// Augment the hidden iframe method
		hello.utils.iframe = function(url, redirectUri) {
			hello.utils.popup(url, redirectUri, {hidden: 'yes'});
		};

		// Augment the popup
		var utilPopup = hello.utils.popup;

		// Replace popup
		hello.utils.popup = function(url, redirectUri, options) {

			// Run the standard
			var popup = utilPopup.call(this, url, redirectUri, options);

			// Create a function for reopening the popup, and assigning events to the new popup object
			// PhoneGap support
			// Add an event listener to listen to the change in the popup windows URL
			// This must appear before popup.focus();
			try {
				if (popup && popup.addEventListener) {

					// Get the origin of the redirect URI

					var a = hello.utils.url(redirectUri);
					var redirectUriOrigin = a.origin || (a.protocol + '//' + a.hostname);

					// Listen to changes in the InAppBrowser window

					popup.addEventListener('loadstart', function(e) {

						var url = e.url;

						// Is this the path, as given by the redirectUri?
						// Check the new URL agains the redirectUriOrigin.
						// According to #63 a user could click 'cancel' in some dialog boxes ....
						// The popup redirects to another page with the same origin, yet we still wish it to close.

						if (url.indexOf(redirectUriOrigin) !== 0) {
							return;
						}

						// Split appart the URL
						var a = hello.utils.url(url);

						// We dont have window operations on the popup so lets create some
						// The location can be augmented in to a location object like so...

						var _popup = {
							location: {
								// Change the location of the popup
								assign: function(location) {

									// Unfourtunatly an app is may not change the location of a InAppBrowser window.
									// So to shim this, just open a new one.
									popup.executeScript({code: 'window.location.href = "' + location + ';"'});
								},

								search: a.search,
								hash: a.hash,
								href: a.href
							},
							close: function() {
								if (popup.close) {
									popup.close();
									try {
										popup.closed = true;
									}
									catch (_e) {}
								}
							}
						};

						// Then this URL contains information which HelloJS must process
						// URL string
						// Window - any action such as window relocation goes here
						// Opener - the parent window which opened this, aka this script

						hello.utils.responseHandler(_popup, window);

					});
				}
			}
			catch (e) {}

			return popup;
		};

	})();

	(function(hello) {

		// OAuth1
		var OAuth1Settings = {
			version: '1.0',
			auth: 'https://www.dropbox.com/1/oauth/authorize',
			request: 'https://api.dropbox.com/1/oauth/request_token',
			token: 'https://api.dropbox.com/1/oauth/access_token'
		};

		// OAuth2 Settings
		var OAuth2Settings = {
			version: 2,
			auth: 'https://www.dropbox.com/1/oauth2/authorize',
			grant: 'https://api.dropbox.com/1/oauth2/token'
		};

		// Initiate the Dropbox module
		hello.init({

			dropbox: {

				name: 'Dropbox',

				oauth: OAuth2Settings,

				login: function(p) {
					// OAuth2 non-standard adjustments
					p.qs.scope = '';
					delete p.qs.display;

					// Should this be run as OAuth1?
					// If the redirect_uri is is HTTP (non-secure) then its required to revert to the OAuth1 endpoints
					var redirect = decodeURIComponent(p.qs.redirect_uri);
					if (redirect.indexOf('http:') === 0 && redirect.indexOf('http://localhost/') !== 0) {

						// Override the dropbox OAuth settings.
						hello.services.dropbox.oauth = OAuth1Settings;
					}
					else {
						// Override the dropbox OAuth settings.
						hello.services.dropbox.oauth = OAuth2Settings;
					}

					// The dropbox login window is a different size
					p.options.popup.width = 1000;
					p.options.popup.height = 1000;
				},

				/*
					Dropbox does not allow insecure HTTP URI's in the redirect_uri field
					...otherwise I'd love to use OAuth2

					Follow request https://forums.dropbox.com/topic.php?id=106505

					p.qs.response_type = 'code';
					oauth: {
						version: 2,
						auth: 'https://www.dropbox.com/1/oauth2/authorize',
						grant: 'https://api.dropbox.com/1/oauth2/token'
					}
				*/

				// API Base URL
				base: 'https://api.dropbox.com/1/',

				// Bespoke setting: this is states whether to use the custom environment of Dropbox or to use their own environment
				// Because it's notoriously difficult for Dropbox too provide access from other webservices, this defaults to Sandbox
				root: 'sandbox',

				// Map GET requests
				get: {
					me: 'account/info',

					// Https://www.dropbox.com/developers/core/docs#metadata
					'me/files': req('metadata/auto/@{parent|}'),
					'me/folder': req('metadata/auto/@{id}'),
					'me/folders': req('metadata/auto/'),

					'default': function(p, callback) {
						if (p.path.match('https://api-content.dropbox.com/1/files/')) {
							// This is a file, return binary data
							p.method = 'blob';
						}

						callback(p.path);
					}
				},

				post: {
					'me/files': function(p, callback) {

						var path = p.data.parent;
						var fileName = p.data.name;

						p.data = {
							file: p.data.file
						};

						// Does this have a data-uri to upload as a file?
						if (typeof (p.data.file) === 'string') {
							p.data.file = hello.utils.toBlob(p.data.file);
						}

						callback('https://api-content.dropbox.com/1/files_put/auto/' + path + '/' + fileName);
					},

					'me/folders': function(p, callback) {

						var name = p.data.name;
						p.data = {};

						callback('fileops/create_folder?root=@{root|sandbox}&' + hello.utils.param({
							path: name
						}));
					}
				},

				// Map DELETE requests
				del: {
					'me/files': 'fileops/delete?root=@{root|sandbox}&path=@{id}',
					'me/folder': 'fileops/delete?root=@{root|sandbox}&path=@{id}'
				},

				wrap: {
					me: function(o) {
						formatError(o);
						if (!o.uid) {
							return o;
						}

						o.name = o.display_name;
						var m = o.name.split(' ');
						o.first_name = m.shift();
						o.last_name = m.join(' ');
						o.id = o.uid;
						delete o.uid;
						delete o.display_name;
						return o;
					},

					'default': function(o, headers, req) {
						formatError(o);
						if (o.is_dir && o.contents) {
							o.data = o.contents;
							delete o.contents;

							o.data.forEach(function(item) {
								item.root = o.root;
								formatFile(item, headers, req);
							});
						}

						formatFile(o, headers, req);

						if (o.is_deleted) {
							o.success = true;
						}

						return o;
					}
				},

				// Doesn't return the CORS headers
				xhr: function(p) {

					// The proxy supports allow-cross-origin-resource
					// Alas that's the only thing we're using.
					if (p.data && p.data.file) {
						var file = p.data.file;
						if (file) {
							if (file.files) {
								p.data = file.files[0];
							}
							else {
								p.data = file;
							}
						}
					}

					if (p.method === 'delete') {
						p.method = 'post';
					}

					return true;
				},

				form: function(p, qs) {
					delete qs.state;
					delete qs.redirect_uri;
				}
			}
		});

		function formatError(o) {
			if (o && 'error' in o) {
				o.error = {
					code: 'server_error',
					message: o.error.message || o.error
				};
			}
		}

		function formatFile(o, headers, req) {

			if (typeof o !== 'object' ||
				(typeof Blob !== 'undefined' && o instanceof Blob) ||
				(typeof ArrayBuffer !== 'undefined' && o instanceof ArrayBuffer)) {
				// This is a file, let it through unformatted
				return;
			}

			if ('error' in o) {
				return;
			}

			var path = (o.root !== 'app_folder' ? o.root : '') + o.path.replace(/\&/g, '%26');
			path = path.replace(/^\//, '');
			if (o.thumb_exists) {
				o.thumbnail = req.oauth_proxy + '?path=' +
				encodeURIComponent('https://api-content.dropbox.com/1/thumbnails/auto/' + path + '?format=jpeg&size=m') + '&access_token=' + req.options.access_token;
			}

			o.type = (o.is_dir ? 'folder' : o.mime_type);
			o.name = o.path.replace(/.*\//g, '');
			if (o.is_dir) {
				o.files = path.replace(/^\//, '');
			}
			else {
				o.downloadLink = hello.settings.oauth_proxy + '?path=' +
				encodeURIComponent('https://api-content.dropbox.com/1/files/auto/' + path) + '&access_token=' + req.options.access_token;
				o.file = 'https://api-content.dropbox.com/1/files/auto/' + path;
			}

			if (!o.id) {
				o.id = o.path.replace(/^\//, '');
			}

			// O.media = 'https://api-content.dropbox.com/1/files/' + path;
		}

		function req(str) {
			return function(p, cb) {
				delete p.query.limit;
				cb(str);
			};
		}

	})(hello);

	(function(hello) {

		hello.init({

			facebook: {

				name: 'Facebook',

				// SEE https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow/v2.1
				oauth: {
					version: 2,
					auth: 'https://www.facebook.com/dialog/oauth/',
					grant: 'https://graph.facebook.com/oauth/access_token'
				},

				// Authorization scopes
				scope: {
					basic: 'public_profile',
					email: 'email',
					share: 'user_posts',
					birthday: 'user_birthday',
					events: 'user_events',
					photos: 'user_photos',
					videos: 'user_videos',
					friends: 'user_friends',
					files: 'user_photos,user_videos',
					publish_files: 'user_photos,user_videos,publish_actions',
					publish: 'publish_actions',

					// Deprecated in v2.0
					// Create_event	: 'create_event',

					offline_access: ''
				},

				// Refresh the access_token
				refresh: true,

				login: function(p) {

					// Reauthenticate
					// https://developers.facebook.com/docs/facebook-login/reauthentication
					if (p.options.force) {
						p.qs.auth_type = 'reauthenticate';
					}

					// The facebook login window is a different size.
					p.options.popup.width = 580;
					p.options.popup.height = 400;
				},

				logout: function(callback, options) {
					// Assign callback to a global handler
					var callbackID = hello.utils.globalEvent(callback);
					var redirect = encodeURIComponent(hello.settings.redirect_uri + '?' + hello.utils.param({callback:callbackID, result: JSON.stringify({force:true}), state: '{}'}));
					var token = (options.authResponse || {}).access_token;
					hello.utils.iframe('https://www.facebook.com/logout.php?next=' + redirect + '&access_token=' + token);

					// Possible responses:
					// String URL	- hello.logout should handle the logout
					// Undefined	- this function will handle the callback
					// True - throw a success, this callback isn't handling the callback
					// False - throw a error
					if (!token) {
						// If there isn't a token, the above wont return a response, so lets trigger a response
						return false;
					}
				},

				// API Base URL
				base: 'https://graph.facebook.com/v2.4/',

				// Map GET requests
				get: {
					me: 'me?fields=email,first_name,last_name,name,timezone,verified',
					'me/friends': 'me/friends',
					'me/following': 'me/friends',
					'me/followers': 'me/friends',
					'me/share': 'me/feed',
					'me/like': 'me/likes',
					'me/files': 'me/albums',
					'me/albums': 'me/albums?fields=cover_photo,name',
					'me/album': '@{id}/photos?fields=picture',
					'me/photos': 'me/photos',
					'me/photo': '@{id}',
					'friend/albums': '@{id}/albums',
					'friend/photos': '@{id}/photos'

					// Pagination
					// Https://developers.facebook.com/docs/reference/api/pagination/
				},

				// Map POST requests
				post: {
					'me/share': 'me/feed',
					'me/photo': '@{id}'

					// Https://developers.facebook.com/docs/graph-api/reference/v2.2/object/likes/
				},

				wrap: {
					me: formatUser,
					'me/friends': formatFriends,
					'me/following': formatFriends,
					'me/followers': formatFriends,
					'me/albums': format,
					'me/photos': format,
					'me/files': format,
					'default': format
				},

				// Special requirements for handling XHR
				xhr: function(p, qs) {
					if (p.method === 'get' || p.method === 'post') {
						qs.suppress_response_codes = true;
					}

					// Is this a post with a data-uri?
					if (p.method === 'post' && p.data && typeof (p.data.file) === 'string') {
						// Convert the Data-URI to a Blob
						p.data.file = hello.utils.toBlob(p.data.file);
					}

					return true;
				},

				// Special requirements for handling JSONP fallback
				jsonp: function(p, qs) {
					var m = p.method;
					if (m !== 'get' && !hello.utils.hasBinary(p.data)) {
						p.data.method = m;
						p.method = 'get';
					}
					else if (p.method === 'delete') {
						qs.method = 'delete';
						p.method = 'post';
					}
				},

				// Special requirements for iframe form hack
				form: function(p) {
					return {
						// Fire the callback onload
						callbackonload: true
					};
				}
			}
		});

		var base = 'https://graph.facebook.com/';

		function formatUser(o) {
			if (o.id) {
				o.thumbnail = o.picture = 'https://graph.facebook.com/' + o.id + '/picture';
			}

			return o;
		}

		function formatFriends(o) {
			if ('data' in o) {
				o.data.forEach(formatUser);
			}

			return o;
		}

		function format(o, headers, req) {
			if (typeof o === 'boolean') {
				o = {success: o};
			}

			if (o && 'data' in o) {
				var token = req.query.access_token;

				if (!(o.data instanceof Array)) {
					var data = o.data;
					delete o.data;
					o.data = [data];
				}

				o.data.forEach(function(d) {

					if (d.picture) {
						d.thumbnail = d.picture;
					}

					d.pictures = (d.images || [])
						.sort(function(a, b) {
							return a.width - b.width;
						});

					if (d.cover_photo && d.cover_photo.id) {
						d.thumbnail = base + d.cover_photo.id + '/picture?access_token=' + token;
					}

					if (d.type === 'album') {
						d.files = d.photos = base + d.id + '/photos';
					}

					if (d.can_upload) {
						d.upload_location = base + d.id + '/photos';
					}
				});
			}

			return o;
		}

	})(hello);

	(function(hello) {

		hello.init({

			flickr: {

				name: 'Flickr',

				// Ensure that you define an oauth_proxy
				oauth: {
					version: '1.0a',
					auth: 'https://www.flickr.com/services/oauth/authorize?perms=read',
					request: 'https://www.flickr.com/services/oauth/request_token',
					token: 'https://www.flickr.com/services/oauth/access_token'
				},

				// API base URL
				base: 'https://api.flickr.com/services/rest',

				// Map GET resquests
				get: {
					me: sign('flickr.people.getInfo'),
					'me/friends': sign('flickr.contacts.getList', {per_page:'@{limit|50}'}),
					'me/following': sign('flickr.contacts.getList', {per_page:'@{limit|50}'}),
					'me/followers': sign('flickr.contacts.getList', {per_page:'@{limit|50}'}),
					'me/albums': sign('flickr.photosets.getList', {per_page:'@{limit|50}'}),
					'me/album': sign('flickr.photosets.getPhotos', {photoset_id: '@{id}'}),
					'me/photos': sign('flickr.people.getPhotos', {per_page:'@{limit|50}'})
				},

				wrap: {
					me: function(o) {
						formatError(o);
						o = checkResponse(o, 'person');
						if (o.id) {
							if (o.realname) {
								o.name = o.realname._content;
								var m = o.name.split(' ');
								o.first_name = m.shift();
								o.last_name = m.join(' ');
							}

							o.thumbnail = getBuddyIcon(o, 'l');
							o.picture = getBuddyIcon(o, 'l');
						}

						return o;
					},

					'me/friends': formatFriends,
					'me/followers': formatFriends,
					'me/following': formatFriends,
					'me/albums': function(o) {
						formatError(o);
						o = checkResponse(o, 'photosets');
						paging(o);
						if (o.photoset) {
							o.data = o.photoset;
							o.data.forEach(function(item) {
								item.name = item.title._content;
								item.photos = 'https://api.flickr.com/services/rest' + getApiUrl('flickr.photosets.getPhotos', {photoset_id: item.id}, true);
							});

							delete o.photoset;
						}

						return o;
					},

					'me/photos': function(o) {
						formatError(o);
						return formatPhotos(o);
					},

					'default': function(o) {
						formatError(o);
						return formatPhotos(o);
					}
				},

				xhr: false,

				jsonp: function(p, qs) {
					if (p.method == 'get') {
						delete qs.callback;
						qs.jsoncallback = p.callbackID;
					}
				}
			}
		});

		function getApiUrl(method, extraParams, skipNetwork) {
			var url = ((skipNetwork) ? '' : 'flickr:') +
				'?method=' + method +
				'&api_key=' + hello.services.flickr.id +
				'&format=json';
			for (var param in extraParams) {
				if (extraParams.hasOwnProperty(param)) {
					url += '&' + param + '=' + extraParams[param];
				}
			}

			return url;
		}

		// This is not exactly neat but avoid to call
		// The method 'flickr.test.login' for each api call

		function withUser(cb) {
			var auth = hello.getAuthResponse('flickr');
			cb(auth && auth.user_nsid ? auth.user_nsid : null);
		}

		function sign(url, params) {
			if (!params) {
				params = {};
			}

			return function(p, callback) {
				withUser(function(userId) {
					params.user_id = userId;
					callback(getApiUrl(url, params, true));
				});
			};
		}

		function getBuddyIcon(profile, size) {
			var url = 'https://www.flickr.com/images/buddyicon.gif';
			if (profile.nsid && profile.iconserver && profile.iconfarm) {
				url = 'https://farm' + profile.iconfarm + '.staticflickr.com/' +
					profile.iconserver + '/' +
					'buddyicons/' + profile.nsid +
					((size) ? '_' + size : '') + '.jpg';
			}

			return url;
		}

		// See: https://www.flickr.com/services/api/misc.urls.html
		function createPhotoUrl(id, farm, server, secret, size) {
			size = (size) ? '_' + size : '';
			return 'https://farm' + farm + '.staticflickr.com/' + server + '/' + id + '_' + secret + size + '.jpg';
		}

		function formatUser(o) {
		}

		function formatError(o) {
			if (o && o.stat && o.stat.toLowerCase() != 'ok') {
				o.error = {
					code: 'invalid_request',
					message: o.message
				};
			}
		}

		function formatPhotos(o) {
			if (o.photoset || o.photos) {
				var set = ('photoset' in o) ? 'photoset' : 'photos';
				o = checkResponse(o, set);
				paging(o);
				o.data = o.photo;
				delete o.photo;
				for (var i = 0; i < o.data.length; i++) {
					var photo = o.data[i];
					photo.name = photo.title;
					photo.picture = createPhotoUrl(photo.id, photo.farm, photo.server, photo.secret, '');
					photo.pictures = createPictures(photo.id, photo.farm, photo.server, photo.secret);
					photo.source = createPhotoUrl(photo.id, photo.farm, photo.server, photo.secret, 'b');
					photo.thumbnail = createPhotoUrl(photo.id, photo.farm, photo.server, photo.secret, 'm');
				}
			}

			return o;
		}

		// See: https://www.flickr.com/services/api/misc.urls.html
		function createPictures(id, farm, server, secret) {

			var NO_LIMIT = 2048;
			var sizes = [
				{id: 't', max: 100},
				{id: 'm', max: 240},
				{id: 'n', max: 320},
				{id: '', max: 500},
				{id: 'z', max: 640},
				{id: 'c', max: 800},
				{id: 'b', max: 1024},
				{id: 'h', max: 1600},
				{id: 'k', max: 2048},
				{id: 'o', max: NO_LIMIT}
			];

			return sizes.map(function(size) {
				return {
					source: createPhotoUrl(id, farm, server, secret, size.id),

					// Note: this is a guess that's almost certain to be wrong (unless square source)
					width: size.max,
					height: size.max
				};
			});
		}

		function checkResponse(o, key) {

			if (key in o) {
				o = o[key];
			}
			else if (!('error' in o)) {
				o.error = {
					code: 'invalid_request',
					message: o.message || 'Failed to get data from Flickr'
				};
			}

			return o;
		}

		function formatFriends(o) {
			formatError(o);
			if (o.contacts) {
				o = checkResponse(o, 'contacts');
				paging(o);
				o.data = o.contact;
				delete o.contact;
				for (var i = 0; i < o.data.length; i++) {
					var item = o.data[i];
					item.id = item.nsid;
					item.name = item.realname || item.username;
					item.thumbnail = getBuddyIcon(item, 'm');
				}
			}

			return o;
		}

		function paging(res) {
			if (res.page && res.pages && res.page !== res.pages) {
				res.paging = {
					next: '?page=' + (++res.page)
				};
			}
		}

	})(hello);

	(function(hello) {

		hello.init({

			foursquare: {

				name: 'Foursquare',

				oauth: {
					// See: https://developer.foursquare.com/overview/auth
					version: 2,
					auth: 'https://foursquare.com/oauth2/authenticate',
					grant: 'https://foursquare.com/oauth2/access_token'
				},

				// Refresh the access_token once expired
				refresh: true,

				base: 'https://api.foursquare.com/v2/',

				get: {
					me: 'users/self',
					'me/friends': 'users/self/friends',
					'me/followers': 'users/self/friends',
					'me/following': 'users/self/friends'
				},

				wrap: {
					me: function(o) {
						formatError(o);
						if (o && o.response) {
							o = o.response.user;
							formatUser(o);
						}

						return o;
					},

					'default': function(o) {
						formatError(o);

						// Format friends
						if (o && 'response' in o && 'friends' in o.response && 'items' in o.response.friends) {
							o.data = o.response.friends.items;
							o.data.forEach(formatUser);
							delete o.response;
						}

						return o;
					}
				},

				xhr: formatRequest,
				jsonp: formatRequest
			}
		});

		function formatError(o) {
			if (o.meta && (o.meta.code === 400 || o.meta.code === 401)) {
				o.error = {
					code: 'access_denied',
					message: o.meta.errorDetail
				};
			}
		}

		function formatUser(o) {
			if (o && o.id) {
				o.thumbnail = o.photo.prefix + '100x100' + o.photo.suffix;
				o.name = o.firstName + ' ' + o.lastName;
				o.first_name = o.firstName;
				o.last_name = o.lastName;
				if (o.contact) {
					if (o.contact.email) {
						o.email = o.contact.email;
					}
				}
			}
		}

		function formatRequest(p, qs) {
			var token = qs.access_token;
			delete qs.access_token;
			qs.oauth_token = token;
			qs.v = 20121125;
			return true;
		}

	})(hello);

	(function(hello) {

		hello.init({

			github: {

				name: 'GitHub',

				oauth: {
					version: 2,
					auth: 'https://github.com/login/oauth/authorize',
					grant: 'https://github.com/login/oauth/access_token',
					response_type: 'code'
				},

				scope: {
					email: 'user:email'
				},

				base: 'https://api.github.com/',

				get: {
					me: 'user',
					'me/friends': 'user/following?per_page=@{limit|100}',
					'me/following': 'user/following?per_page=@{limit|100}',
					'me/followers': 'user/followers?per_page=@{limit|100}',
					'me/like': 'user/starred?per_page=@{limit|100}'
				},

				wrap: {
					me: function(o, headers) {

						formatError(o, headers);
						formatUser(o);

						return o;
					},

					'default': function(o, headers, req) {

						formatError(o, headers);

						if (Array.isArray(o)) {
							o = {data:o};
						}

						if (o.data) {
							paging(o, headers, req);
							o.data.forEach(formatUser);
						}

						return o;
					}
				},

				xhr: function(p) {

					if (p.method !== 'get' && p.data) {

						// Serialize payload as JSON
						p.headers = p.headers || {};
						p.headers['Content-Type'] = 'application/json';
						if (typeof (p.data) === 'object') {
							p.data = JSON.stringify(p.data);
						}
					}

					return true;
				}
			}
		});

		function formatError(o, headers) {
			var code = headers ? headers.statusCode : (o && 'meta' in o && 'status' in o.meta && o.meta.status);
			if ((code === 401 || code === 403)) {
				o.error = {
					code: 'access_denied',
					message: o.message || (o.data ? o.data.message : 'Could not get response')
				};
				delete o.message;
			}
		}

		function formatUser(o) {
			if (o.id) {
				o.thumbnail = o.picture = o.avatar_url;
				o.name = o.login;
			}
		}

		function paging(res, headers, req) {
			if (res.data && res.data.length && headers && headers.Link) {
				var next = headers.Link.match(/<(.*?)>;\s*rel=\"next\"/);
				if (next) {
					res.paging = {
						next: next[1]
					};
				}
			}
		}

	})(hello);

	(function(hello) {

		var contactsUrl = 'https://www.google.com/m8/feeds/contacts/default/full?v=3.0&alt=json&max-results=@{limit|1000}&start-index=@{start|1}';

		hello.init({

			google: {

				name: 'Google Plus',

				// See: http://code.google.com/apis/accounts/docs/OAuth2UserAgent.html
				oauth: {
					version: 2,
					auth: 'https://accounts.google.com/o/oauth2/auth',
					grant: 'https://accounts.google.com/o/oauth2/token'
				},

				// Authorization scopes
				scope: {
					basic: 'https://www.googleapis.com/auth/plus.me profile',
					email: 'email',
					birthday: '',
					events: '',
					photos: 'https://picasaweb.google.com/data/',
					videos: 'http://gdata.youtube.com',
					friends: 'https://www.google.com/m8/feeds, https://www.googleapis.com/auth/plus.login',
					files: 'https://www.googleapis.com/auth/drive.readonly',
					publish: '',
					publish_files: 'https://www.googleapis.com/auth/drive',
					share: '',
					create_event: '',
					offline_access: ''
				},

				scope_delim: ' ',

				login: function(p) {
					if (p.qs.display === 'none') {
						// Google doesn't like display=none
						p.qs.display = '';
					}

					if (p.qs.response_type === 'code') {

						// Let's set this to an offline access to return a refresh_token
						p.qs.access_type = 'offline';
					}

					// Reauthenticate
					// https://developers.google.com/identity/protocols/
					if (p.options.force) {
						p.qs.approval_prompt = 'force';
					}
				},

				// API base URI
				base: 'https://www.googleapis.com/',

				// Map GET requests
				get: {
					me: 'plus/v1/people/me',

					// Deprecated Sept 1, 2014
					//'me': 'oauth2/v1/userinfo?alt=json',

					// See: https://developers.google.com/+/api/latest/people/list
					'me/friends': 'plus/v1/people/me/people/visible?maxResults=@{limit|100}',
					'me/following': contactsUrl,
					'me/followers': contactsUrl,
					'me/contacts': contactsUrl,
					'me/share': 'plus/v1/people/me/activities/public?maxResults=@{limit|100}',
					'me/feed': 'plus/v1/people/me/activities/public?maxResults=@{limit|100}',
					'me/albums': 'https://picasaweb.google.com/data/feed/api/user/default?alt=json&max-results=@{limit|100}&start-index=@{start|1}',
					'me/album': function(p, callback) {
						var key = p.query.id;
						delete p.query.id;
						callback(key.replace('/entry/', '/feed/'));
					},

					'me/photos': 'https://picasaweb.google.com/data/feed/api/user/default?alt=json&kind=photo&max-results=@{limit|100}&start-index=@{start|1}',

					// See: https://developers.google.com/drive/v2/reference/files/list
					'me/file': 'drive/v2/files/@{id}',
					'me/files': 'drive/v2/files?q=%22@{parent|root}%22+in+parents+and+trashed=false&maxResults=@{limit|100}',

					// See: https://developers.google.com/drive/v2/reference/files/list
					'me/folders': 'drive/v2/files?q=%22@{id|root}%22+in+parents+and+mimeType+=+%22application/vnd.google-apps.folder%22+and+trashed=false&maxResults=@{limit|100}',

					// See: https://developers.google.com/drive/v2/reference/files/list
					'me/folder': 'drive/v2/files?q=%22@{id|root}%22+in+parents+and+trashed=false&maxResults=@{limit|100}'
				},

				// Map POST requests
				post: {

					// Google Drive
					'me/files': uploadDrive,
					'me/folders': function(p, callback) {
						p.data = {
							title: p.data.name,
							parents: [{id: p.data.parent || 'root'}],
							mimeType: 'application/vnd.google-apps.folder'
						};
						callback('drive/v2/files');
					}
				},

				// Map PUT requests
				put: {
					'me/files': uploadDrive
				},

				// Map DELETE requests
				del: {
					'me/files': 'drive/v2/files/@{id}',
					'me/folder': 'drive/v2/files/@{id}'
				},

				// Map PATCH requests
				patch: {
					'me/file': 'drive/v2/files/@{id}'
				},

				wrap: {
					me: function(o) {
						if (o.id) {
							o.last_name = o.family_name || (o.name ? o.name.familyName : null);
							o.first_name = o.given_name || (o.name ? o.name.givenName : null);

							if (o.emails && o.emails.length) {
								o.email = o.emails[0].value;
							}

							formatPerson(o);
						}

						return o;
					},

					'me/friends': function(o) {
						if (o.items) {
							paging(o);
							o.data = o.items;
							o.data.forEach(formatPerson);
							delete o.items;
						}

						return o;
					},

					'me/contacts': formatFriends,
					'me/followers': formatFriends,
					'me/following': formatFriends,
					'me/share': formatFeed,
					'me/feed': formatFeed,
					'me/albums': gEntry,
					'me/photos': formatPhotos,
					'default': gEntry
				},

				xhr: function(p) {

					if (p.method === 'post' || p.method === 'put') {
						toJSON(p);
					}
					else if (p.method === 'patch') {
						hello.utils.extend(p.query, p.data);
						p.data = null;
					}

					return true;
				},

				// Don't even try submitting via form.
				// This means no POST operations in <=IE9
				form: false
			}
		});

		function toInt(s) {
			return parseInt(s, 10);
		}

		function formatFeed(o) {
			paging(o);
			o.data = o.items;
			delete o.items;
			return o;
		}

		// Format: ensure each record contains a name, id etc.
		function formatItem(o) {
			if (o.error) {
				return;
			}

			if (!o.name) {
				o.name = o.title || o.message;
			}

			if (!o.picture) {
				o.picture = o.thumbnailLink;
			}

			if (!o.thumbnail) {
				o.thumbnail = o.thumbnailLink;
			}

			if (o.mimeType === 'application/vnd.google-apps.folder') {
				o.type = 'folder';
				o.files = 'https://www.googleapis.com/drive/v2/files?q=%22' + o.id + '%22+in+parents';
			}

			return o;
		}

		function formatImage(image) {
			return {
				source: image.url,
				width: image.width,
				height: image.height
			};
		}

		function formatPhotos(o) {
			o.data = o.feed.entry.map(formatEntry);
			delete o.feed;
		}

		// Google has a horrible JSON API
		function gEntry(o) {
			paging(o);

			if ('feed' in o && 'entry' in o.feed) {
				o.data = o.feed.entry.map(formatEntry);
				delete o.feed;
			}

			// Old style: Picasa, etc.
			else if ('entry' in o) {
				return formatEntry(o.entry);
			}

			// New style: Google Drive & Plus
			else if ('items' in o) {
				o.data = o.items.map(formatItem);
				delete o.items;
			}
			else {
				formatItem(o);
			}

			return o;
		}

		function formatPerson(o) {
			o.name = o.displayName || o.name;
			o.picture = o.picture || (o.image ? o.image.url : null);
			o.thumbnail = o.picture;
		}

		function formatFriends(o, headers, req) {
			paging(o);
			var r = [];
			if ('feed' in o && 'entry' in o.feed) {
				var token = req.query.access_token;
				for (var i = 0; i < o.feed.entry.length; i++) {
					var a = o.feed.entry[i];

					a.id	= a.id.$t;
					a.name	= a.title.$t;
					delete a.title;
					if (a.gd$email) {
						a.email	= (a.gd$email && a.gd$email.length > 0) ? a.gd$email[0].address : null;
						a.emails = a.gd$email;
						delete a.gd$email;
					}

					if (a.updated) {
						a.updated = a.updated.$t;
					}

					if (a.link) {

						var pic = (a.link.length > 0) ? a.link[0].href : null;
						if (pic && a.link[0].gd$etag) {
							pic += (pic.indexOf('?') > -1 ? '&' : '?') + 'access_token=' + token;
							a.picture = pic;
							a.thumbnail = pic;
						}

						delete a.link;
					}

					if (a.category) {
						delete a.category;
					}
				}

				o.data = o.feed.entry;
				delete o.feed;
			}

			return o;
		}

		function formatEntry(a) {

			var group = a.media$group;
			var photo = group.media$content.length ? group.media$content[0] : {};
			var mediaContent = group.media$content || [];
			var mediaThumbnail = group.media$thumbnail || [];

			var pictures = mediaContent
				.concat(mediaThumbnail)
				.map(formatImage)
				.sort(function(a, b) {
					return a.width - b.width;
				});

			var i = 0;
			var _a;
			var p = {
				id: a.id.$t,
				name: a.title.$t,
				description: a.summary.$t,
				updated_time: a.updated.$t,
				created_time: a.published.$t,
				picture: photo ? photo.url : null,
				pictures: pictures,
				images: [],
				thumbnail: photo ? photo.url : null,
				width: photo.width,
				height: photo.height
			};

			// Get feed/children
			if ('link' in a) {
				for (i = 0; i < a.link.length; i++) {
					var d = a.link[i];
					if (d.rel.match(/\#feed$/)) {
						p.upload_location = p.files = p.photos = d.href;
						break;
					}
				}
			}

			// Get images of different scales
			if ('category' in a && a.category.length) {
				_a = a.category;
				for (i = 0; i < _a.length; i++) {
					if (_a[i].scheme && _a[i].scheme.match(/\#kind$/)) {
						p.type = _a[i].term.replace(/^.*?\#/, '');
					}
				}
			}

			// Get images of different scales
			if ('media$thumbnail' in group && group.media$thumbnail.length) {
				_a = group.media$thumbnail;
				p.thumbnail = _a[0].url;
				p.images = _a.map(formatImage);
			}

			_a = group.media$content;

			if (_a && _a.length) {
				p.images.push(formatImage(_a[0]));
			}

			return p;
		}

		function paging(res) {

			// Contacts V2
			if ('feed' in res && res.feed.openSearch$itemsPerPage) {
				var limit = toInt(res.feed.openSearch$itemsPerPage.$t);
				var start = toInt(res.feed.openSearch$startIndex.$t);
				var total = toInt(res.feed.openSearch$totalResults.$t);

				if ((start + limit) < total) {
					res.paging = {
						next: '?start=' + (start + limit)
					};
				}
			}
			else if ('nextPageToken' in res) {
				res.paging = {
					next: '?pageToken=' + res.nextPageToken
				};
			}
		}

		// Construct a multipart message
		function Multipart() {

			// Internal body
			var body = [];
			var boundary = (Math.random() * 1e10).toString(32);
			var counter = 0;
			var lineBreak = '\r\n';
			var delim = lineBreak + '--' + boundary;
			var ready = function() {};

			var dataUri = /^data\:([^;,]+(\;charset=[^;,]+)?)(\;base64)?,/i;

			// Add file
			function addFile(item) {
				var fr = new FileReader();
				fr.onload = function(e) {
					addContent(btoa(e.target.result), item.type + lineBreak + 'Content-Transfer-Encoding: base64');
				};

				fr.readAsBinaryString(item);
			}

			// Add content
			function addContent(content, type) {
				body.push(lineBreak + 'Content-Type: ' + type + lineBreak + lineBreak + content);
				counter--;
				ready();
			}

			// Add new things to the object
			this.append = function(content, type) {

				// Does the content have an array
				if (typeof (content) === 'string' || !('length' in Object(content))) {
					// Converti to multiples
					content = [content];
				}

				for (var i = 0; i < content.length; i++) {

					counter++;

					var item = content[i];

					// Is this a file?
					// Files can be either Blobs or File types
					if (
						(typeof (File) !== 'undefined' && item instanceof File) ||
						(typeof (Blob) !== 'undefined' && item instanceof Blob)
					) {
						// Read the file in
						addFile(item);
					}

					// Data-URI?
					// Data:[<mime type>][;charset=<charset>][;base64],<encoded data>
					// /^data\:([^;,]+(\;charset=[^;,]+)?)(\;base64)?,/i
					else if (typeof (item) === 'string' && item.match(dataUri)) {
						var m = item.match(dataUri);
						addContent(item.replace(dataUri, ''), m[1] + lineBreak + 'Content-Transfer-Encoding: base64');
					}

					// Regular string
					else {
						addContent(item, type);
					}
				}
			};

			this.onready = function(fn) {
				ready = function() {
					if (counter === 0) {
						// Trigger ready
						body.unshift('');
						body.push('--');
						fn(body.join(delim), boundary);
						body = [];
					}
				};

				ready();
			};
		}

		// Upload to Drive
		// If this is PUT then only augment the file uploaded
		// PUT https://developers.google.com/drive/v2/reference/files/update
		// POST https://developers.google.com/drive/manage-uploads
		function uploadDrive(p, callback) {

			var data = {};

			// Test for DOM element
			if (p.data &&
				(typeof (HTMLInputElement) !== 'undefined' && p.data instanceof HTMLInputElement)
			) {
				p.data = {file: p.data};
			}

			if (!p.data.name && Object(Object(p.data.file).files).length && p.method === 'post') {
				p.data.name = p.data.file.files[0].name;
			}

			if (p.method === 'post') {
				p.data = {
					title: p.data.name,
					parents: [{id: p.data.parent || 'root'}],
					file: p.data.file
				};
			}
			else {

				// Make a reference
				data = p.data;
				p.data = {};

				// Add the parts to change as required
				if (data.parent) {
					p.data.parents = [{id: p.data.parent || 'root'}];
				}

				if (data.file) {
					p.data.file = data.file;
				}

				if (data.name) {
					p.data.title = data.name;
				}
			}

			// Extract the file, if it exists from the data object
			// If the File is an INPUT element lets just concern ourselves with the NodeList
			var file;
			if ('file' in p.data) {
				file = p.data.file;
				delete p.data.file;

				if (typeof (file) === 'object' && 'files' in file) {
					// Assign the NodeList
					file = file.files;
				}

				if (!file || !file.length) {
					callback({
						error: {
							code: 'request_invalid',
							message: 'There were no files attached with this request to upload'
						}
					});
					return;
				}
			}

			// Set type p.data.mimeType = Object(file[0]).type || 'application/octet-stream';

			// Construct a multipart message
			var parts = new Multipart();
			parts.append(JSON.stringify(p.data), 'application/json');

			// Read the file into a  base64 string... yep a hassle, i know
			// FormData doesn't let us assign our own Multipart headers and HTTP Content-Type
			// Alas GoogleApi need these in a particular format
			if (file) {
				parts.append(file);
			}

			parts.onready(function(body, boundary) {

				p.headers['content-type'] = 'multipart/related; boundary="' + boundary + '"';
				p.data = body;

				callback('upload/drive/v2/files' + (data.id ? '/' + data.id : '') + '?uploadType=multipart');
			});

		}

		function toJSON(p) {
			if (typeof (p.data) === 'object') {
				// Convert the POST into a javascript object
				try {
					p.data = JSON.stringify(p.data);
					p.headers['content-type'] = 'application/json';
				}
				catch (e) {}
			}
		}

	})(hello);

	(function(hello) {

		hello.init({

			instagram: {

				name: 'Instagram',

				oauth: {
					// See: http://instagram.com/developer/authentication/
					version: 2,
					auth: 'https://instagram.com/oauth/authorize/',
					grant: 'https://api.instagram.com/oauth/access_token'
				},

				// Refresh the access_token once expired
				refresh: true,

				scope: {
					basic: 'basic',
					photos: '',
					friends: 'relationships',
					publish: 'likes comments',
					email: '',
					share: '',
					publish_files: '',
					files: '',
					videos: '',
					offline_access: ''
				},

				scope_delim: ' ',

				login: function(p) {
					// Instagram throws errors like 'JavaScript API is unsupported' if the display is 'popup'.
					// Make the display anything but 'popup'
					p.qs.display = '';
				},

				base: 'https://api.instagram.com/v1/',

				get: {
					me: 'users/self',
					'me/feed': 'users/self/feed?count=@{limit|100}',
					'me/photos': 'users/self/media/recent?min_id=0&count=@{limit|100}',
					'me/friends': 'users/self/follows?count=@{limit|100}',
					'me/following': 'users/self/follows?count=@{limit|100}',
					'me/followers': 'users/self/followed-by?count=@{limit|100}',
					'friend/photos': 'users/@{id}/media/recent?min_id=0&count=@{limit|100}'
				},

				post: {
					'me/like': function(p, callback) {
						var id = p.data.id;
						p.data = {};
						callback('media/' + id + '/likes');
					}
				},

				del: {
					'me/like': 'media/@{id}/likes'
				},

				wrap: {
					me: function(o) {

						formatError(o);

						if ('data' in o) {
							o.id = o.data.id;
							o.thumbnail = o.data.profile_picture;
							o.name = o.data.full_name || o.data.username;
						}

						return o;
					},

					'me/friends': formatFriends,
					'me/following': formatFriends,
					'me/followers': formatFriends,
					'me/photos': function(o) {

						formatError(o);
						paging(o);

						if ('data' in o) {
							o.data = o.data.filter(function(d) {
								return d.type === 'image';
							});

							o.data.forEach(function(d) {
								d.name = d.caption ? d.caption.text : null;
								d.thumbnail = d.images.thumbnail.url;
								d.picture = d.images.standard_resolution.url;
								d.pictures = Object.keys(d.images)
									.map(function(key) {
										var image = d.images[key];
										return formatImage(image);
									})
									.sort(function(a, b) {
										return a.width - b.width;
									});
							});
						}

						return o;
					},

					'default': function(o) {
						o = formatError(o);
						paging(o);
						return o;
					}
				},

				// Instagram does not return any CORS Headers
				// So besides JSONP we're stuck with proxy
				xhr: function(p, qs) {

					var method = p.method;
					var proxy = method !== 'get';

					if (proxy) {

						if ((method === 'post' || method === 'put') && p.query.access_token) {
							p.data.access_token = p.query.access_token;
							delete p.query.access_token;
						}

						// No access control headers
						// Use the proxy instead
						p.proxy = proxy;
					}

					return proxy;
				},

				// No form
				form: false
			}
		});

		function formatImage(image) {
			return {
				source: image.url,
				width: image.width,
				height: image.height
			};
		}

		function formatError(o) {
			if (typeof o === 'string') {
				return {
					error: {
						code: 'invalid_request',
						message: o
					}
				};
			}

			if (o && 'meta' in o && 'error_type' in o.meta) {
				o.error = {
					code: o.meta.error_type,
					message: o.meta.error_message
				};
			}

			return o;
		}

		function formatFriends(o) {
			paging(o);
			if (o && 'data' in o) {
				o.data.forEach(formatFriend);
			}

			return o;
		}

		function formatFriend(o) {
			if (o.id) {
				o.thumbnail = o.profile_picture;
				o.name = o.full_name || o.username;
			}
		}

		// See: http://instagram.com/developer/endpoints/
		function paging(res) {
			if ('pagination' in res) {
				res.paging = {
					next: res.pagination.next_url
				};
				delete res.pagination;
			}
		}

	})(hello);

	(function(hello) {

		hello.init({

			joinme: {

				name: 'join.me',

				oauth: {
					version: 2,
					auth: 'https://secure.join.me/api/public/v1/auth/oauth2',
					grant: 'https://secure.join.me/api/public/v1/auth/oauth2'
				},

				refresh: false,

				scope: {
					basic: 'user_info',
					user: 'user_info',
					scheduler: 'scheduler',
					start: 'start_meeting',
					email: '',
					friends: '',
					share: '',
					publish: '',
					photos: '',
					publish_files: '',
					files: '',
					videos: '',
					offline_access: ''
				},

				scope_delim: ' ',

				login: function(p) {
					p.options.popup.width = 400;
					p.options.popup.height = 700;
				},

				base: 'https://api.join.me/v1/',

				get: {
					me: 'user',
					meetings: 'meetings',
					'meetings/info': 'meetings/@{id}'
				},

				post: {
					'meetings/start/adhoc': function(p, callback) {
						callback('meetings/start');
					},

					'meetings/start/scheduled': function(p, callback) {
						var meetingId = p.data.meetingId;
						p.data = {};
						callback('meetings/' + meetingId + '/start');
					},

					'meetings/schedule': function(p, callback) {
						callback('meetings');
					}
				},

				patch: {
					'meetings/update': function(p, callback) {
						callback('meetings/' + p.data.meetingId);
					}
				},

				del: {
					'meetings/delete': 'meetings/@{id}'
				},

				wrap: {
					me: function(o, headers) {
						formatError(o, headers);

						if (!o.email) {
							return o;
						}

						o.name = o.fullName;
						o.first_name = o.name.split(' ')[0];
						o.last_name = o.name.split(' ')[1];
						o.id = o.email;

						return o;
					},

					'default': function(o, headers) {
						formatError(o, headers);

						return o;
					}
				},

				xhr: formatRequest

			}
		});

		function formatError(o, headers) {
			var errorCode;
			var message;
			var details;

			if (o && ('Message' in o)) {
				message = o.Message;
				delete o.Message;

				if ('ErrorCode' in o) {
					errorCode = o.ErrorCode;
					delete o.ErrorCode;
				}
				else {
					errorCode = getErrorCode(headers);
				}

				o.error = {
					code: errorCode,
					message: message,
					details: o
				};
			}

			return o;
		}

		function formatRequest(p, qs) {
			// Move the access token from the request body to the request header
			var token = qs.access_token;
			delete qs.access_token;
			p.headers.Authorization = 'Bearer ' + token;

			// Format non-get requests to indicate json body
			if (p.method !== 'get' && p.data) {
				p.headers['Content-Type'] = 'application/json';
				if (typeof (p.data) === 'object') {
					p.data = JSON.stringify(p.data);
				}
			}

			if (p.method === 'put') {
				p.method = 'patch';
			}

			return true;
		}

		function getErrorCode(headers) {
			switch (headers.statusCode) {
				case 400:
					return 'invalid_request';
				case 403:
					return 'stale_token';
				case 401:
					return 'invalid_token';
				case 500:
					return 'server_error';
				default:
					return 'server_error';
			}
		}

	}(hello));

	(function(hello) {

		hello.init({

			linkedin: {

				oauth: {
					version: 2,
					response_type: 'code',
					auth: 'https://www.linkedin.com/uas/oauth2/authorization',
					grant: 'https://www.linkedin.com/uas/oauth2/accessToken'
				},

				// Refresh the access_token once expired
				refresh: true,

				scope: {
					basic: 'r_basicprofile',
					email: 'r_emailaddress',
					files: '',
					friends: '',
					photos: '',
					publish: 'w_share',
					publish_files: 'w_share',
					share: '',
					videos: '',
					offline_access: ''
				},
				scope_delim: ' ',

				base: 'https://api.linkedin.com/v1/',

				get: {
					me: 'people/~:(picture-url,first-name,last-name,id,formatted-name,email-address)',

					// See: http://developer.linkedin.com/documents/get-network-updates-and-statistics-api
					'me/share': 'people/~/network/updates?count=@{limit|250}'
				},

				post: {

					// See: https://developer.linkedin.com/documents/api-requests-json
					'me/share': function(p, callback) {
						var data = {
							visibility: {
								code: 'anyone'
							}
						};

						if (p.data.id) {

							data.attribution = {
								share: {
									id: p.data.id
								}
							};

						}
						else {
							data.comment = p.data.message;
							if (p.data.picture && p.data.link) {
								data.content = {
									'submitted-url': p.data.link,
									'submitted-image-url': p.data.picture
								};
							}
						}

						p.data = JSON.stringify(data);

						callback('people/~/shares?format=json');
					},

					'me/like': like
				},

				del:{
					'me/like': like
				},

				wrap: {
					me: function(o) {
						formatError(o);
						formatUser(o);
						return o;
					},

					'me/friends': formatFriends,
					'me/following': formatFriends,
					'me/followers': formatFriends,
					'me/share': function(o) {
						formatError(o);
						paging(o);
						if (o.values) {
							o.data = o.values.map(formatUser);
							o.data.forEach(function(item) {
								item.message = item.headline;
							});

							delete o.values;
						}

						return o;
					},

					'default': function(o, headers) {
						formatError(o);
						empty(o, headers);
						paging(o);
					}
				},

				jsonp: function(p, qs) {
					formatQuery(qs);
					if (p.method === 'get') {
						qs.format = 'jsonp';
						qs['error-callback'] = p.callbackID;
					}
				},

				xhr: function(p, qs) {
					if (p.method !== 'get') {
						formatQuery(qs);
						p.headers['Content-Type'] = 'application/json';

						// Note: x-li-format ensures error responses are not returned in XML
						p.headers['x-li-format'] = 'json';
						p.proxy = true;
						return true;
					}

					return false;
				}
			}
		});

		function formatError(o) {
			if (o && 'errorCode' in o) {
				o.error = {
					code: o.status,
					message: o.message
				};
			}
		}

		function formatUser(o) {
			if (o.error) {
				return;
			}

			o.first_name = o.firstName;
			o.last_name = o.lastName;
			o.name = o.formattedName || (o.first_name + ' ' + o.last_name);
			o.thumbnail = o.pictureUrl;
			o.email = o.emailAddress;
			return o;
		}

		function formatFriends(o) {
			formatError(o);
			paging(o);
			if (o.values) {
				o.data = o.values.map(formatUser);
				delete o.values;
			}

			return o;
		}

		function paging(res) {
			if ('_count' in res && '_start' in res && (res._count + res._start) < res._total) {
				res.paging = {
					next: '?start=' + (res._start + res._count) + '&count=' + res._count
				};
			}
		}

		function empty(o, headers) {
			if (JSON.stringify(o) === '{}' && headers.statusCode === 200) {
				o.success = true;
			}
		}

		function formatQuery(qs) {
			// LinkedIn signs requests with the parameter 'oauth2_access_token'
			// ... yeah another one who thinks they should be different!
			if (qs.access_token) {
				qs.oauth2_access_token = qs.access_token;
				delete qs.access_token;
			}
		}

		function like(p, callback) {
			p.headers['x-li-format'] = 'json';
			var id = p.data.id;
			p.data = (p.method !== 'delete').toString();
			p.method = 'put';
			callback('people/~/network/updates/key=' + id + '/is-liked');
		}

	})(hello);

	// See: https://developers.soundcloud.com/docs/api/reference
	(function(hello) {

		hello.init({

			soundcloud: {
				name: 'SoundCloud',

				oauth: {
					version: 2,
					auth: 'https://soundcloud.com/connect',
					grant: 'https://soundcloud.com/oauth2/token'
				},

				// Request path translated
				base: 'https://api.soundcloud.com/',
				get: {
					me: 'me.json',

					// Http://developers.soundcloud.com/docs/api/reference#me
					'me/friends': 'me/followings.json',
					'me/followers': 'me/followers.json',
					'me/following': 'me/followings.json',

					// See: http://developers.soundcloud.com/docs/api/reference#activities
					'default': function(p, callback) {

						// Include '.json at the end of each request'
						callback(p.path + '.json');
					}
				},

				// Response handlers
				wrap: {
					me: function(o) {
						formatUser(o);
						return o;
					},

					'default': function(o) {
						if (Array.isArray(o)) {
							o = {
								data: o.map(formatUser)
							};
						}

						paging(o);
						return o;
					}
				},

				xhr: formatRequest,
				jsonp: formatRequest
			}
		});

		function formatRequest(p, qs) {
			// Alter the querystring
			var token = qs.access_token;
			delete qs.access_token;
			qs.oauth_token = token;
			qs['_status_code_map[302]'] = 200;
			return true;
		}

		function formatUser(o) {
			if (o.id) {
				o.picture = o.avatar_url;
				o.thumbnail = o.avatar_url;
				o.name = o.username || o.full_name;
			}

			return o;
		}

		// See: http://developers.soundcloud.com/docs/api/reference#activities
		function paging(res) {
			if ('next_href' in res) {
				res.paging = {
					next: res.next_href
				};
			}
		}

	})(hello);

	(function(hello) {

		var base = 'https://api.twitter.com/';

		hello.init({

			twitter: {

				// Ensure that you define an oauth_proxy
				oauth: {
					version: '1.0a',
					auth: base + 'oauth/authenticate',
					request: base + 'oauth/request_token',
					token: base + 'oauth/access_token'
				},

				login: function(p) {
					// Reauthenticate
					// https://dev.twitter.com/oauth/reference/get/oauth/authenticate
					var prefix = '?force_login=true';
					this.oauth.auth = this.oauth.auth.replace(prefix, '') + (p.options.force ? prefix : '');
				},

				base: base + '1.1/',

				get: {
					me: 'account/verify_credentials.json',
					'me/friends': 'friends/list.json?count=@{limit|200}',
					'me/following': 'friends/list.json?count=@{limit|200}',
					'me/followers': 'followers/list.json?count=@{limit|200}',

					// Https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
					'me/share': 'statuses/user_timeline.json?count=@{limit|200}',

					// Https://dev.twitter.com/rest/reference/get/favorites/list
					'me/like': 'favorites/list.json?count=@{limit|200}'
				},

				post: {
					'me/share': function(p, callback) {

						var data = p.data;
						p.data = null;

						var status = [];

						// Change message to status
						if (data.message) {
							status.push(data.message);
							delete data.message;
						}

						// If link is given
						if (data.link) {
							status.push(data.link);
							delete data.link;
						}

						if (data.picture) {
							status.push(data.picture);
							delete data.picture;
						}

						// Compound all the components
						if (status.length) {
							data.status = status.join(' ');
						}

						// Tweet media
						if (data.file) {
							data['media[]'] = data.file;
							delete data.file;
							p.data = data;
							callback('statuses/update_with_media.json');
						}

						// Retweet?
						else if ('id' in data) {
							callback('statuses/retweet/' + data.id + '.json');
						}

						// Tweet
						else {
							// Assign the post body to the query parameters
							hello.utils.extend(p.query, data);
							callback('statuses/update.json?include_entities=1');
						}
					},

					// See: https://dev.twitter.com/rest/reference/post/favorites/create
					'me/like': function(p, callback) {
						var id = p.data.id;
						p.data = null;
						callback('favorites/create.json?id=' + id);
					}
				},

				del: {

					// See: https://dev.twitter.com/rest/reference/post/favorites/destroy
					'me/like': function() {
						p.method = 'post';
						var id = p.data.id;
						p.data = null;
						callback('favorites/destroy.json?id=' + id);
					}
				},

				wrap: {
					me: function(res) {
						formatError(res);
						formatUser(res);
						return res;
					},

					'me/friends': formatFriends,
					'me/followers': formatFriends,
					'me/following': formatFriends,

					'me/share': function(res) {
						formatError(res);
						paging(res);
						if (!res.error && 'length' in res) {
							return {data: res};
						}

						return res;
					},

					'default': function(res) {
						res = arrayToDataResponse(res);
						paging(res);
						return res;
					}
				},
				xhr: function(p) {

					// Rely on the proxy for non-GET requests.
					return (p.method !== 'get');
				}
			}
		});

		function formatUser(o) {
			if (o.id) {
				if (o.name) {
					var m = o.name.split(' ');
					o.first_name = m.shift();
					o.last_name = m.join(' ');
				}

				// See: https://dev.twitter.com/overview/general/user-profile-images-and-banners
				o.thumbnail = o.profile_image_url_https || o.profile_image_url;
			}

			return o;
		}

		function formatFriends(o) {
			formatError(o);
			paging(o);
			if (o.users) {
				o.data = o.users.map(formatUser);
				delete o.users;
			}

			return o;
		}

		function formatError(o) {
			if (o.errors) {
				var e = o.errors[0];
				o.error = {
					code: 'request_failed',
					message: e.message
				};
			}
		}

		// Take a cursor and add it to the path
		function paging(res) {
			// Does the response include a 'next_cursor_string'
			if ('next_cursor_str' in res) {
				// See: https://dev.twitter.com/docs/misc/cursoring
				res.paging = {
					next: '?cursor=' + res.next_cursor_str
				};
			}
		}

		function arrayToDataResponse(res) {
			return Array.isArray(res) ? {data: res} : res;
		}

		/**
		// The documentation says to define user in the request
		// Although its not actually required.

		var user_id;

		function withUserId(callback){
			if(user_id){
				callback(user_id);
			}
			else{
				hello.api('twitter:/me', function(o){
					user_id = o.id;
					callback(o.id);
				});
			}
		}

		function sign(url){
			return function(p, callback){
				withUserId(function(user_id){
					callback(url+'?user_id='+user_id);
				});
			};
		}
		*/

	})(hello);

	// Vkontakte (vk.com)
	(function(hello) {

		hello.init({

			vk: {
				name: 'Vk',

				// See https://vk.com/dev/oauth_dialog
				oauth: {
					version: 2,
					auth: 'https://oauth.vk.com/authorize',
					grant: 'https://oauth.vk.com/access_token'
				},

				// Authorization scopes
				// See https://vk.com/dev/permissions
				scope: {
					email: 'email',
					friends: 'friends',
					photos: 'photos',
					videos: 'video',
					share: 'share',
					offline_access: 'offline'
				},

				// Refresh the access_token
				refresh: true,

				login: function(p) {
					p.qs.display = window.navigator &&
						window.navigator.userAgent &&
						/ipad|phone|phone|android/.test(window.navigator.userAgent.toLowerCase()) ? 'mobile' : 'popup';
				},

				// API Base URL
				base: 'https://api.vk.com/method/',

				// Map GET requests
				get: {
					me: function(p, callback) {
						p.query.fields = 'id,first_name,last_name,photo_max';
						callback('users.get');
					}
				},

				wrap: {
					me: function(res, headers, req) {
						formatError(res);
						return formatUser(res, req);
					}
				},

				// No XHR
				xhr: false,

				// All requests should be JSONP as of missing CORS headers in https://api.vk.com/method/*
				jsonp: true,

				// No form
				form: false
			}
		});

		function formatUser(o, req) {

			if (o !== null && 'response' in o && o.response !== null && o.response.length) {
				o = o.response[0];
				o.id = o.uid;
				o.thumbnail = o.picture = o.photo_max;
				o.name = o.first_name + ' ' + o.last_name;

				if (req.authResponse && req.authResponse.email !== null)
					o.email = req.authResponse.email;
			}

			return o;
		}

		function formatError(o) {

			if (o.error) {
				var e = o.error;
				o.error = {
					code: e.error_code,
					message: e.error_msg
				};
			}
		}

	})(hello);

	(function(hello) {

		hello.init({
			windows: {
				name: 'Windows live',

				// REF: http://msdn.microsoft.com/en-us/library/hh243641.aspx
				oauth: {
					version: 2,
					auth: 'https://login.live.com/oauth20_authorize.srf',
					grant: 'https://login.live.com/oauth20_token.srf'
				},

				// Refresh the access_token once expired
				refresh: true,

				logout: function() {
					return 'http://login.live.com/oauth20_logout.srf?ts=' + (new Date()).getTime();
				},

				// Authorization scopes
				scope: {
					basic: 'wl.signin,wl.basic',
					email: 'wl.emails',
					birthday: 'wl.birthday',
					events: 'wl.calendars',
					photos: 'wl.photos',
					videos: 'wl.photos',
					friends: 'wl.contacts_emails',
					files: 'wl.skydrive',
					publish: 'wl.share',
					publish_files: 'wl.skydrive_update',
					share: 'wl.share',
					create_event: 'wl.calendars_update,wl.events_create',
					offline_access: 'wl.offline_access'
				},

				// API base URL
				base: 'https://apis.live.net/v5.0/',

				// Map GET requests
				get: {

					// Friends
					me: 'me',
					'me/friends': 'me/friends',
					'me/following': 'me/contacts',
					'me/followers': 'me/friends',
					'me/contacts': 'me/contacts',

					'me/albums': 'me/albums',

					// Include the data[id] in the path
					'me/album': '@{id}/files',
					'me/photo': '@{id}',

					// Files
					'me/files': '@{parent|me/skydrive}/files',
					'me/folders': '@{id|me/skydrive}/files',
					'me/folder': '@{id|me/skydrive}/files'
				},

				// Map POST requests
				post: {
					'me/albums': 'me/albums',
					'me/album': '@{id}/files/',

					'me/folders': '@{id|me/skydrive/}',
					'me/files': '@{parent|me/skydrive}/files'
				},

				// Map DELETE requests
				del: {
					// Include the data[id] in the path
					'me/album': '@{id}',
					'me/photo': '@{id}',
					'me/folder': '@{id}',
					'me/files': '@{id}'
				},

				wrap: {
					me: formatUser,

					'me/friends': formatFriends,
					'me/contacts': formatFriends,
					'me/followers': formatFriends,
					'me/following': formatFriends,
					'me/albums': formatAlbums,
					'me/photos': formatDefault,
					'default': formatDefault
				},

				xhr: function(p) {
					if (p.method !== 'get' && p.method !== 'delete' && !hello.utils.hasBinary(p.data)) {

						// Does this have a data-uri to upload as a file?
						if (typeof (p.data.file) === 'string') {
							p.data.file = hello.utils.toBlob(p.data.file);
						}
						else {
							p.data = JSON.stringify(p.data);
							p.headers = {
								'Content-Type': 'application/json'
							};
						}
					}

					return true;
				},

				jsonp: function(p) {
					if (p.method !== 'get' && !hello.utils.hasBinary(p.data)) {
						p.data.method = p.method;
						p.method = 'get';
					}
				}
			}
		});

		function formatDefault(o) {
			if ('data' in o) {
				o.data.forEach(function(d) {
					if (d.picture) {
						d.thumbnail = d.picture;
					}

					if (d.images) {
						d.pictures = d.images
							.map(formatImage)
							.sort(function(a, b) {
								return a.width - b.width;
							});
					}
				});
			}

			return o;
		}

		function formatImage(image) {
			return {
				width: image.width,
				height: image.height,
				source: image.source
			};
		}

		function formatAlbums(o) {
			if ('data' in o) {
				o.data.forEach(function(d) {
					d.photos = d.files = 'https://apis.live.net/v5.0/' + d.id + '/photos';
				});
			}

			return o;
		}

		function formatUser(o, headers, req) {
			if (o.id) {
				var token = req.query.access_token;
				if (o.emails) {
					o.email = o.emails.preferred;
				}

				// If this is not an non-network friend
				if (o.is_friend !== false) {
					// Use the id of the user_id if available
					var id = (o.user_id || o.id);
					o.thumbnail = o.picture = 'https://apis.live.net/v5.0/' + id + '/picture?access_token=' + token;
				}
			}

			return o;
		}

		function formatFriends(o, headers, req) {
			if ('data' in o) {
				o.data.forEach(function(d) {
					formatUser(d, headers, req);
				});
			}

			return o;
		}

	})(hello);

	(function(hello) {

		hello.init({

			yahoo: {

				// Ensure that you define an oauth_proxy
				oauth: {
					version: '1.0a',
					auth: 'https://api.login.yahoo.com/oauth/v2/request_auth',
					request: 'https://api.login.yahoo.com/oauth/v2/get_request_token',
					token: 'https://api.login.yahoo.com/oauth/v2/get_token'
				},

				// Login handler
				login: function(p) {
					// Change the default popup window to be at least 560
					// Yahoo does dynamically change it on the fly for the signin screen (only, what if your already signed in)
					p.options.popup.width = 560;

					// Yahoo throws an parameter error if for whatever reason the state.scope contains a comma, so lets remove scope
					try {delete p.qs.state.scope;}
					catch (e) {}
				},

				base: 'https://social.yahooapis.com/v1/',

				get: {
					me: yql('select * from social.profile(0) where guid=me'),
					'me/friends': yql('select * from social.contacts(0) where guid=me'),
					'me/following': yql('select * from social.contacts(0) where guid=me')
				},
				wrap: {
					me: formatUser,

					// Can't get IDs
					// It might be better to loop through the social.relationship table with has unique IDs of users.
					'me/friends': formatFriends,
					'me/following': formatFriends,
					'default': paging
				}
			}
		});

		/*
			// Auto-refresh fix: bug in Yahoo can't get this to work with node-oauth-shim
			login : function(o){
				// Is the user already logged in
				var auth = hello('yahoo').getAuthResponse();

				// Is this a refresh token?
				if(o.options.display==='none'&&auth&&auth.access_token&&auth.refresh_token){
					// Add the old token and the refresh token, including path to the query
					// See http://developer.yahoo.com/oauth/guide/oauth-refreshaccesstoken.html
					o.qs.access_token = auth.access_token;
					o.qs.refresh_token = auth.refresh_token;
					o.qs.token_url = 'https://api.login.yahoo.com/oauth/v2/get_token';
				}
			},
		*/

		function formatError(o) {
			if (o && 'meta' in o && 'error_type' in o.meta) {
				o.error = {
					code: o.meta.error_type,
					message: o.meta.error_message
				};
			}
		}

		function formatUser(o) {

			formatError(o);
			if (o.query && o.query.results && o.query.results.profile) {
				o = o.query.results.profile;
				o.id = o.guid;
				o.last_name = o.familyName;
				o.first_name = o.givenName || o.nickname;
				var a = [];
				if (o.first_name) {
					a.push(o.first_name);
				}

				if (o.last_name) {
					a.push(o.last_name);
				}

				o.name = a.join(' ');
				o.email = (o.emails && o.emails[0]) ? o.emails[0].handle : null;
				o.thumbnail = o.image ? o.image.imageUrl : null;
			}

			return o;
		}

		function formatFriends(o, headers, request) {
			formatError(o);
			paging(o, headers, request);
			var contact;
			var field;
			if (o.query && o.query.results && o.query.results.contact) {
				o.data = o.query.results.contact;
				delete o.query;

				if (!Array.isArray(o.data)) {
					o.data = [o.data];
				}

				o.data.forEach(formatFriend);
			}

			return o;
		}

		function formatFriend(contact) {
			contact.id = null;

			// #362: Reports of responses returning a single item, rather than an Array of items.
			// Format the contact.fields to be an array.
			if (contact.fields && !(contact.fields instanceof Array)) {
				contact.fields = [contact.fields];
			}

			(contact.fields || []).forEach(function(field) {
				if (field.type === 'email') {
					contact.email = field.value;
				}

				if (field.type === 'name') {
					contact.first_name = field.value.givenName;
					contact.last_name = field.value.familyName;
					contact.name = field.value.givenName + ' ' + field.value.familyName;
				}

				if (field.type === 'yahooid') {
					contact.id = field.value;
				}
			});
		}

		function paging(res, headers, request) {

			// See: http://developer.yahoo.com/yql/guide/paging.html#local_limits
			if (res.query && res.query.count && request.options) {
				res.paging = {
					next: '?start=' + (res.query.count + (+request.options.start || 1))
				};
			}

			return res;
		}

		function yql(q) {
			return 'https://query.yahooapis.com/v1/yql?q=' + (q + ' limit @{limit|100} offset @{start|0}').replace(/\s/g, '%20') + '&format=json';
		}

	})(hello);

	// Register as anonymous AMD module
	if (true) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return hello;
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}

	// CommonJS module for browserify
	if (typeof module === 'object' && module.exports) {
		module.exports = hello;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(268).setImmediate))

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(2).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(268).setImmediate, __webpack_require__(268).clearImmediate))

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.HttpMiddleware = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _middleware = __webpack_require__(141);

	var _parseHeaders = __webpack_require__(270);

	var _parseHeaders2 = _interopRequireDefault(_parseHeaders);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var HttpMiddleware = exports.HttpMiddleware = function (_KinveyMiddleware) {
	  _inherits(HttpMiddleware, _KinveyMiddleware);

	  function HttpMiddleware() {
	    var name = arguments.length <= 0 || arguments[0] === undefined ? 'Kinvey HTML5 Http Middleware' : arguments[0];

	    _classCallCheck(this, HttpMiddleware);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(HttpMiddleware).call(this, name));
	  }

	  _createClass(HttpMiddleware, [{
	    key: 'handle',
	    value: function handle(request) {
	      return _get(Object.getPrototypeOf(HttpMiddleware.prototype), 'handle', this).call(this, request).then(function () {
	        var promise = new Promise(function (resolve, reject) {
	          // Create request
	          var xhr = new XMLHttpRequest();
	          xhr.open(request.method, request.url);
	          xhr.responseType = request.responseType;

	          // Append request headers
	          for (var name in request.headers) {
	            if (request.headers.hasOwnProperty(name)) {
	              xhr.setRequestHeader(name, request.headers[name]);
	            }
	          }

	          xhr.onload = xhr.ontimeout = xhr.onabort = xhr.onerror = function () {
	            // Extract status code
	            var statusCode = xhr.status;

	            // Extract the response
	            var responseData = xhr.response || null;
	            if (xhr.response) {
	              responseData = xhr.responseText || null;
	            }

	            // Set the response for the request
	            request.response = {
	              statusCode: statusCode,
	              headers: (0, _parseHeaders2.default)(xhr.getAllResponseHeaders()),
	              data: responseData
	            };

	            // Success
	            if (statusCode >= 200 && statusCode < 300 || statusCode === 304) {
	              return resolve(request);
	            }

	            // Error
	            return reject(request);
	          };

	          // Send xhr
	          xhr.send(request.data);
	        });
	        return promise;
	      });
	    }
	  }]);

	  return HttpMiddleware;
	}(_middleware.KinveyMiddleware);

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	var trim = __webpack_require__(271)
	  , forEach = __webpack_require__(272)
	  , isArray = function(arg) {
	      return Object.prototype.toString.call(arg) === '[object Array]';
	    }

	module.exports = function (headers) {
	  if (!headers)
	    return {}

	  var result = {}

	  forEach(
	      trim(headers).split('\n')
	    , function (row) {
	        var index = row.indexOf(':')
	          , key = trim(row.slice(0, index)).toLowerCase()
	          , value = trim(row.slice(index + 1))

	        if (typeof(result[key]) === 'undefined') {
	          result[key] = value
	        } else if (isArray(result[key])) {
	          result[key].push(value)
	        } else {
	          result[key] = [ result[key], value ]
	        }
	      }
	  )

	  return result
	}

/***/ },
/* 271 */
/***/ function(module, exports) {

	
	exports = module.exports = trim;

	function trim(str){
	  return str.replace(/^\s*|\s*$/g, '');
	}

	exports.left = function(str){
	  return str.replace(/^\s*/, '');
	};

	exports.right = function(str){
	  return str.replace(/\s*$/, '');
	};


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(273)

	module.exports = forEach

	var toString = Object.prototype.toString
	var hasOwnProperty = Object.prototype.hasOwnProperty

	function forEach(list, iterator, context) {
	    if (!isFunction(iterator)) {
	        throw new TypeError('iterator must be a function')
	    }

	    if (arguments.length < 3) {
	        context = this
	    }
	    
	    if (toString.call(list) === '[object Array]')
	        forEachArray(list, iterator, context)
	    else if (typeof list === 'string')
	        forEachString(list, iterator, context)
	    else
	        forEachObject(list, iterator, context)
	}

	function forEachArray(array, iterator, context) {
	    for (var i = 0, len = array.length; i < len; i++) {
	        if (hasOwnProperty.call(array, i)) {
	            iterator.call(context, array[i], i, array)
	        }
	    }
	}

	function forEachString(string, iterator, context) {
	    for (var i = 0, len = string.length; i < len; i++) {
	        // no such thing as a sparse string.
	        iterator.call(context, string.charAt(i), i, string)
	    }
	}

	function forEachObject(object, iterator, context) {
	    for (var k in object) {
	        if (hasOwnProperty.call(object, k)) {
	            iterator.call(context, object[k], k, object)
	        }
	    }
	}


/***/ },
/* 273 */
/***/ function(module, exports) {

	module.exports = isFunction

	var toString = Object.prototype.toString

	function isFunction (fn) {
	  var string = toString.call(fn)
	  return string === '[object Function]' ||
	    (typeof fn === 'function' && string !== '[object RegExp]') ||
	    (typeof window !== 'undefined' &&
	     // IE8 and below
	     (fn === window.setTimeout ||
	      fn === window.alert ||
	      fn === window.confirm ||
	      fn === window.prompt))
	};


/***/ }
/******/ ])
});
;